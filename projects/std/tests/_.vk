class A {

    infix `*`(rhs: Self) {}

    infix `+`(rhs: Self) {}

    infix `-=`(rhs: Self) {

    }
}

@native
class Point {
    x: f32,
    y: f32,
    constructor() {

    }
    apply() {}
    unapply() {}
    infix `-=`() {
        block
    }
    infix `+`() {
        block
    }
    infix `+=`() {
        block
    }
    infix `-`() {
        block
    }
}


class Point(x: f32, y: f32)

class Point {
    x: f32, y: f32
}

extends Point {
    infix `-`(rhs: Self) {
        block
    }
}
class Namespace {
    Lkie
}

def say_hello() / Console {
    print("hello world")
}

def pure() / [] {
    say_hello()
}

def print_lines(file: File) {
    try {
        file.lines.map {
            if line.is_empty {
                Break()
            }
            else {
                print(line)
            }
        }
    }
    catch {

    }
}

if line.is_empty {
Break()
}
else {
print(line)
}
