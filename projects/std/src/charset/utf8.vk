//+
Represents a growable utf8 string literal
//-
#external
class String: Eq {
    inner : Vector<u8>
}

constructor String {
    //+
    Creates a new string literal

    @s: Types that allow lossless conversion to strings
    @capacity: The preallocated capacity of the string

    # Examples
    ```
    let c: char = '1';
    @assert_eq(String(char), "1");
    ```
    //-
    #external
    def String(into s: String, capacity: Integer = 0) -> Self {

    }
}

extends String {
    //+
    Returns `true` if [`Self`] has a length of zero bytes.
    
    # Examples
    ```
    let s = "";
    assert!(s.is_empty());
    
    let s = "not empty";
    assert!(!s.is_empty());
    ```
    
    # Notice
    
    For zero-width space characters, visually empty, but still returns `false`
    //-
    #external
    def is_empty(self, <, >) -> bool {

    }

    //+ doc

    //-
    #external
    def concat(self, into ..other: String, <, >) -> String {

    }

    //+ doc

    //-
    #external
    def take(self, <, min: Integer, max: Integer, >) -> String {

    }

    #external
    def repeat(self, n: Integer, <, >) -> Self {
        @assert(n > 0);
    }

    #external
    def pad(self, c: Character, <, >) {

    }

    #external
    def pad_front(self, <, >) {

    }
}
