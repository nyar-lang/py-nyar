

@external class UTF8 {
    _inner: u32
}

###^
Represents a growable utf8 string literal
###
@external class UTF8String: AbstructString {
    _inner: Vector[u8]
    ###^
    Creates a new string literal

    @s: Types that allow lossless conversion to strings
    @capacity: The preallocated capacity of the string

    # Examples
    ```
    let c: char = '1';
    @assert_eq(c, "1");
    ```
    ###
    constructor(into s: String, capacity: Integer = 0) {}
    try_from(s: Vector[u8]): Self / [EncodeError] {}
}

@external extends String {
    ###^
    Returns `true` if [`Self`] has a length of zero bytes.
    
    # Examples
    ```
    let s = "";
    @assert(s.is_empty());
    
    let s = "not empty";
    @assert(!s.is_empty());
    ```
    
    # Notice
    
    For zero-width space characters, visually empty, but still returns `false`
    ###
    def is_empty(self, <, >) -> bool {

    }

    ###^ doc

    ###
    def concat(self, into ..other: String, <, >) -> String {

    }

    ###^ doc

    ###
    def take(self, <, min: Integer, max: Integer, >) -> String {

    }

    def repeat(self, n: Integer, <, >) -> Self {
        @assert(n > 0);
    }

    def pad(self, c: Character, <, >) {

    }

    def pad_front(self, <, >) {

    }
}
