# General method of table-like structure
#strict_parameters
trait AbstructString {
    meta encoding: UTF8String;
    def is_empty(self) -> bool {

    }
}

trait AbstractString {
    type Character;
    let ENCODING: UTF8String;
    #protected
    def get_encoding(self) -> UTF8String {
        Self::ENCODING
    }
    def bytes() -> u8;
    def chars() -> Iterator<Self::Character>
}

class String {

}




#native class AsciiString {

}

extends String: CharacterEncoding {
    def get_encodeing()
}

def get_encoding<T>() -> Option<T> {
    if T < CharacterEncoding {
        return
    }
}

extends ctor A {

}

