# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0091")
        buf.write("\u0450\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\3\2\7\2\u00a0\n\2\f\2\16\2\u00a3\13\2\3")
        buf.write("\2\3\2\3\3\3\3\3\3\5\3\u00aa\n\3\3\3\3\3\5\3\u00ae\n\3")
        buf.write("\3\3\3\3\5\3\u00b2\n\3\3\3\3\3\3\3\5\3\u00b7\n\3\3\3\5")
        buf.write("\3\u00ba\n\3\3\3\3\3\5\3\u00be\n\3\3\3\5\3\u00c1\n\3\3")
        buf.write("\3\3\3\5\3\u00c5\n\3\3\3\3\3\5\3\u00c9\n\3\3\3\3\3\5\3")
        buf.write("\u00cd\n\3\3\3\3\3\5\3\u00d1\n\3\3\3\3\3\5\3\u00d5\n\3")
        buf.write("\3\3\3\3\5\3\u00d9\n\3\5\3\u00db\n\3\3\4\3\4\5\4\u00df")
        buf.write("\n\4\3\5\3\5\3\6\3\6\3\6\5\6\u00e6\n\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u00f0\n\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u00f7\n\6\3\6\3\6\3\6\3\6\5\6\u00fd\n\6\3\7\3\7\3\7\5")
        buf.write("\7\u0102\n\7\3\7\5\7\u0105\n\7\3\7\5\7\u0108\n\7\3\b\3")
        buf.write("\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\7\n\u0116\n")
        buf.write("\n\f\n\16\n\u0119\13\n\3\n\3\n\3\13\3\13\7\13\u011f\n")
        buf.write("\13\f\13\16\13\u0122\13\13\3\13\3\13\3\13\3\13\3\13\7")
        buf.write("\13\u0129\n\13\f\13\16\13\u012c\13\13\3\13\5\13\u012f")
        buf.write("\n\13\3\f\3\f\7\f\u0133\n\f\f\f\16\f\u0136\13\f\3\f\3")
        buf.write("\f\5\f\u013a\n\f\3\f\6\f\u013d\n\f\r\f\16\f\u013e\5\f")
        buf.write("\u0141\n\f\3\r\3\r\3\r\7\r\u0146\n\r\f\r\16\r\u0149\13")
        buf.write("\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u015a\n\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u0187\n\16\f")
        buf.write("\16\16\16\u018a\13\16\3\17\3\17\3\17\5\17\u018f\n\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0199\n\17")
        buf.write("\3\17\3\17\5\17\u019d\n\17\3\20\3\20\3\20\3\20\3\20\7")
        buf.write("\20\u01a4\n\20\f\20\16\20\u01a7\13\20\3\20\5\20\u01aa")
        buf.write("\n\20\5\20\u01ac\n\20\3\20\3\20\3\21\3\21\3\21\5\21\u01b3")
        buf.write("\n\21\3\22\3\22\3\23\3\23\3\23\3\23\3\23\5\23\u01bc\n")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\5\23\u01c3\n\23\5\23\u01c5")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u01cd\n\24\f")
        buf.write("\24\16\24\u01d0\13\24\5\24\u01d2\n\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\7\24\u01db\n\24\f\24\16\24\u01de\13")
        buf.write("\24\5\24\u01e0\n\24\3\24\3\24\3\24\3\24\5\24\u01e6\n\24")
        buf.write("\3\24\5\24\u01e9\n\24\3\24\3\24\3\24\3\24\3\24\3\24\7")
        buf.write("\24\u01f1\n\24\f\24\16\24\u01f4\13\24\3\25\3\25\3\25\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u0219\n\26\3\27\3\27\5\27\u021d\n\27\3\27\3\27\3\27\7")
        buf.write("\27\u0222\n\27\f\27\16\27\u0225\13\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u022b\n\27\3\30\3\30\3\30\3\30\3\30\7\30\u0232")
        buf.write("\n\30\f\30\16\30\u0235\13\30\3\30\3\30\3\30\7\30\u023a")
        buf.write("\n\30\f\30\16\30\u023d\13\30\3\30\5\30\u0240\n\30\3\31")
        buf.write("\5\31\u0243\n\31\3\31\3\31\5\31\u0247\n\31\3\31\3\31\3")
        buf.write("\31\3\31\5\31\u024d\n\31\3\31\3\31\3\31\3\31\5\31\u0253")
        buf.write("\n\31\3\31\3\31\3\31\3\31\5\31\u0259\n\31\3\32\3\32\3")
        buf.write("\32\3\32\3\32\7\32\u0260\n\32\f\32\16\32\u0263\13\32\3")
        buf.write("\32\5\32\u0266\n\32\3\32\3\32\5\32\u026a\n\32\3\33\3\33")
        buf.write("\5\33\u026e\n\33\3\33\5\33\u0271\n\33\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u0277\n\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35")
        buf.write("\u027f\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0287\n")
        buf.write("\36\3\37\3\37\3\37\3\37\3 \3 \3 \6 \u0290\n \r \16 \u0291")
        buf.write("\3 \3 \3 \3 \3 \7 \u0299\n \f \16 \u029c\13 \3 \3 \3 ")
        buf.write("\5 \u02a1\n \3!\3!\3!\5!\u02a6\n!\3\"\3\"\3\"\3\"\5\"")
        buf.write("\u02ac\n\"\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u02c9\n%\3&\3")
        buf.write("&\7&\u02cd\n&\f&\16&\u02d0\13&\3&\3&\3&\7&\u02d5\n&\f")
        buf.write("&\16&\u02d8\13&\3&\5&\u02db\n&\3\'\3\'\3\'\3\'\3(\3(\5")
        buf.write("(\u02e3\n(\3)\3)\3)\3)\3)\5)\u02ea\n)\3*\3*\3*\3*\6*\u02f0")
        buf.write("\n*\r*\16*\u02f1\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\5*\u0304\n*\3+\3+\3+\3+\3+\3+\3+\3+\5+\u030e")
        buf.write("\n+\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u031f")
        buf.write("\n-\3.\3.\3.\3.\3/\3/\7/\u0327\n/\f/\16/\u032a\13/\3/")
        buf.write("\3/\3/\7/\u032f\n/\f/\16/\u0332\13/\3/\5/\u0335\n/\3\60")
        buf.write("\3\60\7\60\u0339\n\60\f\60\16\60\u033c\13\60\3\60\3\60")
        buf.write("\3\60\7\60\u0341\n\60\f\60\16\60\u0344\13\60\3\60\3\60")
        buf.write("\3\60\5\60\u0349\n\60\3\61\3\61\7\61\u034d\n\61\f\61\16")
        buf.write("\61\u0350\13\61\3\61\3\61\5\61\u0354\n\61\3\61\7\61\u0357")
        buf.write("\n\61\f\61\16\61\u035a\13\61\3\61\3\61\5\61\u035e\n\61")
        buf.write("\3\61\3\61\3\61\7\61\u0363\n\61\f\61\16\61\u0366\13\61")
        buf.write("\3\61\3\61\3\61\7\61\u036b\n\61\f\61\16\61\u036e\13\61")
        buf.write("\3\61\3\61\5\61\u0372\n\61\3\61\3\61\5\61\u0376\n\61\3")
        buf.write("\62\3\62\3\62\5\62\u037b\n\62\3\62\5\62\u037e\n\62\3\62")
        buf.write("\3\62\3\63\3\63\3\63\5\63\u0385\n\63\3\63\5\63\u0388\n")
        buf.write("\63\3\63\3\63\3\64\3\64\6\64\u038e\n\64\r\64\16\64\u038f")
        buf.write("\3\64\3\64\3\64\3\64\7\64\u0396\n\64\f\64\16\64\u0399")
        buf.write("\13\64\3\64\3\64\5\64\u039d\n\64\3\65\3\65\6\65\u03a1")
        buf.write("\n\65\r\65\16\65\u03a2\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\7\65\u03ac\n\65\f\65\16\65\u03af\13\65\3\65\3\65\5")
        buf.write("\65\u03b3\n\65\3\66\3\66\3\66\3\66\5\66\u03b9\n\66\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u03c4\n")
        buf.write("\67\38\38\38\38\38\38\58\u03cc\n8\39\39\39\59\u03d1\n")
        buf.write("9\39\79\u03d4\n9\f9\169\u03d7\139\39\39\39\39\39\59\u03de")
        buf.write("\n9\39\79\u03e1\n9\f9\169\u03e4\139\39\39\59\u03e8\n9")
        buf.write("\3:\3:\5:\u03ec\n:\3:\3:\7:\u03f0\n:\f:\16:\u03f3\13:")
        buf.write("\3:\5:\u03f6\n:\3:\3:\3;\3;\3;\3;\3<\3<\3<\5<\u0401\n")
        buf.write("<\3=\3=\5=\u0405\n=\3=\3=\7=\u0409\n=\f=\16=\u040c\13")
        buf.write("=\3=\5=\u040f\n=\3=\3=\3>\3>\3>\5>\u0416\n>\3?\3?\5?\u041a")
        buf.write("\n?\3?\5?\u041d\n?\3@\3@\3@\3A\3A\3B\3B\3C\3C\3C\3C\5")
        buf.write("C\u042a\nC\3D\3D\3E\3E\3E\5E\u0431\nE\3F\3F\5F\u0435\n")
        buf.write("F\3F\3F\5F\u0439\nF\3G\3G\3H\3H\3I\3I\3J\3J\3K\3K\3L\3")
        buf.write("L\3L\5L\u0448\nL\3M\3M\3N\3N\3O\3O\3O\2\4\32&P\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\2\31\3\2\17\20\4\2\66\66VV\4\2\23\23")
        buf.write("\27\27\4\2\25\26\30\30\4\2\23\23\25\30\4\2\17\17\35\35")
        buf.write("\3\2\33\34\3\2;<\4\2##&&\4\2AAFF\3\2AB\3\2QT\3\2?@\6\2")
        buf.write("?@ff~\177\u008a\u008a\6\2ffii||~~\5\2GH__cc\5\2hhz{\177")
        buf.write("\177\4\2uw}}\4\2`ade\3\2z{\4\2\20\20\u0089\u0089\7\2\17")
        buf.write("\17kmooqqtt\7\2__ccffppxx\2\u04d6\2\u00a1\3\2\2\2\4\u00da")
        buf.write("\3\2\2\2\6\u00de\3\2\2\2\b\u00e0\3\2\2\2\n\u00fc\3\2\2")
        buf.write("\2\f\u0107\3\2\2\2\16\u0109\3\2\2\2\20\u010d\3\2\2\2\22")
        buf.write("\u0111\3\2\2\2\24\u012e\3\2\2\2\26\u0140\3\2\2\2\30\u0142")
        buf.write("\3\2\2\2\32\u0159\3\2\2\2\34\u019c\3\2\2\2\36\u019e\3")
        buf.write("\2\2\2 \u01b2\3\2\2\2\"\u01b4\3\2\2\2$\u01c4\3\2\2\2&")
        buf.write("\u01e8\3\2\2\2(\u01f5\3\2\2\2*\u0218\3\2\2\2,\u022a\3")
        buf.write("\2\2\2.\u023f\3\2\2\2\60\u0258\3\2\2\2\62\u025a\3\2\2")
        buf.write("\2\64\u0270\3\2\2\2\66\u0276\3\2\2\28\u027e\3\2\2\2:\u0286")
        buf.write("\3\2\2\2<\u0288\3\2\2\2>\u02a0\3\2\2\2@\u02a5\3\2\2\2")
        buf.write("B\u02ab\3\2\2\2D\u02ad\3\2\2\2F\u02b1\3\2\2\2H\u02c8\3")
        buf.write("\2\2\2J\u02da\3\2\2\2L\u02dc\3\2\2\2N\u02e2\3\2\2\2P\u02e9")
        buf.write("\3\2\2\2R\u0303\3\2\2\2T\u030d\3\2\2\2V\u030f\3\2\2\2")
        buf.write("X\u031e\3\2\2\2Z\u0320\3\2\2\2\\\u0334\3\2\2\2^\u0348")
        buf.write("\3\2\2\2`\u0375\3\2\2\2b\u0377\3\2\2\2d\u0381\3\2\2\2")
        buf.write("f\u039c\3\2\2\2h\u03b2\3\2\2\2j\u03b8\3\2\2\2l\u03c3\3")
        buf.write("\2\2\2n\u03cb\3\2\2\2p\u03e7\3\2\2\2r\u03e9\3\2\2\2t\u03f9")
        buf.write("\3\2\2\2v\u0400\3\2\2\2x\u0402\3\2\2\2z\u0415\3\2\2\2")
        buf.write("|\u0419\3\2\2\2~\u041e\3\2\2\2\u0080\u0421\3\2\2\2\u0082")
        buf.write("\u0423\3\2\2\2\u0084\u0429\3\2\2\2\u0086\u042b\3\2\2\2")
        buf.write("\u0088\u0430\3\2\2\2\u008a\u0438\3\2\2\2\u008c\u043a\3")
        buf.write("\2\2\2\u008e\u043c\3\2\2\2\u0090\u043e\3\2\2\2\u0092\u0440")
        buf.write("\3\2\2\2\u0094\u0442\3\2\2\2\u0096\u0447\3\2\2\2\u0098")
        buf.write("\u0449\3\2\2\2\u009a\u044b\3\2\2\2\u009c\u044d\3\2\2\2")
        buf.write("\u009e\u00a0\5\4\3\2\u009f\u009e\3\2\2\2\u00a0\u00a3\3")
        buf.write("\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a4")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a4\u00a5\7\2\2\3\u00a5")
        buf.write("\3\3\2\2\2\u00a6\u00db\5\6\4\2\u00a7\u00a9\5\n\6\2\u00a8")
        buf.write("\u00aa\5\b\5\2\u00a9\u00a8\3\2\2\2\u00a9\u00aa\3\2\2\2")
        buf.write("\u00aa\u00db\3\2\2\2\u00ab\u00ad\5$\23\2\u00ac\u00ae\5")
        buf.write("\b\5\2\u00ad\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00db")
        buf.write("\3\2\2\2\u00af\u00b1\5*\26\2\u00b0\u00b2\5\b\5\2\u00b1")
        buf.write("\u00b0\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00db\3\2\2\2")
        buf.write("\u00b3\u00b7\5F$\2\u00b4\u00b7\58\35\2\u00b5\u00b7\5L")
        buf.write("\'\2\u00b6\u00b3\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b5")
        buf.write("\3\2\2\2\u00b7\u00b9\3\2\2\2\u00b8\u00ba\5\b\5\2\u00b9")
        buf.write("\u00b8\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00db\3\2\2\2")
        buf.write("\u00bb\u00be\5X-\2\u00bc\u00be\5Z.\2\u00bd\u00bb\3\2\2")
        buf.write("\2\u00bd\u00bc\3\2\2\2\u00be\u00c0\3\2\2\2\u00bf\u00c1")
        buf.write("\5\b\5\2\u00c0\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00db\3\2\2\2\u00c2\u00c4\5R*\2\u00c3\u00c5\5\b\5\2\u00c4")
        buf.write("\u00c3\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00db\3\2\2\2")
        buf.write("\u00c6\u00c8\5b\62\2\u00c7\u00c9\5\b\5\2\u00c8\u00c7\3")
        buf.write("\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00db\3\2\2\2\u00ca\u00cc")
        buf.write("\5d\63\2\u00cb\u00cd\5\b\5\2\u00cc\u00cb\3\2\2\2\u00cc")
        buf.write("\u00cd\3\2\2\2\u00cd\u00db\3\2\2\2\u00ce\u00d0\5\32\16")
        buf.write("\2\u00cf\u00d1\5\b\5\2\u00d0\u00cf\3\2\2\2\u00d0\u00d1")
        buf.write("\3\2\2\2\u00d1\u00db\3\2\2\2\u00d2\u00d4\5\\/\2\u00d3")
        buf.write("\u00d5\5\b\5\2\u00d4\u00d3\3\2\2\2\u00d4\u00d5\3\2\2\2")
        buf.write("\u00d5\u00db\3\2\2\2\u00d6\u00d8\5l\67\2\u00d7\u00d9\5")
        buf.write("\b\5\2\u00d8\u00d7\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00db")
        buf.write("\3\2\2\2\u00da\u00a6\3\2\2\2\u00da\u00a7\3\2\2\2\u00da")
        buf.write("\u00ab\3\2\2\2\u00da\u00af\3\2\2\2\u00da\u00b6\3\2\2\2")
        buf.write("\u00da\u00bd\3\2\2\2\u00da\u00c2\3\2\2\2\u00da\u00c6\3")
        buf.write("\2\2\2\u00da\u00ca\3\2\2\2\u00da\u00ce\3\2\2\2\u00da\u00d2")
        buf.write("\3\2\2\2\u00da\u00d6\3\2\2\2\u00db\5\3\2\2\2\u00dc\u00df")
        buf.write("\5\b\5\2\u00dd\u00df\7\n\2\2\u00de\u00dc\3\2\2\2\u00de")
        buf.write("\u00dd\3\2\2\2\u00df\7\3\2\2\2\u00e0\u00e1\7\13\2\2\u00e1")
        buf.write("\t\3\2\2\2\u00e2\u00e3\7\r\2\2\u00e3\u00e5\5\f\7\2\u00e4")
        buf.write("\u00e6\t\2\2\2\u00e5\u00e4\3\2\2\2\u00e5\u00e6\3\2\2\2")
        buf.write("\u00e6\u00fd\3\2\2\2\u00e7\u00e8\7\r\2\2\u00e8\u00e9\5")
        buf.write("\f\7\2\u00e9\u00ea\7\f\2\2\u00ea\u00eb\5\u0088E\2\u00eb")
        buf.write("\u00fd\3\2\2\2\u00ec\u00ed\7\r\2\2\u00ed\u00ef\5\f\7\2")
        buf.write("\u00ee\u00f0\7\66\2\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\5\u0088E\2\u00f2")
        buf.write("\u00fd\3\2\2\2\u00f3\u00f4\7\r\2\2\u00f4\u00f6\5\f\7\2")
        buf.write("\u00f5\u00f7\t\3\2\2\u00f6\u00f5\3\2\2\2\u00f6\u00f7\3")
        buf.write("\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\5\22\n\2\u00f9")
        buf.write("\u00fd\3\2\2\2\u00fa\u00fb\7\r\2\2\u00fb\u00fd\5r:\2\u00fc")
        buf.write("\u00e2\3\2\2\2\u00fc\u00e7\3\2\2\2\u00fc\u00ec\3\2\2\2")
        buf.write("\u00fc\u00f3\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\13\3\2")
        buf.write("\2\2\u00fe\u0108\5\u0084C\2\u00ff\u0108\5\u0088E\2\u0100")
        buf.write("\u0102\5\16\b\2\u0101\u0100\3\2\2\2\u0101\u0102\3\2\2")
        buf.write("\2\u0102\u0104\3\2\2\2\u0103\u0105\5\20\t\2\u0104\u0103")
        buf.write("\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0106\3\2\2\2\u0106")
        buf.write("\u0108\5\66\34\2\u0107\u00fe\3\2\2\2\u0107\u00ff\3\2\2")
        buf.write("\2\u0107\u0101\3\2\2\2\u0108\r\3\2\2\2\u0109\u010a\7=")
        buf.write("\2\2\u010a\u010b\5\u0088E\2\u010b\u010c\7q\2\2\u010c\17")
        buf.write("\3\2\2\2\u010d\u010e\7>\2\2\u010e\u010f\5\u0088E\2\u010f")
        buf.write("\u0110\7q\2\2\u0110\21\3\2\2\2\u0111\u0112\7\3\2\2\u0112")
        buf.write("\u0117\5\u0088E\2\u0113\u0114\7\31\2\2\u0114\u0116\5\u0088")
        buf.write("E\2\u0115\u0113\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u011a\u011b\7\4\2\2\u011b\23\3\2\2\2\u011c")
        buf.write("\u0120\7\3\2\2\u011d\u011f\5\4\3\2\u011e\u011d\3\2\2\2")
        buf.write("\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3")
        buf.write("\2\2\2\u0121\u0123\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u012f")
        buf.write("\7\4\2\2\u0124\u0125\7\22\2\2\u0125\u012f\5\32\16\2\u0126")
        buf.write("\u012a\7\22\2\2\u0127\u0129\5\4\3\2\u0128\u0127\3\2\2")
        buf.write("\2\u0129\u012c\3\2\2\2\u012a\u0128\3\2\2\2\u012a\u012b")
        buf.write("\3\2\2\2\u012b\u012d\3\2\2\2\u012c\u012a\3\2\2\2\u012d")
        buf.write("\u012f\7\21\2\2\u012e\u011c\3\2\2\2\u012e\u0124\3\2\2")
        buf.write("\2\u012e\u0126\3\2\2\2\u012f\25\3\2\2\2\u0130\u0134\7")
        buf.write("\3\2\2\u0131\u0133\5\4\3\2\u0132\u0131\3\2\2\2\u0133\u0136")
        buf.write("\3\2\2\2\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135")
        buf.write("\u0137\3\2\2\2\u0136\u0134\3\2\2\2\u0137\u0141\7\4\2\2")
        buf.write("\u0138\u013a\7\22\2\2\u0139\u0138\3\2\2\2\u0139\u013a")
        buf.write("\3\2\2\2\u013a\u013c\3\2\2\2\u013b\u013d\5\4\3\2\u013c")
        buf.write("\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u013c\3\2\2\2")
        buf.write("\u013e\u013f\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u0130\3")
        buf.write("\2\2\2\u0140\u0139\3\2\2\2\u0141\27\3\2\2\2\u0142\u0147")
        buf.write("\5\32\16\2\u0143\u0144\7\31\2\2\u0144\u0146\5\32\16\2")
        buf.write("\u0145\u0143\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3")
        buf.write("\2\2\2\u0147\u0148\3\2\2\2\u0148\31\3\2\2\2\u0149\u0147")
        buf.write("\3\2\2\2\u014a\u014b\b\16\1\2\u014b\u015a\5\36\20\2\u014c")
        buf.write("\u015a\5*\26\2\u014d\u014e\5\u0088E\2\u014e\u014f\5\u0084")
        buf.write("C\2\u014f\u015a\3\2\2\2\u0150\u0151\5\u008eH\2\u0151\u0152")
        buf.write("\5\32\16\17\u0152\u015a\3\2\2\2\u0153\u015a\5l\67\2\u0154")
        buf.write("\u0155\7\5\2\2\u0155\u0156\5\32\16\2\u0156\u0157\7\6\2")
        buf.write("\2\u0157\u015a\3\2\2\2\u0158\u015a\5\34\17\2\u0159\u014a")
        buf.write("\3\2\2\2\u0159\u014c\3\2\2\2\u0159\u014d\3\2\2\2\u0159")
        buf.write("\u0150\3\2\2\2\u0159\u0153\3\2\2\2\u0159\u0154\3\2\2\2")
        buf.write("\u0159\u0158\3\2\2\2\u015a\u0188\3\2\2\2\u015b\u015c\f")
        buf.write("\r\2\2\u015c\u015d\5\u0092J\2\u015d\u015e\5\32\16\16\u015e")
        buf.write("\u0187\3\2\2\2\u015f\u0160\f\f\2\2\u0160\u0161\5\u0094")
        buf.write("K\2\u0161\u0162\5\32\16\r\u0162\u0187\3\2\2\2\u0163\u0164")
        buf.write("\f\13\2\2\u0164\u0165\5\u0096L\2\u0165\u0166\5\32\16\f")
        buf.write("\u0166\u0187\3\2\2\2\u0167\u0168\f\n\2\2\u0168\u0169\5")
        buf.write("\u0098M\2\u0169\u016a\5\32\16\n\u016a\u0187\3\2\2\2\u016b")
        buf.write("\u016c\f\t\2\2\u016c\u016d\5\u009aN\2\u016d\u016e\5\32")
        buf.write("\16\n\u016e\u0187\3\2\2\2\u016f\u0170\f\b\2\2\u0170\u0171")
        buf.write("\5\u008cG\2\u0171\u0172\5\32\16\t\u0172\u0187\3\2\2\2")
        buf.write("\u0173\u0174\f\7\2\2\u0174\u0175\5\u009cO\2\u0175\u0176")
        buf.write("\5\32\16\b\u0176\u0187\3\2\2\2\u0177\u0178\f\25\2\2\u0178")
        buf.write("\u0179\7V\2\2\u0179\u0187\5\u0088E\2\u017a\u017b\f\24")
        buf.write("\2\2\u017b\u017c\7V\2\2\u017c\u0187\5\36\20\2\u017d\u017e")
        buf.write("\f\23\2\2\u017e\u0187\5p9\2\u017f\u0180\f\20\2\2\u0180")
        buf.write("\u0181\7\f\2\2\u0181\u0187\5&\24\2\u0182\u0183\f\16\2")
        buf.write("\2\u0183\u0187\5\u0090I\2\u0184\u0185\f\3\2\2\u0185\u0187")
        buf.write("\7\34\2\2\u0186\u015b\3\2\2\2\u0186\u015f\3\2\2\2\u0186")
        buf.write("\u0163\3\2\2\2\u0186\u0167\3\2\2\2\u0186\u016b\3\2\2\2")
        buf.write("\u0186\u016f\3\2\2\2\u0186\u0173\3\2\2\2\u0186\u0177\3")
        buf.write("\2\2\2\u0186\u017a\3\2\2\2\u0186\u017d\3\2\2\2\u0186\u017f")
        buf.write("\3\2\2\2\u0186\u0182\3\2\2\2\u0186\u0184\3\2\2\2\u0187")
        buf.write("\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\33\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u018e\t\4")
        buf.write("\2\2\u018c\u018d\7\5\2\2\u018d\u018f\7\6\2\2\u018e\u018c")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u019d\3\2\2\2\u0190")
        buf.write("\u0191\t\5\2\2\u0191\u019d\5\32\16\2\u0192\u0193\7\24")
        buf.write("\2\2\u0193\u019d\5\30\r\2\u0194\u0195\7\24\2\2\u0195\u0196")
        buf.write("\7\5\2\2\u0196\u0198\5\30\r\2\u0197\u0199\7\31\2\2\u0198")
        buf.write("\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\3\2\2\2")
        buf.write("\u019a\u019b\7\6\2\2\u019b\u019d\3\2\2\2\u019c\u018b\3")
        buf.write("\2\2\2\u019c\u0190\3\2\2\2\u019c\u0192\3\2\2\2\u019c\u0194")
        buf.write("\3\2\2\2\u019d\35\3\2\2\2\u019e\u019f\5\66\34\2\u019f")
        buf.write("\u01ab\7\5\2\2\u01a0\u01a5\5 \21\2\u01a1\u01a2\7\31\2")
        buf.write("\2\u01a2\u01a4\5 \21\2\u01a3\u01a1\3\2\2\2\u01a4\u01a7")
        buf.write("\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6")
        buf.write("\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01aa\7\31\2")
        buf.write("\2\u01a9\u01a8\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ac")
        buf.write("\3\2\2\2\u01ab\u01a0\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write("\u01ad\3\2\2\2\u01ad\u01ae\7\6\2\2\u01ae\37\3\2\2\2\u01af")
        buf.write("\u01b3\5\32\16\2\u01b0\u01b3\5\36\20\2\u01b1\u01b3\5l")
        buf.write("\67\2\u01b2\u01af\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b1")
        buf.write("\3\2\2\2\u01b3!\3\2\2\2\u01b4\u01b5\t\6\2\2\u01b5#\3\2")
        buf.write("\2\2\u01b6\u01b7\7\32\2\2\u01b7\u01b8\5\u0088E\2\u01b8")
        buf.write("\u01b9\7\22\2\2\u01b9\u01bb\5&\24\2\u01ba\u01bc\7\21\2")
        buf.write("\2\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01c5")
        buf.write("\3\2\2\2\u01bd\u01be\7\32\2\2\u01be\u01bf\5\u0088E\2\u01bf")
        buf.write("\u01c0\7\3\2\2\u01c0\u01c2\5&\24\2\u01c1\u01c3\7\4\2\2")
        buf.write("\u01c2\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3")
        buf.write("\2\2\2\u01c4\u01b6\3\2\2\2\u01c4\u01bd\3\2\2\2\u01c5%")
        buf.write("\3\2\2\2\u01c6\u01c7\b\24\1\2\u01c7\u01c8\5\u0088E\2\u01c8")
        buf.write("\u01d1\7\5\2\2\u01c9\u01ce\5&\24\2\u01ca\u01cb\7\31\2")
        buf.write("\2\u01cb\u01cd\5&\24\2\u01cc\u01ca\3\2\2\2\u01cd\u01d0")
        buf.write("\3\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf")
        buf.write("\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01c9\3\2\2\2")
        buf.write("\u01d1\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\7")
        buf.write("\6\2\2\u01d4\u01e9\3\2\2\2\u01d5\u01d6\5\u0088E\2\u01d6")
        buf.write("\u01df\7a\2\2\u01d7\u01dc\5&\24\2\u01d8\u01d9\7\31\2\2")
        buf.write("\u01d9\u01db\5&\24\2\u01da\u01d8\3\2\2\2\u01db\u01de\3")
        buf.write("\2\2\2\u01dc\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e0")
        buf.write("\3\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01d7\3\2\2\2\u01df")
        buf.write("\u01e0\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e2\7e\2\2")
        buf.write("\u01e2\u01e9\3\2\2\2\u01e3\u01e5\5\u0088E\2\u01e4\u01e6")
        buf.write("\t\7\2\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e9\3\2\2\2\u01e7\u01e9\5\u0082B\2\u01e8\u01c6\3\2")
        buf.write("\2\2\u01e8\u01d5\3\2\2\2\u01e8\u01e3\3\2\2\2\u01e8\u01e7")
        buf.write("\3\2\2\2\u01e9\u01f2\3\2\2\2\u01ea\u01eb\f\6\2\2\u01eb")
        buf.write("\u01ec\t\b\2\2\u01ec\u01f1\5&\24\7\u01ed\u01ee\f\5\2\2")
        buf.write("\u01ee\u01ef\7\7\2\2\u01ef\u01f1\7\b\2\2\u01f0\u01ea\3")
        buf.write("\2\2\2\u01f0\u01ed\3\2\2\2\u01f1\u01f4\3\2\2\2\u01f2\u01f0")
        buf.write("\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\'\3\2\2\2\u01f4\u01f2")
        buf.write("\3\2\2\2\u01f5\u01f6\t\t\2\2\u01f6\u01f7\5&\24\2\u01f7")
        buf.write(")\3\2\2\2\u01f8\u01f9\7 \2\2\u01f9\u01fa\5,\27\2\u01fa")
        buf.write("\u01fb\5\24\13\2\u01fb\u0219\3\2\2\2\u01fc\u01fd\7!\2")
        buf.write("\2\u01fd\u01fe\5,\27\2\u01fe\u01ff\5\24\13\2\u01ff\u0219")
        buf.write("\3\2\2\2\u0200\u0201\7\"\2\2\u0201\u0202\5,\27\2\u0202")
        buf.write("\u0203\5\24\13\2\u0203\u0219\3\2\2\2\u0204\u0205\7\"\2")
        buf.write("\2\u0205\u0206\5\62\32\2\u0206\u0207\5\24\13\2\u0207\u0219")
        buf.write("\3\2\2\2\u0208\u0209\5\62\32\2\u0209\u020a\t\n\2\2\u020a")
        buf.write("\u020b\5.\30\2\u020b\u0219\3\2\2\2\u020c\u020d\5,\27\2")
        buf.write("\u020d\u020e\7#\2\2\u020e\u020f\5.\30\2\u020f\u0219\3")
        buf.write("\2\2\2\u0210\u0211\5,\27\2\u0211\u0212\7$\2\2\u0212\u0213")
        buf.write("\5.\30\2\u0213\u0219\3\2\2\2\u0214\u0215\5,\27\2\u0215")
        buf.write("\u0216\7&\2\2\u0216\u0217\5.\30\2\u0217\u0219\3\2\2\2")
        buf.write("\u0218\u01f8\3\2\2\2\u0218\u01fc\3\2\2\2\u0218\u0200\3")
        buf.write("\2\2\2\u0218\u0204\3\2\2\2\u0218\u0208\3\2\2\2\u0218\u020c")
        buf.write("\3\2\2\2\u0218\u0210\3\2\2\2\u0218\u0214\3\2\2\2\u0219")
        buf.write("+\3\2\2\2\u021a\u021c\5\u0088E\2\u021b\u021d\5(\25\2\u021c")
        buf.write("\u021b\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u022b\3\2\2\2")
        buf.write("\u021e\u0223\5\64\33\2\u021f\u0220\7\31\2\2\u0220\u0222")
        buf.write("\5\64\33\2\u0221\u021f\3\2\2\2\u0222\u0225\3\2\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u022b\3\2\2\2")
        buf.write("\u0225\u0223\3\2\2\2\u0226\u022b\5\66\34\2\u0227\u0228")
        buf.write("\5\66\34\2\u0228\u0229\5p9\2\u0229\u022b\3\2\2\2\u022a")
        buf.write("\u021a\3\2\2\2\u022a\u021e\3\2\2\2\u022a\u0226\3\2\2\2")
        buf.write("\u022a\u0227\3\2\2\2\u022b-\3\2\2\2\u022c\u0240\5\32\16")
        buf.write("\2\u022d\u0240\5\30\r\2\u022e\u0240\5\4\3\2\u022f\u0233")
        buf.write("\7\3\2\2\u0230\u0232\5\4\3\2\u0231\u0230\3\2\2\2\u0232")
        buf.write("\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2")
        buf.write("\u0234\u0236\3\2\2\2\u0235\u0233\3\2\2\2\u0236\u0240\7")
        buf.write("\4\2\2\u0237\u023b\7\22\2\2\u0238\u023a\5\4\3\2\u0239")
        buf.write("\u0238\3\2\2\2\u023a\u023d\3\2\2\2\u023b\u0239\3\2\2\2")
        buf.write("\u023b\u023c\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u023b\3")
        buf.write("\2\2\2\u023e\u0240\7\21\2\2\u023f\u022c\3\2\2\2\u023f")
        buf.write("\u022d\3\2\2\2\u023f\u022e\3\2\2\2\u023f\u022f\3\2\2\2")
        buf.write("\u023f\u0237\3\2\2\2\u0240/\3\2\2\2\u0241\u0243\5&\24")
        buf.write("\2\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244")
        buf.write("\3\2\2\2\u0244\u0259\5\u0088E\2\u0245\u0247\5&\24\2\u0246")
        buf.write("\u0245\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0248\3\2\2\2")
        buf.write("\u0248\u0249\5\u0088E\2\u0249\u024a\7\17\2\2\u024a\u0259")
        buf.write("\3\2\2\2\u024b\u024d\5&\24\2\u024c\u024b\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f\5\u0088")
        buf.write("E\2\u024f\u0250\7\36\2\2\u0250\u0259\3\2\2\2\u0251\u0253")
        buf.write("\5&\24\2\u0252\u0251\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("\u0254\3\2\2\2\u0254\u0255\5\u0088E\2\u0255\u0256\7\35")
        buf.write("\2\2\u0256\u0257\5\u0088E\2\u0257\u0259\3\2\2\2\u0258")
        buf.write("\u0242\3\2\2\2\u0258\u0246\3\2\2\2\u0258\u024c\3\2\2\2")
        buf.write("\u0258\u0252\3\2\2\2\u0259\61\3\2\2\2\u025a\u025b\5\u0088")
        buf.write("E\2\u025b\u025c\7\5\2\2\u025c\u0261\5\60\31\2\u025d\u025e")
        buf.write("\7\31\2\2\u025e\u0260\5\60\31\2\u025f\u025d\3\2\2\2\u0260")
        buf.write("\u0263\3\2\2\2\u0261\u025f\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0264\u0266\7")
        buf.write("\31\2\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266")
        buf.write("\u0267\3\2\2\2\u0267\u0269\7\6\2\2\u0268\u026a\5(\25\2")
        buf.write("\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a\63\3\2")
        buf.write("\2\2\u026b\u026d\5\66\34\2\u026c\u026e\5(\25\2\u026d\u026c")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0271\3\2\2\2\u026f")
        buf.write("\u0271\7=\2\2\u0270\u026b\3\2\2\2\u0270\u026f\3\2\2\2")
        buf.write("\u0271\65\3\2\2\2\u0272\u0277\7N\2\2\u0273\u0274\7O\2")
        buf.write("\2\u0274\u0275\7V\2\2\u0275\u0277\5\u0088E\2\u0276\u0272")
        buf.write("\3\2\2\2\u0276\u0273\3\2\2\2\u0277\67\3\2\2\2\u0278\u0279")
        buf.write("\7\'\2\2\u0279\u027f\5:\36\2\u027a\u027b\7\'\2\2\u027b")
        buf.write("\u027f\5<\37\2\u027c\u027d\7\'\2\2\u027d\u027f\5> \2\u027e")
        buf.write("\u0278\3\2\2\2\u027e\u027a\3\2\2\2\u027e\u027c\3\2\2\2")
        buf.write("\u027f9\3\2\2\2\u0280\u0281\5P)\2\u0281\u0282\5\32\16")
        buf.write("\2\u0282\u0287\3\2\2\2\u0283\u0284\5P)\2\u0284\u0285\5")
        buf.write("\24\13\2\u0285\u0287\3\2\2\2\u0286\u0280\3\2\2\2\u0286")
        buf.write("\u0283\3\2\2\2\u0287;\3\2\2\2\u0288\u0289\5P)\2\u0289")
        buf.write("\u028a\5\26\f\2\u028a\u028b\5B\"\2\u028b=\3\2\2\2\u028c")
        buf.write("\u028d\5P)\2\u028d\u028f\5\26\f\2\u028e\u0290\5D#\2\u028f")
        buf.write("\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u028f\3\2\2\2")
        buf.write("\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\5")
        buf.write("B\"\2\u0294\u02a1\3\2\2\2\u0295\u0296\5P)\2\u0296\u029a")
        buf.write("\5\26\f\2\u0297\u0299\5D#\2\u0298\u0297\3\2\2\2\u0299")
        buf.write("\u029c\3\2\2\2\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2")
        buf.write("\u029b\u029d\3\2\2\2\u029c\u029a\3\2\2\2\u029d\u029e\5")
        buf.write("@!\2\u029e\u029f\5:\36\2\u029f\u02a1\3\2\2\2\u02a0\u028c")
        buf.write("\3\2\2\2\u02a0\u0295\3\2\2\2\u02a1?\3\2\2\2\u02a2\u02a6")
        buf.write("\7)\2\2\u02a3\u02a4\7(\2\2\u02a4\u02a6\7\'\2\2\u02a5\u02a2")
        buf.write("\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6A\3\2\2\2\u02a7\u02a8")
        buf.write("\7(\2\2\u02a8\u02ac\5\32\16\2\u02a9\u02aa\7(\2\2\u02aa")
        buf.write("\u02ac\5\24\13\2\u02ab\u02a7\3\2\2\2\u02ab\u02a9\3\2\2")
        buf.write("\2\u02acC\3\2\2\2\u02ad\u02ae\5@!\2\u02ae\u02af\5P)\2")
        buf.write("\u02af\u02b0\5\26\f\2\u02b0E\3\2\2\2\u02b1\u02b2\7*\2")
        buf.write("\2\u02b2\u02b3\5P)\2\u02b3\u02b4\5J&\2\u02b4G\3\2\2\2")
        buf.write("\u02b5\u02b6\7+\2\2\u02b6\u02b7\5\32\16\2\u02b7\u02b8")
        buf.write("\7\22\2\2\u02b8\u02b9\5\26\f\2\u02b9\u02c9\3\2\2\2\u02ba")
        buf.write("\u02bb\5\32\16\2\u02bb\u02bc\7.\2\2\u02bc\u02bd\5\26\f")
        buf.write("\2\u02bd\u02c9\3\2\2\2\u02be\u02bf\7,\2\2\u02bf\u02c0")
        buf.write("\7\22\2\2\u02c0\u02c9\5\26\f\2\u02c1\u02c2\7+\2\2\u02c2")
        buf.write("\u02c3\7\17\2\2\u02c3\u02c4\7\22\2\2\u02c4\u02c9\5\26")
        buf.write("\f\2\u02c5\u02c6\7\17\2\2\u02c6\u02c7\7.\2\2\u02c7\u02c9")
        buf.write("\5\26\f\2\u02c8\u02b5\3\2\2\2\u02c8\u02ba\3\2\2\2\u02c8")
        buf.write("\u02be\3\2\2\2\u02c8\u02c1\3\2\2\2\u02c8\u02c5\3\2\2\2")
        buf.write("\u02c9I\3\2\2\2\u02ca\u02ce\7\3\2\2\u02cb\u02cd\5H%\2")
        buf.write("\u02cc\u02cb\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3")
        buf.write("\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02ce")
        buf.write("\3\2\2\2\u02d1\u02db\7\4\2\2\u02d2\u02d6\7\22\2\2\u02d3")
        buf.write("\u02d5\5H%\2\u02d4\u02d3\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6")
        buf.write("\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d9\3\2\2\2")
        buf.write("\u02d8\u02d6\3\2\2\2\u02d9\u02db\7\21\2\2\u02da\u02ca")
        buf.write("\3\2\2\2\u02da\u02d2\3\2\2\2\u02dbK\3\2\2\2\u02dc\u02dd")
        buf.write("\7-\2\2\u02dd\u02de\5P)\2\u02de\u02df\5N(\2\u02dfM\3\2")
        buf.write("\2\2\u02e0\u02e3\5\32\16\2\u02e1\u02e3\5\24\13\2\u02e2")
        buf.write("\u02e0\3\2\2\2\u02e2\u02e1\3\2\2\2\u02e3O\3\2\2\2\u02e4")
        buf.write("\u02ea\5\32\16\2\u02e5\u02e6\7\5\2\2\u02e6\u02e7\5\32")
        buf.write("\16\2\u02e7\u02e8\7\6\2\2\u02e8\u02ea\3\2\2\2\u02e9\u02e4")
        buf.write("\3\2\2\2\u02e9\u02e5\3\2\2\2\u02eaQ\3\2\2\2\u02eb\u02ec")
        buf.write("\7/\2\2\u02ec\u02ef\5\26\f\2\u02ed\u02ee\7\60\2\2\u02ee")
        buf.write("\u02f0\5T+\2\u02ef\u02ed\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1")
        buf.write("\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2")
        buf.write("\u02f3\u02f4\5V,\2\u02f4\u0304\3\2\2\2\u02f5\u02f6\7/")
        buf.write("\2\2\u02f6\u02f7\5\26\f\2\u02f7\u02f8\7\60\2\2\u02f8\u02f9")
        buf.write("\5\u0088E\2\u02f9\u02fa\5\26\f\2\u02fa\u0304\3\2\2\2\u02fb")
        buf.write("\u02fc\7/\2\2\u02fc\u02fd\5\26\f\2\u02fd\u02fe\7\60\2")
        buf.write("\2\u02fe\u02ff\7\5\2\2\u02ff\u0300\5\u0088E\2\u0300\u0301")
        buf.write("\7\6\2\2\u0301\u0302\5\26\f\2\u0302\u0304\3\2\2\2\u0303")
        buf.write("\u02eb\3\2\2\2\u0303\u02f5\3\2\2\2\u0303\u02fb\3\2\2\2")
        buf.write("\u0304S\3\2\2\2\u0305\u0306\5\u0088E\2\u0306\u0307\5\26")
        buf.write("\f\2\u0307\u030e\3\2\2\2\u0308\u0309\7\5\2\2\u0309\u030a")
        buf.write("\5\u0088E\2\u030a\u030b\7\6\2\2\u030b\u030c\5\26\f\2\u030c")
        buf.write("\u030e\3\2\2\2\u030d\u0305\3\2\2\2\u030d\u0308\3\2\2\2")
        buf.write("\u030eU\3\2\2\2\u030f\u0310\7\61\2\2\u0310\u0311\5\24")
        buf.write("\13\2\u0311W\3\2\2\2\u0312\u0313\7\63\2\2\u0313\u0314")
        buf.write("\7\5\2\2\u0314\u0315\5\30\r\2\u0315\u0316\7\6\2\2\u0316")
        buf.write("\u0317\5\24\13\2\u0317\u031f\3\2\2\2\u0318\u0319\7\63")
        buf.write("\2\2\u0319\u031a\5\u0088E\2\u031a\u031b\7\62\2\2\u031b")
        buf.write("\u031c\5\32\16\2\u031c\u031d\5\24\13\2\u031d\u031f\3\2")
        buf.write("\2\2\u031e\u0312\3\2\2\2\u031e\u0318\3\2\2\2\u031fY\3")
        buf.write("\2\2\2\u0320\u0321\7\64\2\2\u0321\u0322\5P)\2\u0322\u0323")
        buf.write("\5\24\13\2\u0323[\3\2\2\2\u0324\u0328\7\67\2\2\u0325\u0327")
        buf.write("\5\u0088E\2\u0326\u0325\3\2\2\2\u0327\u032a\3\2\2\2\u0328")
        buf.write("\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b\3\2\2\2")
        buf.write("\u032a\u0328\3\2\2\2\u032b\u0335\5\4\3\2\u032c\u0330\7")
        buf.write("\67\2\2\u032d\u032f\5\u0088E\2\u032e\u032d\3\2\2\2\u032f")
        buf.write("\u0332\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2")
        buf.write("\u0331\u0333\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0335\5")
        buf.write("\24\13\2\u0334\u0324\3\2\2\2\u0334\u032c\3\2\2\2\u0335")
        buf.write("]\3\2\2\2\u0336\u033a\7\3\2\2\u0337\u0339\5`\61\2\u0338")
        buf.write("\u0337\3\2\2\2\u0339\u033c\3\2\2\2\u033a\u0338\3\2\2\2")
        buf.write("\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u033a\3")
        buf.write("\2\2\2\u033d\u0349\7\4\2\2\u033e\u0342\7\22\2\2\u033f")
        buf.write("\u0341\5`\61\2\u0340\u033f\3\2\2\2\u0341\u0344\3\2\2\2")
        buf.write("\u0342\u0340\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3")
        buf.write("\2\2\2\u0344\u0342\3\2\2\2\u0345\u0349\7\21\2\2\u0346")
        buf.write("\u0347\7\22\2\2\u0347\u0349\5`\61\2\u0348\u0336\3\2\2")
        buf.write("\2\u0348\u033e\3\2\2\2\u0348\u0346\3\2\2\2\u0349_\3\2")
        buf.write("\2\2\u034a\u0376\5\6\4\2\u034b\u034d\5j\66\2\u034c\u034b")
        buf.write("\3\2\2\2\u034d\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0351\3\2\2\2\u0350\u034e\3\2\2\2")
        buf.write("\u0351\u0353\5\u0088E\2\u0352\u0354\5(\25\2\u0353\u0352")
        buf.write("\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0376\3\2\2\2\u0355")
        buf.write("\u0357\5j\66\2\u0356\u0355\3\2\2\2\u0357\u035a\3\2\2\2")
        buf.write("\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3")
        buf.write("\2\2\2\u035a\u0358\3\2\2\2\u035b\u035d\5\u0088E\2\u035c")
        buf.write("\u035e\5(\25\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u035f\3\2\2\2\u035f\u0360\5\24\13\2\u0360\u0376")
        buf.write("\3\2\2\2\u0361\u0363\5j\66\2\u0362\u0361\3\2\2\2\u0363")
        buf.write("\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2")
        buf.write("\u0365\u0367\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u0368\5")
        buf.write("\u0088E\2\u0368\u036c\7\5\2\2\u0369\u036b\5\60\31\2\u036a")
        buf.write("\u0369\3\2\2\2\u036b\u036e\3\2\2\2\u036c\u036a\3\2\2\2")
        buf.write("\u036c\u036d\3\2\2\2\u036d\u036f\3\2\2\2\u036e\u036c\3")
        buf.write("\2\2\2\u036f\u0371\7\6\2\2\u0370\u0372\5(\25\2\u0371\u0370")
        buf.write("\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0374\5\24\13\2\u0374\u0376\3\2\2\2\u0375\u034a\3\2\2")
        buf.write("\2\u0375\u034e\3\2\2\2\u0375\u0358\3\2\2\2\u0375\u0364")
        buf.write("\3\2\2\2\u0376a\3\2\2\2\u0377\u0378\78\2\2\u0378\u037a")
        buf.write("\5\u0088E\2\u0379\u037b\5f\64\2\u037a\u0379\3\2\2\2\u037a")
        buf.write("\u037b\3\2\2\2\u037b\u037d\3\2\2\2\u037c\u037e\5h\65\2")
        buf.write("\u037d\u037c\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3")
        buf.write("\2\2\2\u037f\u0380\5^\60\2\u0380c\3\2\2\2\u0381\u0382")
        buf.write("\79\2\2\u0382\u0384\5\u0088E\2\u0383\u0385\5f\64\2\u0384")
        buf.write("\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387\3\2\2\2")
        buf.write("\u0386\u0388\5h\65\2\u0387\u0386\3\2\2\2\u0387\u0388\3")
        buf.write("\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\5^\60\2\u038ae")
        buf.write("\3\2\2\2\u038b\u038d\7:\2\2\u038c\u038e\5\u0088E\2\u038d")
        buf.write("\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u038d\3\2\2\2")
        buf.write("\u038f\u0390\3\2\2\2\u0390\u039d\3\2\2\2\u0391\u0392\7")
        buf.write("\5\2\2\u0392\u0397\5\u0088E\2\u0393\u0394\7\31\2\2\u0394")
        buf.write("\u0396\5\u0088E\2\u0395\u0393\3\2\2\2\u0396\u0399\3\2")
        buf.write("\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a")
        buf.write("\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u039b\7\6\2\2\u039b")
        buf.write("\u039d\3\2\2\2\u039c\u038b\3\2\2\2\u039c\u0391\3\2\2\2")
        buf.write("\u039dg\3\2\2\2\u039e\u03a0\7;\2\2\u039f\u03a1\5\u0088")
        buf.write("E\2\u03a0\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03b3\3\2\2\2\u03a4")
        buf.write("\u03a5\7<\2\2\u03a5\u03b3\5\u0088E\2\u03a6\u03a7\7<\2")
        buf.write("\2\u03a7\u03a8\7\5\2\2\u03a8\u03ad\5\u0088E\2\u03a9\u03aa")
        buf.write("\7\31\2\2\u03aa\u03ac\5\u0088E\2\u03ab\u03a9\3\2\2\2\u03ac")
        buf.write("\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03ae\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b1\7")
        buf.write("\6\2\2\u03b1\u03b3\3\2\2\2\u03b2\u039e\3\2\2\2\u03b2\u03a4")
        buf.write("\3\2\2\2\u03b2\u03a6\3\2\2\2\u03b3i\3\2\2\2\u03b4\u03b9")
        buf.write("\5\u0088E\2\u03b5\u03b9\7 \2\2\u03b6\u03b9\7!\2\2\u03b7")
        buf.write("\u03b9\7\"\2\2\u03b8\u03b4\3\2\2\2\u03b8\u03b5\3\2\2\2")
        buf.write("\u03b8\u03b6\3\2\2\2\u03b8\u03b7\3\2\2\2\u03b9k\3\2\2")
        buf.write("\2\u03ba\u03c4\5n8\2\u03bb\u03c4\5\u0084C\2\u03bc\u03c4")
        buf.write("\5\u0086D\2\u03bd\u03c4\5\u0088E\2\u03be\u03c4\5\66\34")
        buf.write("\2\u03bf\u03c4\5x=\2\u03c0\u03c4\5r:\2\u03c1\u03c4\5p")
        buf.write("9\2\u03c2\u03c4\5\u008aF\2\u03c3\u03ba\3\2\2\2\u03c3\u03bb")
        buf.write("\3\2\2\2\u03c3\u03bc\3\2\2\2\u03c3\u03bd\3\2\2\2\u03c3")
        buf.write("\u03be\3\2\2\2\u03c3\u03bf\3\2\2\2\u03c3\u03c0\3\2\2\2")
        buf.write("\u03c3\u03c1\3\2\2\2\u03c3\u03c2\3\2\2\2\u03c4m\3\2\2")
        buf.write("\2\u03c5\u03cc\5~@\2\u03c6\u03cc\5\u0080A\2\u03c7\u03cc")
        buf.write("\5\u0082B\2\u03c8\u03cc\7C\2\2\u03c9\u03cc\7D\2\2\u03ca")
        buf.write("\u03cc\7E\2\2\u03cb\u03c5\3\2\2\2\u03cb\u03c6\3\2\2\2")
        buf.write("\u03cb\u03c7\3\2\2\2\u03cb\u03c8\3\2\2\2\u03cb\u03c9\3")
        buf.write("\2\2\2\u03cb\u03ca\3\2\2\2\u03cco\3\2\2\2\u03cd\u03ce")
        buf.write("\7\7\2\2\u03ce\u03d5\5|?\2\u03cf\u03d1\7\31\2\2\u03d0")
        buf.write("\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2")
        buf.write("\u03d2\u03d4\5|?\2\u03d3\u03d0\3\2\2\2\u03d4\u03d7\3\2")
        buf.write("\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8")
        buf.write("\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8\u03d9\7\b\2\2\u03d9")
        buf.write("\u03e8\3\2\2\2\u03da\u03db\7\t\2\2\u03db\u03e2\5|?\2\u03dc")
        buf.write("\u03de\7\31\2\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2")
        buf.write("\2\u03de\u03df\3\2\2\2\u03df\u03e1\5|?\2\u03e0\u03dd\3")
        buf.write("\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3")
        buf.write("\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5")
        buf.write("\u03e6\7\t\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03cd\3\2\2\2")
        buf.write("\u03e7\u03da\3\2\2\2\u03e8q\3\2\2\2\u03e9\u03eb\7\3\2")
        buf.write("\2\u03ea\u03ec\5t;\2\u03eb\u03ea\3\2\2\2\u03eb\u03ec\3")
        buf.write("\2\2\2\u03ec\u03f1\3\2\2\2\u03ed\u03ee\7\31\2\2\u03ee")
        buf.write("\u03f0\5t;\2\u03ef\u03ed\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f5\3\2\2\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f4\u03f6\7\31\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7")
        buf.write("\u03f8\7\4\2\2\u03f8s\3\2\2\2\u03f9\u03fa\5v<\2\u03fa")
        buf.write("\u03fb\7\22\2\2\u03fb\u03fc\5z>\2\u03fcu\3\2\2\2\u03fd")
        buf.write("\u0401\5\u0082B\2\u03fe\u0401\5\u0088E\2\u03ff\u0401\5")
        buf.write("\u0084C\2\u0400\u03fd\3\2\2\2\u0400\u03fe\3\2\2\2\u0400")
        buf.write("\u03ff\3\2\2\2\u0401w\3\2\2\2\u0402\u0404\7\7\2\2\u0403")
        buf.write("\u0405\5z>\2\u0404\u0403\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write("\u040a\3\2\2\2\u0406\u0407\7\31\2\2\u0407\u0409\5z>\2")
        buf.write("\u0408\u0406\3\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3")
        buf.write("\2\2\2\u040a\u040b\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a")
        buf.write("\3\2\2\2\u040d\u040f\7\31\2\2\u040e\u040d\3\2\2\2\u040e")
        buf.write("\u040f\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\7\b\2\2")
        buf.write("\u0411y\3\2\2\2\u0412\u0416\5l\67\2\u0413\u0416\5\32\16")
        buf.write("\2\u0414\u0416\5\4\3\2\u0415\u0412\3\2\2\2\u0415\u0413")
        buf.write("\3\2\2\2\u0415\u0414\3\2\2\2\u0416{\3\2\2\2\u0417\u041a")
        buf.write("\5\u0088E\2\u0418\u041a\5\u0082B\2\u0419\u0417\3\2\2\2")
        buf.write("\u0419\u0418\3\2\2\2\u041a\u041c\3\2\2\2\u041b\u041d\7")
        buf.write("\22\2\2\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d")
        buf.write("}\3\2\2\2\u041e\u041f\t\13\2\2\u041f\u0420\5\u0088E\2")
        buf.write("\u0420\177\3\2\2\2\u0421\u0422\t\f\2\2\u0422\u0081\3\2")
        buf.write("\2\2\u0423\u0424\7F\2\2\u0424\u0083\3\2\2\2\u0425\u042a")
        buf.write("\7I\2\2\u0426\u042a\7J\2\2\u0427\u042a\7K\2\2\u0428\u042a")
        buf.write("\7L\2\2\u0429\u0425\3\2\2\2\u0429\u0426\3\2\2\2\u0429")
        buf.write("\u0427\3\2\2\2\u0429\u0428\3\2\2\2\u042a\u0085\3\2\2\2")
        buf.write("\u042b\u042c\t\r\2\2\u042c\u0087\3\2\2\2\u042d\u0431\5")
        buf.write("\"\22\2\u042e\u0431\7P\2\2\u042f\u0431\7O\2\2\u0430\u042d")
        buf.write("\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u042f\3\2\2\2\u0431")
        buf.write("\u0089\3\2\2\2\u0432\u0434\7U\2\2\u0433\u0435\7F\2\2\u0434")
        buf.write("\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0439\3\2\2\2")
        buf.write("\u0436\u0437\7U\2\2\u0437\u0439\5\u0088E\2\u0438\u0432")
        buf.write("\3\2\2\2\u0438\u0436\3\2\2\2\u0439\u008b\3\2\2\2\u043a")
        buf.write("\u043b\t\16\2\2\u043b\u008d\3\2\2\2\u043c\u043d\t\17\2")
        buf.write("\2\u043d\u008f\3\2\2\2\u043e\u043f\t\20\2\2\u043f\u0091")
        buf.write("\3\2\2\2\u0440\u0441\t\21\2\2\u0441\u0093\3\2\2\2\u0442")
        buf.write("\u0443\t\22\2\2\u0443\u0095\3\2\2\2\u0444\u0448\t\23\2")
        buf.write("\2\u0445\u0448\t\24\2\2\u0446\u0448\t\25\2\2\u0447\u0444")
        buf.write("\3\2\2\2\u0447\u0445\3\2\2\2\u0447\u0446\3\2\2\2\u0448")
        buf.write("\u0097\3\2\2\2\u0449\u044a\t\26\2\2\u044a\u0099\3\2\2")
        buf.write("\2\u044b\u044c\t\27\2\2\u044c\u009b\3\2\2\2\u044d\u044e")
        buf.write("\t\30\2\2\u044e\u009d\3\2\2\2\u0089\u00a1\u00a9\u00ad")
        buf.write("\u00b1\u00b6\u00b9\u00bd\u00c0\u00c4\u00c8\u00cc\u00d0")
        buf.write("\u00d4\u00d8\u00da\u00de\u00e5\u00ef\u00f6\u00fc\u0101")
        buf.write("\u0104\u0107\u0117\u0120\u012a\u012e\u0134\u0139\u013e")
        buf.write("\u0140\u0147\u0159\u0186\u0188\u018e\u0198\u019c\u01a5")
        buf.write("\u01a9\u01ab\u01b2\u01bb\u01c2\u01c4\u01ce\u01d1\u01dc")
        buf.write("\u01df\u01e5\u01e8\u01f0\u01f2\u0218\u021c\u0223\u022a")
        buf.write("\u0233\u023b\u023f\u0242\u0246\u024c\u0252\u0258\u0261")
        buf.write("\u0265\u0269\u026d\u0270\u0276\u027e\u0286\u0291\u029a")
        buf.write("\u02a0\u02a5\u02ab\u02c8\u02ce\u02d6\u02da\u02e2\u02e9")
        buf.write("\u02f1\u0303\u030d\u031e\u0328\u0330\u0334\u033a\u0342")
        buf.write("\u0348\u034e\u0353\u0358\u035d\u0364\u036c\u0371\u0375")
        buf.write("\u037a\u037d\u0384\u0387\u038f\u0397\u039c\u03a2\u03ad")
        buf.write("\u03b2\u03b8\u03c3\u03cb\u03d0\u03d5\u03dd\u03e2\u03e7")
        buf.write("\u03eb\u03f1\u03f5\u0400\u0404\u040a\u040e\u0415\u0419")
        buf.write("\u041c\u0429\u0430\u0434\u0438\u0447")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'using'", 
                     "'instance'", "'*'", "'^'", "'end'", "<INVALID>", "'pass'", 
                     "'return'", "'yield'", "'await'", "'break'", "'throw'", 
                     "<INVALID>", "'type'", "'|'", "'&'", "'?'", "'**'", 
                     "'^^'", "'val'", "'var'", "'def'", "'='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'if'", "'else'", "'elseif'", 
                     "'switch'", "'case'", "'default'", "'match'", "<INVALID>", 
                     "'try'", "'catch'", "'final'", "'in'", "'for'", "'while'", 
                     "'macro'", "'with'", "'let'", "'trait'", "'class'", 
                     "'extend'", "'act'", "'~'", "'$'", "'@'", "'+'", "'-'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'*^'", "'/^'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'true'", "'false'", "'null'", 
                     "'nothing'", "'#'", "'.'", "'_'", "'#!'", "'%%%'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'<='", "'<'", "<INVALID>", 
                     "<INVALID>", "'>='", "'>'", "'++'", "'+='", "'\u2295'", 
                     "'--'", "'-='", "'\u00D7'", "'\u2297'", "'\u2299'", 
                     "'//@'", "'//'", "'/@'", "'/'", "'\u00F7'", "'%%'", 
                     "'%'", "'==='", "'=!='", "'=='", "'~~'", "'~='", "<INVALID>", 
                     "<INVALID>", "'!!'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':?'", "'@@@'", "'@@'", "'@='", "'`'", "'\u00B4'", 
                     "'''", "'...'", "'\u22C5'", "'\u221A'", "'\u215F'", 
                     "'\u00B0'", "'\u1D40'", "'\u1D34'", "'\u00A7'", "'\u00B6'", 
                     "'\u00A4'", "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "Using", "Instance", 
                      "Times", "Power", "End", "Colon", "Pass", "Return", 
                      "Yield", "Await", "Break", "Throw", "Comma", "Type", 
                      "BitOr", "BitAnd", "Nullable", "Keyword", "BaseInput", 
                      "Val", "Var", "Def", "Set", "Flexible", "Name", "Delay", 
                      "If", "Else", "ElseIf", "Switch", "Case", "Default", 
                      "Match", "Rule", "Try", "Catch", "Final", "In", "For", 
                      "While", "Macro", "With", "Let", "Trait", "Class", 
                      "Extend", "Act", "Tilde", "Suffix", "Prefix", "Plus", 
                      "Minus", "Decimal", "DecimalBad", "Binary", "Octal", 
                      "Hexadecimal", "Integer", "Exponent", "Base", "StringEscapeBlock", 
                      "StringEscapeSingle", "StringLiteral", "StringEmpty", 
                      "Escape", "Symbols", "TrueName", "Symbol", "True", 
                      "False", "Null", "Nothing", "Sharp", "Dot", "Underline", 
                      "Shebang", "Comment", "LineComment", "PartComment", 
                      "NewLine", "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "PlusTo", "LogicXor", "Decrease", "MinusFrom", 
                      "Multiply", "Kronecker", "TensorProduct", "MapAll", 
                      "Remainder", "Map", "Divide", "Quotient", "Output", 
                      "Mod", "Equivalent", "NotEquivalent", "Equal", "Concat", 
                      "Destruct", "LogicOr", "LogicAnd", "DoubleBang", "NotEqual", 
                      "BitNot", "LogicNot", "Elvis", "Curry", "Apply", "LetAssign", 
                      "Quote", "Acute", "Quotation", "Ellipsis", "DOT", 
                      "Surd", "Reciprocal", "Degree", "Transpose", "Hermitian", 
                      "Section", "Pilcrow", "Currency", "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_idTuples = 8
    RULE_blockStatement = 9
    RULE_blockNonEnd = 10
    RULE_expressionStatement = 11
    RULE_expression = 12
    RULE_controlFlow = 13
    RULE_functionCall = 14
    RULE_arguments = 15
    RULE_flowController = 16
    RULE_typeStatement = 17
    RULE_typeExpression = 18
    RULE_typeSuffix = 19
    RULE_assignStatment = 20
    RULE_assignLHS = 21
    RULE_assignRHS = 22
    RULE_parameter = 23
    RULE_functionPattern = 24
    RULE_maybeSymbol = 25
    RULE_symbols = 26
    RULE_ifStatment = 27
    RULE_ifShort = 28
    RULE_ifSingle = 29
    RULE_ifNested = 30
    RULE_elif = 31
    RULE_else = 32
    RULE_elseIf = 33
    RULE_switchStatment = 34
    RULE_caseBody = 35
    RULE_switchBody = 36
    RULE_matchStatment = 37
    RULE_matchBody = 38
    RULE_condition = 39
    RULE_tryStatement = 40
    RULE_tryCatch = 41
    RULE_tryFinal = 42
    RULE_forStatement = 43
    RULE_whileStatment = 44
    RULE_letStatment = 45
    RULE_classBody = 46
    RULE_classExpression = 47
    RULE_traitStatement = 48
    RULE_classStatement = 49
    RULE_classExtend = 50
    RULE_classTrait = 51
    RULE_classController = 52
    RULE_data = 53
    RULE_number = 54
    RULE_index = 55
    RULE_dict = 56
    RULE_keyValue = 57
    RULE_keyValid = 58
    RULE_list = 59
    RULE_element = 60
    RULE_indexValid = 61
    RULE_complex = 62
    RULE_decimal = 63
    RULE_integer = 64
    RULE_string = 65
    RULE_special = 66
    RULE_symbol = 67
    RULE_solt = 68
    RULE_add_ops = 69
    RULE_pre_ops = 70
    RULE_pst_ops = 71
    RULE_bit_ops = 72
    RULE_lgk_ops = 73
    RULE_cpr_ops = 74
    RULE_pow_ops = 75
    RULE_mul_ops = 76
    RULE_list_ops = 77

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "idTuples", 
                   "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "controlFlow", "functionCall", "arguments", 
                   "flowController", "typeStatement", "typeExpression", 
                   "typeSuffix", "assignStatment", "assignLHS", "assignRHS", 
                   "parameter", "functionPattern", "maybeSymbol", "symbols", 
                   "ifStatment", "ifShort", "ifSingle", "ifNested", "elif", 
                   "else", "elseIf", "switchStatment", "caseBody", "switchBody", 
                   "matchStatment", "matchBody", "condition", "tryStatement", 
                   "tryCatch", "tryFinal", "forStatement", "whileStatment", 
                   "letStatment", "classBody", "classExpression", "traitStatement", 
                   "classStatement", "classExtend", "classTrait", "classController", 
                   "data", "number", "index", "dict", "keyValue", "keyValid", 
                   "list", "element", "indexValid", "complex", "decimal", 
                   "integer", "string", "special", "symbol", "solt", "add_ops", 
                   "pre_ops", "pst_ops", "bit_ops", "lgk_ops", "cpr_ops", 
                   "pow_ops", "mul_ops", "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    Using=11
    Instance=12
    Times=13
    Power=14
    End=15
    Colon=16
    Pass=17
    Return=18
    Yield=19
    Await=20
    Break=21
    Throw=22
    Comma=23
    Type=24
    BitOr=25
    BitAnd=26
    Nullable=27
    Keyword=28
    BaseInput=29
    Val=30
    Var=31
    Def=32
    Set=33
    Flexible=34
    Name=35
    Delay=36
    If=37
    Else=38
    ElseIf=39
    Switch=40
    Case=41
    Default=42
    Match=43
    Rule=44
    Try=45
    Catch=46
    Final=47
    In=48
    For=49
    While=50
    Macro=51
    With=52
    Let=53
    Trait=54
    Class=55
    Extend=56
    Act=57
    Tilde=58
    Suffix=59
    Prefix=60
    Plus=61
    Minus=62
    Decimal=63
    DecimalBad=64
    Binary=65
    Octal=66
    Hexadecimal=67
    Integer=68
    Exponent=69
    Base=70
    StringEscapeBlock=71
    StringEscapeSingle=72
    StringLiteral=73
    StringEmpty=74
    Escape=75
    Symbols=76
    TrueName=77
    Symbol=78
    True=79
    False=80
    Null=81
    Nothing=82
    Sharp=83
    Dot=84
    Underline=85
    Shebang=86
    Comment=87
    LineComment=88
    PartComment=89
    NewLine=90
    WhiteSpace=91
    Import=92
    LeftShift=93
    LessEqual=94
    Less=95
    Export=96
    RightShift=97
    GraterEqual=98
    Grater=99
    Increase=100
    PlusTo=101
    LogicXor=102
    Decrease=103
    MinusFrom=104
    Multiply=105
    Kronecker=106
    TensorProduct=107
    MapAll=108
    Remainder=109
    Map=110
    Divide=111
    Quotient=112
    Output=113
    Mod=114
    Equivalent=115
    NotEquivalent=116
    Equal=117
    Concat=118
    Destruct=119
    LogicOr=120
    LogicAnd=121
    DoubleBang=122
    NotEqual=123
    BitNot=124
    LogicNot=125
    Elvis=126
    Curry=127
    Apply=128
    LetAssign=129
    Quote=130
    Acute=131
    Quotation=132
    Ellipsis=133
    DOT=134
    Surd=135
    Reciprocal=136
    Degree=137
    Transpose=138
    Hermitian=139
    Section=140
    Pilcrow=141
    Currency=142
    Element=143

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 156
                self.statement()
                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 162
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def switchStatment(self):
            return self.getTypedRuleContext(NyarParser.SwitchStatmentContext,0)


        def ifStatment(self):
            return self.getTypedRuleContext(NyarParser.IfStatmentContext,0)


        def matchStatment(self):
            return self.getTypedRuleContext(NyarParser.MatchStatmentContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(NyarParser.ForStatementContext,0)


        def whileStatment(self):
            return self.getTypedRuleContext(NyarParser.WhileStatmentContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def letStatment(self):
            return self.getTypedRuleContext(NyarParser.LetStatmentContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.importStatement()
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 166
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 169
                self.typeStatement()
                self.state = 171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 170
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 173
                self.assignStatment()
                self.state = 175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 174
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 180
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Switch]:
                    self.state = 177
                    self.switchStatment()
                    pass
                elif token in [NyarParser.If]:
                    self.state = 178
                    self.ifStatment()
                    pass
                elif token in [NyarParser.Match]:
                    self.state = 179
                    self.matchStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 187
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.For]:
                    self.state = 185
                    self.forStatement()
                    pass
                elif token in [NyarParser.While]:
                    self.state = 186
                    self.whileStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 189
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 192
                self.tryStatement()
                self.state = 194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 193
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 196
                self.traitStatement()
                self.state = 198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 197
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 200
                self.classStatement()
                self.state = 202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 201
                    self.eos()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 204
                self.expression(0)
                self.state = 206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 205
                    self.eos()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 208
                self.letStatment()
                self.state = 210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 209
                    self.eos()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 212
                self.data()
                self.state = 214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 213
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 218
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 219
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.alias = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleModifyContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.m = None # Token
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)
        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleModify" ):
                listener.enterModuleModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleModify" ):
                listener.exitModuleModify(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleModify" ):
                return visitor.visitModuleModify(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.name = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.match(NyarParser.Using)
                self.state = 225
                localctx.module = self.moduleName()
                self.state = 227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 226
                    localctx.m = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Power):
                        localctx.m = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 229
                self.match(NyarParser.Using)
                self.state = 230
                localctx.module = self.moduleName()
                self.state = 231
                self.match(NyarParser.As)
                self.state = 232
                localctx.alias = self.symbol()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 234
                self.match(NyarParser.Using)
                self.state = 235
                localctx.source = self.moduleName()
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 236
                    self.match(NyarParser.With)


                self.state = 239
                localctx.name = self.symbol()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 241
                self.match(NyarParser.Using)
                self.state = 242
                localctx.source = self.moduleName()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With or _la==NyarParser.Dot:
                    self.state = 243
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.With or _la==NyarParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 246
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 248
                self.match(NyarParser.Using)
                self.state = 249
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        self._la = 0 # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Suffix:
                    self.state = 254
                    self.moduleLanguage()


                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Prefix:
                    self.state = 257
                    self.moduleScope()


                self.state = 260
                self.symbols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(NyarParser.Suffix)
            self.state = 264
            self.symbol()
            self.state = 265
            self.match(NyarParser.Divide)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(NyarParser.Prefix)
            self.state = 268
            self.symbol()
            self.state = 269
            self.match(NyarParser.Divide)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(NyarParser.T__0)
            self.state = 272
            self.symbol()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 273
                self.match(NyarParser.Comma)
                self.state = 274
                self.symbol()
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 280
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.match(NyarParser.T__0)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 283
                    self.statement()
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 289
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.match(NyarParser.Colon)
                self.state = 291
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.match(NyarParser.Colon)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 293
                    self.statement()
                    self.state = 298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 299
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.match(NyarParser.T__0)
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 303
                    self.statement()
                    self.state = 308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 309
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Colon:
                    self.state = 310
                    self.match(NyarParser.Colon)


                self.state = 314 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 313
                        self.statement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 316 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.expression(0)
            self.state = 325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 321
                    self.match(NyarParser.Comma)
                    self.state = 322
                    self.expression(0) 
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # SymbolContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 329
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 330
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 331
                localctx.left = self.symbol()
                self.state = 332
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 334
                localctx.op = self.pre_ops()
                self.state = 335
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 337
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 338
                self.match(NyarParser.T__2)
                self.state = 339
                self.expression(0)
                self.state = 340
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 342
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 388
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 345
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 346
                        localctx.op = self.bit_ops()
                        self.state = 347
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 349
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 350
                        localctx.op = self.lgk_ops()
                        self.state = 351
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 353
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 354
                        localctx.op = self.cpr_ops()
                        self.state = 355
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 357
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 358
                        localctx.op = self.pow_ops()
                        self.state = 359
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 361
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 362
                        localctx.op = self.mul_ops()
                        self.state = 363
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 365
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 366
                        localctx.op = self.add_ops()
                        self.state = 367
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 369
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 370
                        localctx.op = self.list_ops()
                        self.state = 371
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 373
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 374
                        self.match(NyarParser.Dot)
                        self.state = 375
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 376
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 377
                        self.match(NyarParser.Dot)
                        self.state = 378
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 379
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 380
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 381
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 382
                        self.match(NyarParser.As)
                        self.state = 383
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 384
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 385
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 386
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 387
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 394
                    self.match(NyarParser.T__2)
                    self.state = 395
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 399
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 400
                localctx.state = self.match(NyarParser.Return)
                self.state = 401
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 402
                localctx.state = self.match(NyarParser.Return)
                self.state = 403
                self.match(NyarParser.T__2)
                self.state = 404
                self.expressionStatement()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 405
                    self.match(NyarParser.Comma)


                self.state = 408
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.symbols()
            self.state = 413
            self.match(NyarParser.T__2)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 414
                self.arguments()
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.match(NyarParser.Comma)
                        self.state = 416
                        self.arguments() 
                    self.state = 421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 422
                    self.match(NyarParser.Comma)




            self.state = 427
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arguments)
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeStatement)
        try:
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(NyarParser.Type)
                self.state = 437
                self.symbol()
                self.state = 438
                self.match(NyarParser.Colon)
                self.state = 439
                self.typeExpression(0)
                self.state = 441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 440
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(NyarParser.Type)
                self.state = 444
                self.symbol()
                self.state = 445
                self.match(NyarParser.T__0)
                self.state = 446
                self.typeExpression(0)
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 453
                self.symbol()
                self.state = 454
                self.match(NyarParser.T__2)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 455
                    self.typeExpression(0)
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 456
                        self.match(NyarParser.Comma)
                        self.state = 457
                        self.typeExpression(0)
                        self.state = 462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 465
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 467
                self.symbol()
                self.state = 468
                self.match(NyarParser.Less)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 469
                    self.typeExpression(0)
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 470
                        self.match(NyarParser.Comma)
                        self.state = 471
                        self.typeExpression(0)
                        self.state = 476
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 479
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 481
                self.symbol()
                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 482
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 485
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 496
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 494
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 488
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 489
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 490
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 491
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 492
                        self.match(NyarParser.T__4)
                        self.state = 493
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 498
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            _la = self._input.LA(1)
            if not(_la==NyarParser.Act or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 500
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def functionPattern(self):
            return self.getTypedRuleContext(NyarParser.FunctionPatternContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 502
                self.match(NyarParser.Val)
                self.state = 503
                self.assignLHS()
                self.state = 504
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.match(NyarParser.Var)
                self.state = 507
                self.assignLHS()
                self.state = 508
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 510
                self.match(NyarParser.Def)
                self.state = 511
                self.assignLHS()
                self.state = 512
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 514
                self.match(NyarParser.Def)
                self.state = 515
                self.functionPattern()
                self.state = 516
                self.blockStatement()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 518
                self.functionPattern()
                self.state = 519
                _la = self._input.LA(1)
                if not(_la==NyarParser.Set or _la==NyarParser.Delay):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 520
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.assignLHS()
                self.state = 523
                self.match(NyarParser.Set)
                self.state = 524
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 526
                self.assignLHS()
                self.state = 527
                self.match(NyarParser.Flexible)
                self.state = 528
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 530
                self.assignLHS()
                self.state = 531
                self.match(NyarParser.Delay)
                self.state = 532
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.symbol()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 537
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.maybeSymbol()
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 541
                    self.match(NyarParser.Comma)
                    self.state = 542
                    self.maybeSymbol()
                    self.state = 547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                self.symbols()
                self.state = 550
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignRHS" ):
                listener.enterAssignRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignRHS" ):
                listener.exitAssignRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignRHS" ):
                return visitor.visitAssignRHS(self)
            else:
                return visitor.visitChildren(self)




    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.expressionStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 556
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 557
                self.match(NyarParser.T__0)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 558
                    self.statement()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(NyarParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 565
                self.match(NyarParser.Colon)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 566
                    self.statement()
                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 572
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keyword(self):
            return self.getToken(NyarParser.Keyword, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_parameter)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 575
                    self.typeExpression(0)


                self.state = 578
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 579
                    self.typeExpression(0)


                self.state = 582
                self.symbol()
                self.state = 583
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 585
                    self.typeExpression(0)


                self.state = 588
                self.symbol()
                self.state = 589
                self.match(NyarParser.Keyword)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 592
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 591
                    self.typeExpression(0)


                self.state = 594
                self.symbol()
                self.state = 595
                self.match(NyarParser.Nullable)
                self.state = 596
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_functionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPattern" ):
                listener.enterFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPattern" ):
                listener.exitFunctionPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionPattern" ):
                return visitor.visitFunctionPattern(self)
            else:
                return visitor.visitChildren(self)




    def functionPattern(self):

        localctx = NyarParser.FunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.symbol()
            self.state = 601
            self.match(NyarParser.T__2)
            self.state = 602
            self.parameter()
            self.state = 607
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 603
                    self.match(NyarParser.Comma)
                    self.state = 604
                    self.parameter() 
                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 610
                self.match(NyarParser.Comma)


            self.state = 613
            self.match(NyarParser.T__3)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 614
                self.typeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_maybeSymbol)
        self._la = 0 # Token type
        try:
            self.state = 622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols, NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.symbols()
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 618
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Suffix]:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(NyarParser.Suffix)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_symbols

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MaybeMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Symbols(self):
            return self.getToken(NyarParser.Symbols, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeMethod" ):
                listener.enterMaybeMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeMethod" ):
                listener.exitMaybeMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeMethod" ):
                return visitor.visitMaybeMethod(self)
            else:
                return visitor.visitChildren(self)


    class MustMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMustMethod" ):
                listener.enterMustMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMustMethod" ):
                listener.exitMustMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMustMethod" ):
                return visitor.visitMustMethod(self)
            else:
                return visitor.visitChildren(self)



    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_symbols)
        try:
            self.state = 628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols]:
                localctx = NyarParser.MaybeMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.match(NyarParser.Symbols)
                pass
            elif token in [NyarParser.TrueName]:
                localctx = NyarParser.MustMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.match(NyarParser.TrueName)
                self.state = 626
                self.match(NyarParser.Dot)
                self.state = 627
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def ifSingle(self):
            return self.getTypedRuleContext(NyarParser.IfSingleContext,0)


        def ifNested(self):
            return self.getTypedRuleContext(NyarParser.IfNestedContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatment" ):
                listener.enterIfStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatment" ):
                listener.exitIfStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatment" ):
                return visitor.visitIfStatment(self)
            else:
                return visitor.visitChildren(self)




    def ifStatment(self):

        localctx = NyarParser.IfStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ifStatment)
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.match(NyarParser.If)
                self.state = 631
                self.ifShort()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.match(NyarParser.If)
                self.state = 633
                self.ifSingle()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                self.match(NyarParser.If)
                self.state = 635
                self.ifNested()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfShortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfShort" ):
                listener.enterIfShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfShort" ):
                listener.exitIfShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfShort" ):
                return visitor.visitIfShort(self)
            else:
                return visitor.visitChildren(self)




    def ifShort(self):

        localctx = NyarParser.IfShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ifShort)
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 638
                self.condition()
                self.state = 639
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.condition()
                self.state = 642
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfSingleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)




    def ifSingle(self):

        localctx = NyarParser.IfSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ifSingle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.condition()
            self.state = 647
            self.blockNonEnd()
            self.state = 648
            self.else()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNestedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)


        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)


        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifNested

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)




    def ifNested(self):

        localctx = NyarParser.IfNestedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifNested)
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.condition()
                self.state = 651
                self.blockNonEnd()
                self.state = 653 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 652
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 655 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 657
                self.else()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.condition()
                self.state = 660
                self.blockNonEnd()
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 661
                        self.elseIf() 
                    self.state = 666
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 667
                self.elif()
                self.state = 668
                self.ifShort()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(NyarParser.ElseIf, 0)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif" ):
                listener.enterElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif" ):
                listener.exitElif(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif" ):
                return visitor.visitElif(self)
            else:
                return visitor.visitChildren(self)




    def elif(self):

        localctx = NyarParser.ElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_elif)
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.ElseIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                self.match(NyarParser.ElseIf)
                pass
            elif token in [NyarParser.Else]:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.match(NyarParser.Else)
                self.state = 674
                self.match(NyarParser.If)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse" ):
                listener.enterElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse" ):
                listener.exitElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse" ):
                return visitor.visitElse(self)
            else:
                return visitor.visitChildren(self)




    def else(self):

        localctx = NyarParser.ElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_else)
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.match(NyarParser.Else)
                self.state = 678
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.match(NyarParser.Else)
                self.state = 680
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elseIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.elif()
            self.state = 684
            self.condition()
            self.state = 685
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_switchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatment" ):
                listener.enterSwitchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatment" ):
                listener.exitSwitchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatment" ):
                return visitor.visitSwitchStatment(self)
            else:
                return visitor.visitChildren(self)




    def switchStatment(self):

        localctx = NyarParser.SwitchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(NyarParser.Switch)
            self.state = 688
            self.condition()
            self.state = 689
            self.switchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_caseBody)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.match(NyarParser.Case)
                self.state = 692
                self.expression(0)
                self.state = 693
                self.match(NyarParser.Colon)
                self.state = 694
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.expression(0)
                self.state = 697
                self.match(NyarParser.Rule)
                self.state = 698
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.match(NyarParser.Default)
                self.state = 701
                self.match(NyarParser.Colon)
                self.state = 702
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.match(NyarParser.Case)
                self.state = 704
                self.match(NyarParser.Times)
                self.state = 705
                self.match(NyarParser.Colon)
                self.state = 706
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 707
                self.match(NyarParser.Times)
                self.state = 708
                self.match(NyarParser.Rule)
                self.state = 709
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self.match(NyarParser.T__0)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 713
                    self.caseBody()
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 719
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.match(NyarParser.Colon)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 721
                    self.caseBody()
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 727
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match(self):
            return self.getToken(NyarParser.Match, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatment" ):
                listener.enterMatchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatment" ):
                listener.exitMatchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatment" ):
                return visitor.visitMatchStatment(self)
            else:
                return visitor.visitChildren(self)




    def matchStatment(self):

        localctx = NyarParser.MatchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(NyarParser.Match)
            self.state = 731
            self.condition()
            self.state = 732
            self.matchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_matchBody)
        try:
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_condition)
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(NyarParser.T__2)
                self.state = 740
                self.expression(0)
                self.state = 741
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockNonEnd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.BlockNonEndContext)
            else:
                return self.getTypedRuleContext(NyarParser.BlockNonEndContext,i)


        def tryFinal(self):
            return self.getTypedRuleContext(NyarParser.TryFinalContext,0)


        def Catch(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Catch)
            else:
                return self.getToken(NyarParser.Catch, i)

        def tryCatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TryCatchContext)
            else:
                return self.getTypedRuleContext(NyarParser.TryCatchContext,i)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.match(NyarParser.Try)
                self.state = 746
                self.blockNonEnd()
                self.state = 749 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 747
                    self.match(NyarParser.Catch)
                    self.state = 748
                    self.tryCatch()
                    self.state = 751 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Catch):
                        break

                self.state = 753
                self.tryFinal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.match(NyarParser.Try)
                self.state = 756
                self.blockNonEnd()
                self.state = 757
                self.match(NyarParser.Catch)
                self.state = 758
                self.symbol()
                self.state = 759
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 761
                self.match(NyarParser.Try)
                self.state = 762
                self.blockNonEnd()
                self.state = 763
                self.match(NyarParser.Catch)
                self.state = 764
                self.match(NyarParser.T__2)
                self.state = 765
                self.symbol()
                self.state = 766
                self.match(NyarParser.T__3)
                self.state = 767
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatch" ):
                return visitor.visitTryCatch(self)
            else:
                return visitor.visitChildren(self)




    def tryCatch(self):

        localctx = NyarParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tryCatch)
        try:
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.symbol()
                self.state = 772
                self.blockNonEnd()
                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 774
                self.match(NyarParser.T__2)
                self.state = 775
                self.symbol()
                self.state = 776
                self.match(NyarParser.T__3)
                self.state = 777
                self.blockNonEnd()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryFinalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryFinal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryFinal" ):
                listener.enterTryFinal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryFinal" ):
                listener.exitTryFinal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryFinal" ):
                return visitor.visitTryFinal(self)
            else:
                return visitor.visitChildren(self)




    def tryFinal(self):

        localctx = NyarParser.TryFinalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tryFinal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(NyarParser.Final)
            self.state = 782
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_forStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)



    def forStatement(self):

        localctx = NyarParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.match(NyarParser.For)
                self.state = 785
                self.match(NyarParser.T__2)
                self.state = 786
                self.expressionStatement()
                self.state = 787
                self.match(NyarParser.T__3)
                self.state = 788
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                self.match(NyarParser.For)
                self.state = 791
                self.symbol()
                self.state = 792
                self.match(NyarParser.In)
                self.state = 793
                self.expression(0)
                self.state = 794
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(NyarParser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_whileStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatment" ):
                listener.enterWhileStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatment" ):
                listener.exitWhileStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatment" ):
                return visitor.visitWhileStatment(self)
            else:
                return visitor.visitChildren(self)




    def whileStatment(self):

        localctx = NyarParser.WhileStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whileStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(NyarParser.While)
            self.state = 799
            self.condition()
            self.state = 800
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_letStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatment" ):
                listener.enterLetStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatment" ):
                listener.exitLetStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatment" ):
                return visitor.visitLetStatment(self)
            else:
                return visitor.visitChildren(self)




    def letStatment(self):

        localctx = NyarParser.LetStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_letStatment)
        self._la = 0 # Token type
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(NyarParser.Let)
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 803
                        self.symbol() 
                    self.state = 808
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                self.state = 809
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(NyarParser.Let)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 811
                    self.symbol()
                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 817
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = NyarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(NyarParser.T__0)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 821
                    self.classExpression()
                    self.state = 826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 827
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(NyarParser.Colon)
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 829
                    self.classExpression()
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 835
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 836
                self.match(NyarParser.Colon)
                self.state = 837
                self.classExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classController(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassControllerContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassControllerContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 841
                        self.classController() 
                    self.state = 846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 847
                self.symbol()
                self.state = 849
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 848
                    self.typeSuffix()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 851
                        self.classController() 
                    self.state = 856
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 857
                self.symbol()
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 858
                    self.typeSuffix()


                self.state = 861
                self.blockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 863
                        self.classController() 
                    self.state = 868
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 869
                self.symbol()
                self.state = 870
                self.match(NyarParser.T__2)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 871
                    self.parameter()
                    self.state = 876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 877
                self.match(NyarParser.T__3)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 878
                    self.typeSuffix()


                self.state = 881
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(NyarParser.Trait)
            self.state = 886
            self.symbol()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 887
                self.classExtend()


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 890
                self.classTrait()


            self.state = 893
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(NyarParser.Class)
            self.state = 896
            self.symbol()
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 897
                self.classExtend()


            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 900
                self.classTrait()


            self.state = 903
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extend(self):
            return self.getToken(NyarParser.Extend, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtend" ):
                listener.enterClassExtend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtend" ):
                listener.exitClassExtend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtend" ):
                return visitor.visitClassExtend(self)
            else:
                return visitor.visitChildren(self)




    def classExtend(self):

        localctx = NyarParser.ClassExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classExtend)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extend]:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.match(NyarParser.Extend)
                self.state = 907 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 906
                    self.symbol()
                    self.state = 909 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0)):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(NyarParser.T__2)
                self.state = 912
                self.symbol()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 913
                    self.match(NyarParser.Comma)
                    self.state = 914
                    self.symbol()
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 920
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTraitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classTrait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTrait" ):
                listener.enterClassTrait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTrait" ):
                listener.exitClassTrait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTrait" ):
                return visitor.visitClassTrait(self)
            else:
                return visitor.visitChildren(self)




    def classTrait(self):

        localctx = NyarParser.ClassTraitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classTrait)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(NyarParser.Act)
                self.state = 926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 925
                    self.symbol()
                    self.state = 928 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.match(NyarParser.Tilde)
                self.state = 931
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                self.match(NyarParser.Tilde)
                self.state = 933
                self.match(NyarParser.T__2)
                self.state = 934
                self.symbol()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 935
                    self.match(NyarParser.Comma)
                    self.state = 936
                    self.symbol()
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 942
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassController" ):
                listener.enterClassController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassController" ):
                listener.exitClassController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassController" ):
                return visitor.visitClassController(self)
            else:
                return visitor.visitChildren(self)




    def classController(self):

        localctx = NyarParser.ClassControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classController)
        try:
            self.state = 950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.symbol()
                pass
            elif token in [NyarParser.Val]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(NyarParser.Val)
                pass
            elif token in [NyarParser.Var]:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.match(NyarParser.Var)
                pass
            elif token in [NyarParser.Def]:
                self.enterOuterAlt(localctx, 4)
                self.state = 949
                self.match(NyarParser.Def)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_data)
        try:
            self.state = 961
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 955
                self.symbol()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 956
                self.symbols()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 957
                self.list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 958
                self.dict()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 959
                self.index()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 960
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number)
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 966
                self.match(NyarParser.Binary)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.match(NyarParser.Octal)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 968
                self.match(NyarParser.Hexadecimal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.match(NyarParser.T__4)
                self.state = 972
                self.indexValid()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Comma - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 973
                        self.match(NyarParser.Comma)


                    self.state = 976
                    self.indexValid()
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 982
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(NyarParser.T__6)
                self.state = 985
                self.indexValid()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Comma - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 986
                        self.match(NyarParser.Comma)


                    self.state = 989
                    self.indexValid()
                    self.state = 994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 995
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(NyarParser.T__0)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (NyarParser.Pass - 17)) | (1 << (NyarParser.Yield - 17)) | (1 << (NyarParser.Await - 17)) | (1 << (NyarParser.Break - 17)) | (1 << (NyarParser.Throw - 17)) | (1 << (NyarParser.Integer - 17)) | (1 << (NyarParser.StringEscapeBlock - 17)) | (1 << (NyarParser.StringEscapeSingle - 17)) | (1 << (NyarParser.StringLiteral - 17)) | (1 << (NyarParser.StringEmpty - 17)) | (1 << (NyarParser.TrueName - 17)) | (1 << (NyarParser.Symbol - 17)))) != 0):
                self.state = 1000
                self.keyValue()


            self.state = 1007
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1003
                    self.match(NyarParser.Comma)
                    self.state = 1004
                    self.keyValue() 
                self.state = 1009
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1010
                self.match(NyarParser.Comma)


            self.state = 1013
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            localctx.key = self.keyValid()
            self.state = 1016
            self.match(NyarParser.Colon)
            self.state = 1017
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_keyValid)
        try:
            self.state = 1022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1019
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1020
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteral, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1021
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(NyarParser.T__4)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Decimal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 1025
                self.element()


            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1028
                    self.match(NyarParser.Comma)
                    self.state = 1029
                    self.element() 
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1035
                self.match(NyarParser.Comma)


            self.state = 1038
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_element)
        try:
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1042
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexValid" ):
                listener.enterIndexValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexValid" ):
                listener.exitIndexValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexValid" ):
                return visitor.visitIndexValid(self)
            else:
                return visitor.visitChildren(self)




    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_indexValid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.state = 1045
                self.symbol()
                pass
            elif token in [NyarParser.Integer]:
                self.state = 1046
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Colon:
                self.state = 1049
                self.match(NyarParser.Colon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1053
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteral(self):
            return self.getToken(NyarParser.StringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_string)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1059
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1060
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteral]:
                localctx = NyarParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.match(NyarParser.StringLiteral)
                pass
            elif token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1062
                self.match(NyarParser.StringEmpty)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (NyarParser.True - 79)) | (1 << (NyarParser.False - 79)) | (1 << (NyarParser.Null - 79)) | (1 << (NyarParser.Nothing - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_symbol)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.flowController()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.match(NyarParser.TrueName)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # SymbolContext

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_solt)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.match(NyarParser.Sharp)
                self.state = 1074
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1073
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1076
                self.match(NyarParser.Sharp)
                self.state = 1077
                localctx.id = self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (NyarParser.Increase - 100)) | (1 << (NyarParser.BitNot - 100)) | (1 << (NyarParser.LogicNot - 100)) | (1 << (NyarParser.Reciprocal - 100)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (NyarParser.Increase - 100)) | (1 << (NyarParser.Decrease - 100)) | (1 << (NyarParser.DoubleBang - 100)) | (1 << (NyarParser.BitNot - 100)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (NyarParser.Exponent - 69)) | (1 << (NyarParser.Base - 69)) | (1 << (NyarParser.LeftShift - 69)) | (1 << (NyarParser.RightShift - 69)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (NyarParser.LogicXor - 102)) | (1 << (NyarParser.LogicOr - 102)) | (1 << (NyarParser.LogicAnd - 102)) | (1 << (NyarParser.LogicNot - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                _la = self._input.LA(1)
                if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (NyarParser.Equivalent - 115)) | (1 << (NyarParser.NotEquivalent - 115)) | (1 << (NyarParser.Equal - 115)) | (1 << (NyarParser.NotEqual - 115)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                _la = self._input.LA(1)
                if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (NyarParser.LessEqual - 94)) | (1 << (NyarParser.Less - 94)) | (1 << (NyarParser.GraterEqual - 94)) | (1 << (NyarParser.Grater - 94)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1092
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (NyarParser.Multiply - 105)) | (1 << (NyarParser.Kronecker - 105)) | (1 << (NyarParser.TensorProduct - 105)) | (1 << (NyarParser.Remainder - 105)) | (1 << (NyarParser.Divide - 105)) | (1 << (NyarParser.Mod - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (NyarParser.LeftShift - 93)) | (1 << (NyarParser.RightShift - 93)) | (1 << (NyarParser.Increase - 93)) | (1 << (NyarParser.Map - 93)) | (1 << (NyarParser.Concat - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.expression_sempred
        self._predicates[18] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




