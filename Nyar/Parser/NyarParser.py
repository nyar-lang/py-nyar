# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0096")
        buf.write("\u057e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\3\2\7\2\u00b8\n\2\f\2")
        buf.write("\16\2\u00bb\13\2\3\2\3\2\3\3\3\3\3\3\5\3\u00c2\n\3\3\3")
        buf.write("\5\3\u00c5\n\3\3\3\3\3\5\3\u00c9\n\3\3\3\5\3\u00cc\n\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\5\3\u00d3\n\3\3\3\5\3\u00d6\n\3\3")
        buf.write("\3\3\3\3\3\5\3\u00db\n\3\3\3\5\3\u00de\n\3\3\3\3\3\3\3")
        buf.write("\5\3\u00e3\n\3\3\3\5\3\u00e6\n\3\3\3\3\3\5\3\u00ea\n\3")
        buf.write("\3\3\3\3\5\3\u00ee\n\3\3\3\3\3\5\3\u00f2\n\3\5\3\u00f4")
        buf.write("\n\3\3\4\3\4\5\4\u00f8\n\4\3\5\3\5\3\6\3\6\3\6\5\6\u00ff")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0109\n\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0110\n\6\3\6\3\6\3\6\3\6\5\6\u0116")
        buf.write("\n\6\3\7\3\7\3\7\5\7\u011b\n\7\3\7\5\7\u011e\n\7\3\7\5")
        buf.write("\7\u0121\n\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3")
        buf.write("\n\3\13\3\13\3\13\3\13\7\13\u0132\n\13\f\13\16\13\u0135")
        buf.write("\13\13\3\13\3\13\3\f\3\f\7\f\u013b\n\f\f\f\16\f\u013e")
        buf.write("\13\f\3\f\3\f\3\f\3\f\3\f\7\f\u0145\n\f\f\f\16\f\u0148")
        buf.write("\13\f\3\f\5\f\u014b\n\f\3\r\3\r\7\r\u014f\n\r\f\r\16\r")
        buf.write("\u0152\13\r\3\r\3\r\5\r\u0156\n\r\3\r\6\r\u0159\n\r\r")
        buf.write("\r\16\r\u015a\5\r\u015d\n\r\3\16\3\16\3\16\7\16\u0162")
        buf.write("\n\16\f\16\16\16\u0165\13\16\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0176\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\7\17\u01a3\n\17\f\17\16\17\u01a6\13\17\3\20")
        buf.write("\3\20\3\20\5\20\u01ab\n\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u01b5\n\20\3\20\3\20\5\20\u01b9\n\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u01c0\n\21\f\21\16\21\u01c3")
        buf.write("\13\21\3\21\5\21\u01c6\n\21\5\21\u01c8\n\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\5\22\u01cf\n\22\3\23\3\23\3\24\3\24\3")
        buf.write("\24\3\24\3\24\5\24\u01d8\n\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u01df\n\24\5\24\u01e1\n\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\7\25\u01e9\n\25\f\25\16\25\u01ec\13\25\5\25\u01ee")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u01f7\n")
        buf.write("\25\f\25\16\25\u01fa\13\25\5\25\u01fc\n\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u0202\n\25\3\25\5\25\u0205\n\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u020d\n\25\f\25\16\25\u0210")
        buf.write("\13\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u0235\n\27\3\30\3\30\5\30\u0239")
        buf.write("\n\30\3\30\3\30\3\30\7\30\u023e\n\30\f\30\16\30\u0241")
        buf.write("\13\30\3\30\3\30\3\30\3\30\5\30\u0247\n\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\7\31\u024e\n\31\f\31\16\31\u0251\13\31\3")
        buf.write("\31\3\31\3\31\7\31\u0256\n\31\f\31\16\31\u0259\13\31\3")
        buf.write("\31\5\31\u025c\n\31\3\32\5\32\u025f\n\32\3\32\3\32\5\32")
        buf.write("\u0263\n\32\3\32\3\32\3\32\3\32\5\32\u0269\n\32\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u026f\n\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u0275\n\32\3\33\3\33\3\33\3\33\3\33\7\33\u027c\n\33\f")
        buf.write("\33\16\33\u027f\13\33\3\33\5\33\u0282\n\33\3\33\3\33\5")
        buf.write("\33\u0286\n\33\3\34\3\34\5\34\u028a\n\34\3\34\5\34\u028d")
        buf.write("\n\34\3\35\3\35\3\35\3\35\5\35\u0293\n\35\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\5\36\u029b\n\36\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u02a3\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \5 \u02af\n \3!\3!\3!\6!\u02b4\n!\r!\16!\u02b5\3!\3")
        buf.write("!\3!\3!\3!\3!\6!\u02be\n!\r!\16!\u02bf\3!\3!\3!\3!\3!")
        buf.write("\3!\7!\u02c8\n!\f!\16!\u02cb\13!\3!\3!\3!\5!\u02d0\n!")
        buf.write("\3\"\3\"\3\"\5\"\u02d5\n\"\3#\3#\3#\3#\3$\3$\3$\3$\3%")
        buf.write("\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\5%\u02f2\n%\3&\3&\7&\u02f6\n&\f&\16&\u02f9\13&\3&\3")
        buf.write("&\3&\7&\u02fe\n&\f&\16&\u0301\13&\3&\5&\u0304\n&\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\5(\u030c\n(\3)\3)\3)\3)\3)\5)\u0313\n")
        buf.write(")\3*\3*\3*\3*\6*\u0319\n*\r*\16*\u031a\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u032d\n*\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\5+\u0337\n+\3,\3,\3,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\5-\u0348\n-\3.\3.\3.\3.\3/\3/\7/\u0350")
        buf.write("\n/\f/\16/\u0353\13/\3/\3/\3/\7/\u0358\n/\f/\16/\u035b")
        buf.write("\13/\3/\5/\u035e\n/\3\60\3\60\5\60\u0362\n\60\3\60\7\60")
        buf.write("\u0365\n\60\f\60\16\60\u0368\13\60\3\60\3\60\5\60\u036c")
        buf.write("\n\60\3\60\5\60\u036f\n\60\3\60\7\60\u0372\n\60\f\60\16")
        buf.write("\60\u0375\13\60\3\60\3\60\5\60\u0379\n\60\3\60\3\60\5")
        buf.write("\60\u037d\n\60\3\60\7\60\u0380\n\60\f\60\16\60\u0383\13")
        buf.write("\60\3\60\3\60\3\60\7\60\u0388\n\60\f\60\16\60\u038b\13")
        buf.write("\60\3\60\3\60\5\60\u038f\n\60\3\60\3\60\5\60\u0393\n\60")
        buf.write("\5\60\u0395\n\60\3\61\3\61\3\61\5\61\u039a\n\61\3\61\5")
        buf.write("\61\u039d\n\61\3\61\3\61\7\61\u03a1\n\61\f\61\16\61\u03a4")
        buf.write("\13\61\3\61\3\61\3\61\3\61\3\61\5\61\u03ab\n\61\3\61\5")
        buf.write("\61\u03ae\n\61\3\61\3\61\7\61\u03b2\n\61\f\61\16\61\u03b5")
        buf.write("\13\61\3\61\3\61\5\61\u03b9\n\61\3\62\3\62\6\62\u03bd")
        buf.write("\n\62\r\62\16\62\u03be\3\62\3\62\3\62\3\62\7\62\u03c5")
        buf.write("\n\62\f\62\16\62\u03c8\13\62\3\62\3\62\5\62\u03cc\n\62")
        buf.write("\3\63\3\63\6\63\u03d0\n\63\r\63\16\63\u03d1\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\7\63\u03db\n\63\f\63\16\63\u03de")
        buf.write("\13\63\3\63\3\63\5\63\u03e2\n\63\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u03e8\n\64\3\65\3\65\3\66\3\66\3\66\5\66\u03ef\n\66")
        buf.write("\3\66\5\66\u03f2\n\66\3\66\3\66\7\66\u03f6\n\66\f\66\16")
        buf.write("\66\u03f9\13\66\3\66\3\66\3\66\3\66\3\66\5\66\u0400\n")
        buf.write("\66\3\66\5\66\u0403\n\66\3\66\3\66\7\66\u0407\n\66\f\66")
        buf.write("\16\66\u040a\13\66\3\66\3\66\5\66\u040e\n\66\3\67\3\67")
        buf.write("\3\67\5\67\u0413\n\67\3\67\5\67\u0416\n\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\5\67\u041f\n\67\3\67\5\67\u0422")
        buf.write("\n\67\3\67\3\67\7\67\u0426\n\67\f\67\16\67\u0429\13\67")
        buf.write("\3\67\3\67\5\67\u042d\n\67\38\38\38\58\u0432\n8\38\58")
        buf.write("\u0435\n8\38\38\78\u0439\n8\f8\168\u043c\138\38\38\38")
        buf.write("\38\38\58\u0443\n8\38\58\u0446\n8\38\38\78\u044a\n8\f")
        buf.write("8\168\u044d\138\38\38\58\u0451\n8\39\39\59\u0455\n9\3")
        buf.write("9\39\59\u0459\n9\39\59\u045c\n9\39\39\79\u0460\n9\f9\16")
        buf.write("9\u0463\139\39\39\39\39\59\u0469\n9\39\39\59\u046d\n9")
        buf.write("\39\59\u0470\n9\39\39\79\u0474\n9\f9\169\u0477\139\39")
        buf.write("\39\59\u047b\n9\3:\3:\5:\u047f\n:\3;\3;\3;\3;\5;\u0485")
        buf.write("\n;\3<\3<\3<\5<\u048a\n<\3<\3<\5<\u048e\n<\3=\3=\3=\3")
        buf.write("=\3=\3=\7=\u0496\n=\f=\16=\u0499\13=\3>\3>\3>\3>\3>\5")
        buf.write(">\u04a0\n>\3?\3?\5?\u04a4\n?\3?\3?\3?\3?\5?\u04aa\n?\5")
        buf.write("?\u04ac\n?\3@\3@\3@\3@\3@\5@\u04b3\n@\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\5A\u04be\nA\3B\3B\3B\3B\5B\u04c4\nB\3C\3C\3")
        buf.write("D\3D\3D\5D\u04cb\nD\3D\7D\u04ce\nD\fD\16D\u04d1\13D\3")
        buf.write("D\3D\3D\3D\3D\5D\u04d8\nD\3D\7D\u04db\nD\fD\16D\u04de")
        buf.write("\13D\3D\3D\5D\u04e2\nD\3E\3E\5E\u04e6\nE\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u04f1\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\5E\u04fe\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\5E\u050d\nE\3E\3E\3E\3E\3E\3E\5E\u0515\nE\3F\3F\5F\u0519")
        buf.write("\nF\3F\5F\u051c\nF\3G\3G\5G\u0520\nG\3G\3G\7G\u0524\n")
        buf.write("G\fG\16G\u0527\13G\3G\5G\u052a\nG\3G\3G\3H\3H\3H\3H\3")
        buf.write("I\3I\3I\5I\u0535\nI\3J\3J\5J\u0539\nJ\3J\3J\7J\u053d\n")
        buf.write("J\fJ\16J\u0540\13J\3J\5J\u0543\nJ\3J\3J\3K\3K\3K\5K\u054a")
        buf.write("\nK\3L\3L\3L\3M\3M\3N\3N\3O\3O\3O\3O\3O\5O\u0558\nO\3")
        buf.write("P\3P\3Q\3Q\3Q\5Q\u055f\nQ\3R\3R\5R\u0563\nR\3R\3R\5R\u0567")
        buf.write("\nR\3S\3S\3T\3T\3U\3U\3V\3V\3W\3W\3X\3X\3X\5X\u0576\n")
        buf.write("X\3Y\3Y\3Z\3Z\3[\3[\3[\2\4\34(\\\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\2\34\3\2\17\20\4\2\66\66ZZ\4")
        buf.write("\2\23\23\27\27\4\2\25\26\30\30\4\2\23\23\25\30\4\2\17")
        buf.write("\17\35\35\3\2\33\34\3\2:;\4\2##&&\4\2\13\13\31\31\4\2")
        buf.write("\17\17BB\3\2FH\3\2BC\4\2DDII\3\2DE\3\2RU\6\2BCkk\u0083")
        buf.write("\u0084\u008f\u008f\6\2kknn\u0081\u0081\u0083\u0083\5\2")
        buf.write("JKddhh\5\2mm\177\u0080\u0084\u0084\4\2z|\u0082\u0082\4")
        buf.write("\2efij\3\2\177\u0080\4\2\20\20\u008e\u008e\7\2\17\17p")
        buf.write("rttvvyy\7\2ddhhkkuu}}\2\u0633\2\u00b9\3\2\2\2\4\u00f3")
        buf.write("\3\2\2\2\6\u00f7\3\2\2\2\b\u00f9\3\2\2\2\n\u0115\3\2\2")
        buf.write("\2\f\u0120\3\2\2\2\16\u0122\3\2\2\2\20\u0126\3\2\2\2\22")
        buf.write("\u012a\3\2\2\2\24\u012d\3\2\2\2\26\u014a\3\2\2\2\30\u015c")
        buf.write("\3\2\2\2\32\u015e\3\2\2\2\34\u0175\3\2\2\2\36\u01b8\3")
        buf.write("\2\2\2 \u01ba\3\2\2\2\"\u01ce\3\2\2\2$\u01d0\3\2\2\2&")
        buf.write("\u01e0\3\2\2\2(\u0204\3\2\2\2*\u0211\3\2\2\2,\u0234\3")
        buf.write("\2\2\2.\u0246\3\2\2\2\60\u025b\3\2\2\2\62\u0274\3\2\2")
        buf.write("\2\64\u0276\3\2\2\2\66\u028c\3\2\2\28\u0292\3\2\2\2:\u029a")
        buf.write("\3\2\2\2<\u02a2\3\2\2\2>\u02ae\3\2\2\2@\u02cf\3\2\2\2")
        buf.write("B\u02d4\3\2\2\2D\u02d6\3\2\2\2F\u02da\3\2\2\2H\u02f1\3")
        buf.write("\2\2\2J\u0303\3\2\2\2L\u0305\3\2\2\2N\u030b\3\2\2\2P\u0312")
        buf.write("\3\2\2\2R\u032c\3\2\2\2T\u0336\3\2\2\2V\u0338\3\2\2\2")
        buf.write("X\u0347\3\2\2\2Z\u0349\3\2\2\2\\\u035d\3\2\2\2^\u0394")
        buf.write("\3\2\2\2`\u03b8\3\2\2\2b\u03cb\3\2\2\2d\u03e1\3\2\2\2")
        buf.write("f\u03e7\3\2\2\2h\u03e9\3\2\2\2j\u040d\3\2\2\2l\u042c\3")
        buf.write("\2\2\2n\u0450\3\2\2\2p\u047a\3\2\2\2r\u047e\3\2\2\2t\u0480")
        buf.write("\3\2\2\2v\u0486\3\2\2\2x\u048f\3\2\2\2z\u049a\3\2\2\2")
        buf.write("|\u04ab\3\2\2\2~\u04b2\3\2\2\2\u0080\u04bd\3\2\2\2\u0082")
        buf.write("\u04c3\3\2\2\2\u0084\u04c5\3\2\2\2\u0086\u04e1\3\2\2\2")
        buf.write("\u0088\u0514\3\2\2\2\u008a\u051b\3\2\2\2\u008c\u051d\3")
        buf.write("\2\2\2\u008e\u052d\3\2\2\2\u0090\u0534\3\2\2\2\u0092\u0536")
        buf.write("\3\2\2\2\u0094\u0549\3\2\2\2\u0096\u054b\3\2\2\2\u0098")
        buf.write("\u054e\3\2\2\2\u009a\u0550\3\2\2\2\u009c\u0557\3\2\2\2")
        buf.write("\u009e\u0559\3\2\2\2\u00a0\u055e\3\2\2\2\u00a2\u0566\3")
        buf.write("\2\2\2\u00a4\u0568\3\2\2\2\u00a6\u056a\3\2\2\2\u00a8\u056c")
        buf.write("\3\2\2\2\u00aa\u056e\3\2\2\2\u00ac\u0570\3\2\2\2\u00ae")
        buf.write("\u0575\3\2\2\2\u00b0\u0577\3\2\2\2\u00b2\u0579\3\2\2\2")
        buf.write("\u00b4\u057b\3\2\2\2\u00b6\u00b8\5\4\3\2\u00b7\u00b6\3")
        buf.write("\2\2\2\u00b8\u00bb\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba")
        buf.write("\3\2\2\2\u00ba\u00bc\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc")
        buf.write("\u00bd\7\2\2\3\u00bd\3\3\2\2\2\u00be\u00f4\5\6\4\2\u00bf")
        buf.write("\u00c2\5\n\6\2\u00c0\u00c2\5\22\n\2\u00c1\u00bf\3\2\2")
        buf.write("\2\u00c1\u00c0\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u00c5")
        buf.write("\5\b\5\2\u00c4\u00c3\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5")
        buf.write("\u00f4\3\2\2\2\u00c6\u00c9\5\\/\2\u00c7\u00c9\5,\27\2")
        buf.write("\u00c8\u00c6\3\2\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00cb\3")
        buf.write("\2\2\2\u00ca\u00cc\5\b\5\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc")
        buf.write("\3\2\2\2\u00cc\u00f4\3\2\2\2\u00cd\u00d3\5F$\2\u00ce\u00d3")
        buf.write("\5:\36\2\u00cf\u00d3\5L\'\2\u00d0\u00d3\5X-\2\u00d1\u00d3")
        buf.write("\5Z.\2\u00d2\u00cd\3\2\2\2\u00d2\u00ce\3\2\2\2\u00d2\u00cf")
        buf.write("\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d1\3\2\2\2\u00d3")
        buf.write("\u00d5\3\2\2\2\u00d4\u00d6\5\b\5\2\u00d5\u00d4\3\2\2\2")
        buf.write("\u00d5\u00d6\3\2\2\2\u00d6\u00f4\3\2\2\2\u00d7\u00db\5")
        buf.write("&\24\2\u00d8\u00db\5j\66\2\u00d9\u00db\5`\61\2\u00da\u00d7")
        buf.write("\3\2\2\2\u00da\u00d8\3\2\2\2\u00da\u00d9\3\2\2\2\u00db")
        buf.write("\u00dd\3\2\2\2\u00dc\u00de\5\b\5\2\u00dd\u00dc\3\2\2\2")
        buf.write("\u00dd\u00de\3\2\2\2\u00de\u00f4\3\2\2\2\u00df\u00e3\5")
        buf.write("l\67\2\u00e0\u00e3\5n8\2\u00e1\u00e3\5p9\2\u00e2\u00df")
        buf.write("\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e1\3\2\2\2\u00e3")
        buf.write("\u00e5\3\2\2\2\u00e4\u00e6\5\b\5\2\u00e5\u00e4\3\2\2\2")
        buf.write("\u00e5\u00e6\3\2\2\2\u00e6\u00f4\3\2\2\2\u00e7\u00e9\5")
        buf.write("R*\2\u00e8\u00ea\5\b\5\2\u00e9\u00e8\3\2\2\2\u00e9\u00ea")
        buf.write("\3\2\2\2\u00ea\u00f4\3\2\2\2\u00eb\u00ed\5\34\17\2\u00ec")
        buf.write("\u00ee\5\b\5\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00f4\3\2\2\2\u00ef\u00f1\5\u0080A\2\u00f0\u00f2")
        buf.write("\5\b\5\2\u00f1\u00f0\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f4\3\2\2\2\u00f3\u00be\3\2\2\2\u00f3\u00c1\3\2\2\2")
        buf.write("\u00f3\u00c8\3\2\2\2\u00f3\u00d2\3\2\2\2\u00f3\u00da\3")
        buf.write("\2\2\2\u00f3\u00e2\3\2\2\2\u00f3\u00e7\3\2\2\2\u00f3\u00eb")
        buf.write("\3\2\2\2\u00f3\u00ef\3\2\2\2\u00f4\5\3\2\2\2\u00f5\u00f8")
        buf.write("\5\b\5\2\u00f6\u00f8\7\n\2\2\u00f7\u00f5\3\2\2\2\u00f7")
        buf.write("\u00f6\3\2\2\2\u00f8\7\3\2\2\2\u00f9\u00fa\7\13\2\2\u00fa")
        buf.write("\t\3\2\2\2\u00fb\u00fc\7\r\2\2\u00fc\u00fe\5\f\7\2\u00fd")
        buf.write("\u00ff\t\2\2\2\u00fe\u00fd\3\2\2\2\u00fe\u00ff\3\2\2\2")
        buf.write("\u00ff\u0116\3\2\2\2\u0100\u0101\7\r\2\2\u0101\u0102\5")
        buf.write("\f\7\2\u0102\u0103\7\f\2\2\u0103\u0104\5\u00a0Q\2\u0104")
        buf.write("\u0116\3\2\2\2\u0105\u0106\7\r\2\2\u0106\u0108\5\f\7\2")
        buf.write("\u0107\u0109\7\66\2\2\u0108\u0107\3\2\2\2\u0108\u0109")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010b\5\u00a0Q\2\u010b")
        buf.write("\u0116\3\2\2\2\u010c\u010d\7\r\2\2\u010d\u010f\5\f\7\2")
        buf.write("\u010e\u0110\t\3\2\2\u010f\u010e\3\2\2\2\u010f\u0110\3")
        buf.write("\2\2\2\u0110\u0111\3\2\2\2\u0111\u0112\5\24\13\2\u0112")
        buf.write("\u0116\3\2\2\2\u0113\u0114\7\r\2\2\u0114\u0116\5\u008c")
        buf.write("G\2\u0115\u00fb\3\2\2\2\u0115\u0100\3\2\2\2\u0115\u0105")
        buf.write("\3\2\2\2\u0115\u010c\3\2\2\2\u0115\u0113\3\2\2\2\u0116")
        buf.write("\13\3\2\2\2\u0117\u0121\5\u009cO\2\u0118\u0121\5\u00a0")
        buf.write("Q\2\u0119\u011b\5\16\b\2\u011a\u0119\3\2\2\2\u011a\u011b")
        buf.write("\3\2\2\2\u011b\u011d\3\2\2\2\u011c\u011e\5\20\t\2\u011d")
        buf.write("\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\3\2\2\2")
        buf.write("\u011f\u0121\58\35\2\u0120\u0117\3\2\2\2\u0120\u0118\3")
        buf.write("\2\2\2\u0120\u011a\3\2\2\2\u0121\r\3\2\2\2\u0122\u0123")
        buf.write("\7<\2\2\u0123\u0124\5\u00a0Q\2\u0124\u0125\7v\2\2\u0125")
        buf.write("\17\3\2\2\2\u0126\u0127\7=\2\2\u0127\u0128\5\u00a0Q\2")
        buf.write("\u0128\u0129\7v\2\2\u0129\21\3\2\2\2\u012a\u012b\7\16")
        buf.write("\2\2\u012b\u012c\5\u00a0Q\2\u012c\23\3\2\2\2\u012d\u012e")
        buf.write("\7\3\2\2\u012e\u0133\5\u00a0Q\2\u012f\u0130\7\31\2\2\u0130")
        buf.write("\u0132\5\u00a0Q\2\u0131\u012f\3\2\2\2\u0132\u0135\3\2")
        buf.write("\2\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136")
        buf.write("\3\2\2\2\u0135\u0133\3\2\2\2\u0136\u0137\7\4\2\2\u0137")
        buf.write("\25\3\2\2\2\u0138\u013c\7\3\2\2\u0139\u013b\5\4\3\2\u013a")
        buf.write("\u0139\3\2\2\2\u013b\u013e\3\2\2\2\u013c\u013a\3\2\2\2")
        buf.write("\u013c\u013d\3\2\2\2\u013d\u013f\3\2\2\2\u013e\u013c\3")
        buf.write("\2\2\2\u013f\u014b\7\4\2\2\u0140\u0141\7\22\2\2\u0141")
        buf.write("\u014b\5\34\17\2\u0142\u0146\7\22\2\2\u0143\u0145\5\4")
        buf.write("\3\2\u0144\u0143\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144")
        buf.write("\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148")
        buf.write("\u0146\3\2\2\2\u0149\u014b\7\21\2\2\u014a\u0138\3\2\2")
        buf.write("\2\u014a\u0140\3\2\2\2\u014a\u0142\3\2\2\2\u014b\27\3")
        buf.write("\2\2\2\u014c\u0150\7\3\2\2\u014d\u014f\5\4\3\2\u014e\u014d")
        buf.write("\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150")
        buf.write("\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152\u0150\3\2\2\2")
        buf.write("\u0153\u015d\7\4\2\2\u0154\u0156\7\22\2\2\u0155\u0154")
        buf.write("\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0158\3\2\2\2\u0157")
        buf.write("\u0159\5\4\3\2\u0158\u0157\3\2\2\2\u0159\u015a\3\2\2\2")
        buf.write("\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3")
        buf.write("\2\2\2\u015c\u014c\3\2\2\2\u015c\u0155\3\2\2\2\u015d\31")
        buf.write("\3\2\2\2\u015e\u0163\5\34\17\2\u015f\u0160\7\31\2\2\u0160")
        buf.write("\u0162\5\34\17\2\u0161\u015f\3\2\2\2\u0162\u0165\3\2\2")
        buf.write("\2\u0163\u0161\3\2\2\2\u0163\u0164\3\2\2\2\u0164\33\3")
        buf.write("\2\2\2\u0165\u0163\3\2\2\2\u0166\u0167\b\17\1\2\u0167")
        buf.write("\u0176\5 \21\2\u0168\u0176\5,\27\2\u0169\u016a\5\u00a0")
        buf.write("Q\2\u016a\u016b\5\u009cO\2\u016b\u0176\3\2\2\2\u016c\u016d")
        buf.write("\5\u00a6T\2\u016d\u016e\5\34\17\17\u016e\u0176\3\2\2\2")
        buf.write("\u016f\u0176\5\u0080A\2\u0170\u0171\7\5\2\2\u0171\u0172")
        buf.write("\5\34\17\2\u0172\u0173\7\6\2\2\u0173\u0176\3\2\2\2\u0174")
        buf.write("\u0176\5\36\20\2\u0175\u0166\3\2\2\2\u0175\u0168\3\2\2")
        buf.write("\2\u0175\u0169\3\2\2\2\u0175\u016c\3\2\2\2\u0175\u016f")
        buf.write("\3\2\2\2\u0175\u0170\3\2\2\2\u0175\u0174\3\2\2\2\u0176")
        buf.write("\u01a4\3\2\2\2\u0177\u0178\f\r\2\2\u0178\u0179\5\u00aa")
        buf.write("V\2\u0179\u017a\5\34\17\16\u017a\u01a3\3\2\2\2\u017b\u017c")
        buf.write("\f\f\2\2\u017c\u017d\5\u00acW\2\u017d\u017e\5\34\17\r")
        buf.write("\u017e\u01a3\3\2\2\2\u017f\u0180\f\13\2\2\u0180\u0181")
        buf.write("\5\u00aeX\2\u0181\u0182\5\34\17\f\u0182\u01a3\3\2\2\2")
        buf.write("\u0183\u0184\f\n\2\2\u0184\u0185\5\u00b0Y\2\u0185\u0186")
        buf.write("\5\34\17\n\u0186\u01a3\3\2\2\2\u0187\u0188\f\t\2\2\u0188")
        buf.write("\u0189\5\u00b2Z\2\u0189\u018a\5\34\17\n\u018a\u01a3\3")
        buf.write("\2\2\2\u018b\u018c\f\b\2\2\u018c\u018d\5\u00a4S\2\u018d")
        buf.write("\u018e\5\34\17\t\u018e\u01a3\3\2\2\2\u018f\u0190\f\7\2")
        buf.write("\2\u0190\u0191\5\u00b4[\2\u0191\u0192\5\34\17\b\u0192")
        buf.write("\u01a3\3\2\2\2\u0193\u0194\f\25\2\2\u0194\u0195\7Z\2\2")
        buf.write("\u0195\u01a3\5\u00a0Q\2\u0196\u0197\f\24\2\2\u0197\u0198")
        buf.write("\7Z\2\2\u0198\u01a3\5 \21\2\u0199\u019a\f\23\2\2\u019a")
        buf.write("\u01a3\5\u0086D\2\u019b\u019c\f\20\2\2\u019c\u019d\7\f")
        buf.write("\2\2\u019d\u01a3\5(\25\2\u019e\u019f\f\16\2\2\u019f\u01a3")
        buf.write("\5\u00a8U\2\u01a0\u01a1\f\3\2\2\u01a1\u01a3\7\34\2\2\u01a2")
        buf.write("\u0177\3\2\2\2\u01a2\u017b\3\2\2\2\u01a2\u017f\3\2\2\2")
        buf.write("\u01a2\u0183\3\2\2\2\u01a2\u0187\3\2\2\2\u01a2\u018b\3")
        buf.write("\2\2\2\u01a2\u018f\3\2\2\2\u01a2\u0193\3\2\2\2\u01a2\u0196")
        buf.write("\3\2\2\2\u01a2\u0199\3\2\2\2\u01a2\u019b\3\2\2\2\u01a2")
        buf.write("\u019e\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a3\u01a6\3\2\2\2")
        buf.write("\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\35\3\2")
        buf.write("\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01aa\t\4\2\2\u01a8\u01a9")
        buf.write("\7\5\2\2\u01a9\u01ab\7\6\2\2\u01aa\u01a8\3\2\2\2\u01aa")
        buf.write("\u01ab\3\2\2\2\u01ab\u01b9\3\2\2\2\u01ac\u01ad\t\5\2\2")
        buf.write("\u01ad\u01b9\5\34\17\2\u01ae\u01af\7\24\2\2\u01af\u01b9")
        buf.write("\5\32\16\2\u01b0\u01b1\7\24\2\2\u01b1\u01b2\7\5\2\2\u01b2")
        buf.write("\u01b4\5\32\16\2\u01b3\u01b5\7\31\2\2\u01b4\u01b3\3\2")
        buf.write("\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7")
        buf.write("\7\6\2\2\u01b7\u01b9\3\2\2\2\u01b8\u01a7\3\2\2\2\u01b8")
        buf.write("\u01ac\3\2\2\2\u01b8\u01ae\3\2\2\2\u01b8\u01b0\3\2\2\2")
        buf.write("\u01b9\37\3\2\2\2\u01ba\u01bb\58\35\2\u01bb\u01c7\7\5")
        buf.write("\2\2\u01bc\u01c1\5\"\22\2\u01bd\u01be\7\31\2\2\u01be\u01c0")
        buf.write("\5\"\22\2\u01bf\u01bd\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1")
        buf.write("\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c5\3\2\2\2")
        buf.write("\u01c3\u01c1\3\2\2\2\u01c4\u01c6\7\31\2\2\u01c5\u01c4")
        buf.write("\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c8\3\2\2\2\u01c7")
        buf.write("\u01bc\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2")
        buf.write("\u01c9\u01ca\7\6\2\2\u01ca!\3\2\2\2\u01cb\u01cf\5\34\17")
        buf.write("\2\u01cc\u01cf\5 \21\2\u01cd\u01cf\5\u0080A\2\u01ce\u01cb")
        buf.write("\3\2\2\2\u01ce\u01cc\3\2\2\2\u01ce\u01cd\3\2\2\2\u01cf")
        buf.write("#\3\2\2\2\u01d0\u01d1\t\6\2\2\u01d1%\3\2\2\2\u01d2\u01d3")
        buf.write("\7\32\2\2\u01d3\u01d4\5\u00a0Q\2\u01d4\u01d5\7\22\2\2")
        buf.write("\u01d5\u01d7\5(\25\2\u01d6\u01d8\7\21\2\2\u01d7\u01d6")
        buf.write("\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01e1\3\2\2\2\u01d9")
        buf.write("\u01da\7\32\2\2\u01da\u01db\5\u00a0Q\2\u01db\u01dc\7\3")
        buf.write("\2\2\u01dc\u01de\5(\25\2\u01dd\u01df\7\4\2\2\u01de\u01dd")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e1\3\2\2\2\u01e0")
        buf.write("\u01d2\3\2\2\2\u01e0\u01d9\3\2\2\2\u01e1\'\3\2\2\2\u01e2")
        buf.write("\u01e3\b\25\1\2\u01e3\u01e4\5\u00a0Q\2\u01e4\u01ed\7\5")
        buf.write("\2\2\u01e5\u01ea\5(\25\2\u01e6\u01e7\7\31\2\2\u01e7\u01e9")
        buf.write("\5(\25\2\u01e8\u01e6\3\2\2\2\u01e9\u01ec\3\2\2\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ee\3\2\2\2")
        buf.write("\u01ec\u01ea\3\2\2\2\u01ed\u01e5\3\2\2\2\u01ed\u01ee\3")
        buf.write("\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\7\6\2\2\u01f0\u0205")
        buf.write("\3\2\2\2\u01f1\u01f2\5\u00a0Q\2\u01f2\u01fb\7f\2\2\u01f3")
        buf.write("\u01f8\5(\25\2\u01f4\u01f5\7\31\2\2\u01f5\u01f7\5(\25")
        buf.write("\2\u01f6\u01f4\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fb\u01f3\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\u01fd\3\2\2\2\u01fd\u01fe\7j\2\2\u01fe\u0205\3")
        buf.write("\2\2\2\u01ff\u0201\5\u00a0Q\2\u0200\u0202\t\7\2\2\u0201")
        buf.write("\u0200\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0205\3\2\2\2")
        buf.write("\u0203\u0205\5\u009aN\2\u0204\u01e2\3\2\2\2\u0204\u01f1")
        buf.write("\3\2\2\2\u0204\u01ff\3\2\2\2\u0204\u0203\3\2\2\2\u0205")
        buf.write("\u020e\3\2\2\2\u0206\u0207\f\6\2\2\u0207\u0208\t\b\2\2")
        buf.write("\u0208\u020d\5(\25\7\u0209\u020a\f\5\2\2\u020a\u020b\7")
        buf.write("\7\2\2\u020b\u020d\7\b\2\2\u020c\u0206\3\2\2\2\u020c\u0209")
        buf.write("\3\2\2\2\u020d\u0210\3\2\2\2\u020e\u020c\3\2\2\2\u020e")
        buf.write("\u020f\3\2\2\2\u020f)\3\2\2\2\u0210\u020e\3\2\2\2\u0211")
        buf.write("\u0212\t\t\2\2\u0212\u0213\5(\25\2\u0213+\3\2\2\2\u0214")
        buf.write("\u0215\7 \2\2\u0215\u0216\5.\30\2\u0216\u0217\5\26\f\2")
        buf.write("\u0217\u0235\3\2\2\2\u0218\u0219\7!\2\2\u0219\u021a\5")
        buf.write(".\30\2\u021a\u021b\5\26\f\2\u021b\u0235\3\2\2\2\u021c")
        buf.write("\u021d\7\"\2\2\u021d\u021e\5.\30\2\u021e\u021f\5\26\f")
        buf.write("\2\u021f\u0235\3\2\2\2\u0220\u0221\7\"\2\2\u0221\u0222")
        buf.write("\5\64\33\2\u0222\u0223\5\26\f\2\u0223\u0235\3\2\2\2\u0224")
        buf.write("\u0225\5\64\33\2\u0225\u0226\t\n\2\2\u0226\u0227\5\60")
        buf.write("\31\2\u0227\u0235\3\2\2\2\u0228\u0229\5.\30\2\u0229\u022a")
        buf.write("\7#\2\2\u022a\u022b\5\60\31\2\u022b\u0235\3\2\2\2\u022c")
        buf.write("\u022d\5.\30\2\u022d\u022e\7$\2\2\u022e\u022f\5\60\31")
        buf.write("\2\u022f\u0235\3\2\2\2\u0230\u0231\5.\30\2\u0231\u0232")
        buf.write("\7&\2\2\u0232\u0233\5\60\31\2\u0233\u0235\3\2\2\2\u0234")
        buf.write("\u0214\3\2\2\2\u0234\u0218\3\2\2\2\u0234\u021c\3\2\2\2")
        buf.write("\u0234\u0220\3\2\2\2\u0234\u0224\3\2\2\2\u0234\u0228\3")
        buf.write("\2\2\2\u0234\u022c\3\2\2\2\u0234\u0230\3\2\2\2\u0235-")
        buf.write("\3\2\2\2\u0236\u0238\5\u00a0Q\2\u0237\u0239\5*\26\2\u0238")
        buf.write("\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0247\3\2\2\2")
        buf.write("\u023a\u023f\5\66\34\2\u023b\u023c\7\31\2\2\u023c\u023e")
        buf.write("\5\66\34\2\u023d\u023b\3\2\2\2\u023e\u0241\3\2\2\2\u023f")
        buf.write("\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0247\3\2\2\2")
        buf.write("\u0241\u023f\3\2\2\2\u0242\u0247\58\35\2\u0243\u0244\5")
        buf.write("8\35\2\u0244\u0245\5\u0086D\2\u0245\u0247\3\2\2\2\u0246")
        buf.write("\u0236\3\2\2\2\u0246\u023a\3\2\2\2\u0246\u0242\3\2\2\2")
        buf.write("\u0246\u0243\3\2\2\2\u0247/\3\2\2\2\u0248\u025c\5\34\17")
        buf.write("\2\u0249\u025c\5\32\16\2\u024a\u025c\5\4\3\2\u024b\u024f")
        buf.write("\7\3\2\2\u024c\u024e\5\4\3\2\u024d\u024c\3\2\2\2\u024e")
        buf.write("\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2")
        buf.write("\u0250\u0252\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u025c\7")
        buf.write("\4\2\2\u0253\u0257\7\22\2\2\u0254\u0256\5\4\3\2\u0255")
        buf.write("\u0254\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u0257\3")
        buf.write("\2\2\2\u025a\u025c\7\21\2\2\u025b\u0248\3\2\2\2\u025b")
        buf.write("\u0249\3\2\2\2\u025b\u024a\3\2\2\2\u025b\u024b\3\2\2\2")
        buf.write("\u025b\u0253\3\2\2\2\u025c\61\3\2\2\2\u025d\u025f\5(\25")
        buf.write("\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260")
        buf.write("\3\2\2\2\u0260\u0275\5\u00a0Q\2\u0261\u0263\5(\25\2\u0262")
        buf.write("\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0265\5\u00a0Q\2\u0265\u0266\7\17\2\2\u0266\u0275")
        buf.write("\3\2\2\2\u0267\u0269\5(\25\2\u0268\u0267\3\2\2\2\u0268")
        buf.write("\u0269\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026b\5\u00a0")
        buf.write("Q\2\u026b\u026c\7\36\2\2\u026c\u0275\3\2\2\2\u026d\u026f")
        buf.write("\5(\25\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u0271\5\u00a0Q\2\u0271\u0272\7\35")
        buf.write("\2\2\u0272\u0273\5\u00a0Q\2\u0273\u0275\3\2\2\2\u0274")
        buf.write("\u025e\3\2\2\2\u0274\u0262\3\2\2\2\u0274\u0268\3\2\2\2")
        buf.write("\u0274\u026e\3\2\2\2\u0275\63\3\2\2\2\u0276\u0277\5\u00a0")
        buf.write("Q\2\u0277\u0278\7\5\2\2\u0278\u027d\5\62\32\2\u0279\u027a")
        buf.write("\7\31\2\2\u027a\u027c\5\62\32\2\u027b\u0279\3\2\2\2\u027c")
        buf.write("\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e\3\2\2\2")
        buf.write("\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2\u0280\u0282\7")
        buf.write("\31\2\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282")
        buf.write("\u0283\3\2\2\2\u0283\u0285\7\6\2\2\u0284\u0286\5*\26\2")
        buf.write("\u0285\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\65\3\2")
        buf.write("\2\2\u0287\u0289\58\35\2\u0288\u028a\5*\26\2\u0289\u0288")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028d\3\2\2\2\u028b")
        buf.write("\u028d\7<\2\2\u028c\u0287\3\2\2\2\u028c\u028b\3\2\2\2")
        buf.write("\u028d\67\3\2\2\2\u028e\u0293\7V\2\2\u028f\u0290\7W\2")
        buf.write("\2\u0290\u0291\7Z\2\2\u0291\u0293\5\u00a0Q\2\u0292\u028e")
        buf.write("\3\2\2\2\u0292\u028f\3\2\2\2\u02939\3\2\2\2\u0294\u0295")
        buf.write("\7\'\2\2\u0295\u029b\5<\37\2\u0296\u0297\7\'\2\2\u0297")
        buf.write("\u029b\5> \2\u0298\u0299\7\'\2\2\u0299\u029b\5@!\2\u029a")
        buf.write("\u0294\3\2\2\2\u029a\u0296\3\2\2\2\u029a\u0298\3\2\2\2")
        buf.write("\u029b;\3\2\2\2\u029c\u029d\5P)\2\u029d\u029e\5\34\17")
        buf.write("\2\u029e\u02a3\3\2\2\2\u029f\u02a0\5P)\2\u02a0\u02a1\5")
        buf.write("\26\f\2\u02a1\u02a3\3\2\2\2\u02a2\u029c\3\2\2\2\u02a2")
        buf.write("\u029f\3\2\2\2\u02a3=\3\2\2\2\u02a4\u02a5\5P)\2\u02a5")
        buf.write("\u02a6\5\30\r\2\u02a6\u02a7\7(\2\2\u02a7\u02a8\5\34\17")
        buf.write("\2\u02a8\u02af\3\2\2\2\u02a9\u02aa\5P)\2\u02aa\u02ab\5")
        buf.write("\30\r\2\u02ab\u02ac\7(\2\2\u02ac\u02ad\5\26\f\2\u02ad")
        buf.write("\u02af\3\2\2\2\u02ae\u02a4\3\2\2\2\u02ae\u02a9\3\2\2\2")
        buf.write("\u02af?\3\2\2\2\u02b0\u02b1\5P)\2\u02b1\u02b3\5\30\r\2")
        buf.write("\u02b2\u02b4\5D#\2\u02b3\u02b2\3\2\2\2\u02b4\u02b5\3\2")
        buf.write("\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7")
        buf.write("\3\2\2\2\u02b7\u02b8\7(\2\2\u02b8\u02b9\5\34\17\2\u02b9")
        buf.write("\u02d0\3\2\2\2\u02ba\u02bb\5P)\2\u02bb\u02bd\5\30\r\2")
        buf.write("\u02bc\u02be\5D#\2\u02bd\u02bc\3\2\2\2\u02be\u02bf\3\2")
        buf.write("\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c1")
        buf.write("\3\2\2\2\u02c1\u02c2\7(\2\2\u02c2\u02c3\5\26\f\2\u02c3")
        buf.write("\u02d0\3\2\2\2\u02c4\u02c5\5P)\2\u02c5\u02c9\5\30\r\2")
        buf.write("\u02c6\u02c8\5D#\2\u02c7\u02c6\3\2\2\2\u02c8\u02cb\3\2")
        buf.write("\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc")
        buf.write("\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02cd\5B\"\2\u02cd")
        buf.write("\u02ce\5<\37\2\u02ce\u02d0\3\2\2\2\u02cf\u02b0\3\2\2\2")
        buf.write("\u02cf\u02ba\3\2\2\2\u02cf\u02c4\3\2\2\2\u02d0A\3\2\2")
        buf.write("\2\u02d1\u02d5\7)\2\2\u02d2\u02d3\7(\2\2\u02d3\u02d5\7")
        buf.write("\'\2\2\u02d4\u02d1\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5C")
        buf.write("\3\2\2\2\u02d6\u02d7\5B\"\2\u02d7\u02d8\5P)\2\u02d8\u02d9")
        buf.write("\5\30\r\2\u02d9E\3\2\2\2\u02da\u02db\7*\2\2\u02db\u02dc")
        buf.write("\5P)\2\u02dc\u02dd\5J&\2\u02ddG\3\2\2\2\u02de\u02df\7")
        buf.write("+\2\2\u02df\u02e0\5\34\17\2\u02e0\u02e1\7\22\2\2\u02e1")
        buf.write("\u02e2\5\30\r\2\u02e2\u02f2\3\2\2\2\u02e3\u02e4\5\34\17")
        buf.write("\2\u02e4\u02e5\7.\2\2\u02e5\u02e6\5\30\r\2\u02e6\u02f2")
        buf.write("\3\2\2\2\u02e7\u02e8\7,\2\2\u02e8\u02e9\7\22\2\2\u02e9")
        buf.write("\u02f2\5\30\r\2\u02ea\u02eb\7+\2\2\u02eb\u02ec\7\17\2")
        buf.write("\2\u02ec\u02ed\7\22\2\2\u02ed\u02f2\5\30\r\2\u02ee\u02ef")
        buf.write("\7\17\2\2\u02ef\u02f0\7.\2\2\u02f0\u02f2\5\30\r\2\u02f1")
        buf.write("\u02de\3\2\2\2\u02f1\u02e3\3\2\2\2\u02f1\u02e7\3\2\2\2")
        buf.write("\u02f1\u02ea\3\2\2\2\u02f1\u02ee\3\2\2\2\u02f2I\3\2\2")
        buf.write("\2\u02f3\u02f7\7\3\2\2\u02f4\u02f6\5H%\2\u02f5\u02f4\3")
        buf.write("\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7\u02f8")
        buf.write("\3\2\2\2\u02f8\u02fa\3\2\2\2\u02f9\u02f7\3\2\2\2\u02fa")
        buf.write("\u0304\7\4\2\2\u02fb\u02ff\7\22\2\2\u02fc\u02fe\5H%\2")
        buf.write("\u02fd\u02fc\3\2\2\2\u02fe\u0301\3\2\2\2\u02ff\u02fd\3")
        buf.write("\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0302\3\2\2\2\u0301\u02ff")
        buf.write("\3\2\2\2\u0302\u0304\7\21\2\2\u0303\u02f3\3\2\2\2\u0303")
        buf.write("\u02fb\3\2\2\2\u0304K\3\2\2\2\u0305\u0306\7-\2\2\u0306")
        buf.write("\u0307\5P)\2\u0307\u0308\5N(\2\u0308M\3\2\2\2\u0309\u030c")
        buf.write("\5\34\17\2\u030a\u030c\5\26\f\2\u030b\u0309\3\2\2\2\u030b")
        buf.write("\u030a\3\2\2\2\u030cO\3\2\2\2\u030d\u0313\5\34\17\2\u030e")
        buf.write("\u030f\7\5\2\2\u030f\u0310\5\34\17\2\u0310\u0311\7\6\2")
        buf.write("\2\u0311\u0313\3\2\2\2\u0312\u030d\3\2\2\2\u0312\u030e")
        buf.write("\3\2\2\2\u0313Q\3\2\2\2\u0314\u0315\7/\2\2\u0315\u0318")
        buf.write("\5\30\r\2\u0316\u0317\7\60\2\2\u0317\u0319\5T+\2\u0318")
        buf.write("\u0316\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d\5")
        buf.write("V,\2\u031d\u032d\3\2\2\2\u031e\u031f\7/\2\2\u031f\u0320")
        buf.write("\5\30\r\2\u0320\u0321\7\60\2\2\u0321\u0322\5\u00a0Q\2")
        buf.write("\u0322\u0323\5\30\r\2\u0323\u032d\3\2\2\2\u0324\u0325")
        buf.write("\7/\2\2\u0325\u0326\5\30\r\2\u0326\u0327\7\60\2\2\u0327")
        buf.write("\u0328\7\5\2\2\u0328\u0329\5\u00a0Q\2\u0329\u032a\7\6")
        buf.write("\2\2\u032a\u032b\5\30\r\2\u032b\u032d\3\2\2\2\u032c\u0314")
        buf.write("\3\2\2\2\u032c\u031e\3\2\2\2\u032c\u0324\3\2\2\2\u032d")
        buf.write("S\3\2\2\2\u032e\u032f\5\u00a0Q\2\u032f\u0330\5\30\r\2")
        buf.write("\u0330\u0337\3\2\2\2\u0331\u0332\7\5\2\2\u0332\u0333\5")
        buf.write("\u00a0Q\2\u0333\u0334\7\6\2\2\u0334\u0335\5\30\r\2\u0335")
        buf.write("\u0337\3\2\2\2\u0336\u032e\3\2\2\2\u0336\u0331\3\2\2\2")
        buf.write("\u0337U\3\2\2\2\u0338\u0339\7\61\2\2\u0339\u033a\5\26")
        buf.write("\f\2\u033aW\3\2\2\2\u033b\u033c\7\63\2\2\u033c\u033d\7")
        buf.write("\5\2\2\u033d\u033e\5\32\16\2\u033e\u033f\7\6\2\2\u033f")
        buf.write("\u0340\5\26\f\2\u0340\u0348\3\2\2\2\u0341\u0342\7\63\2")
        buf.write("\2\u0342\u0343\5\u00a0Q\2\u0343\u0344\7\62\2\2\u0344\u0345")
        buf.write("\5\34\17\2\u0345\u0346\5\26\f\2\u0346\u0348\3\2\2\2\u0347")
        buf.write("\u033b\3\2\2\2\u0347\u0341\3\2\2\2\u0348Y\3\2\2\2\u0349")
        buf.write("\u034a\7\64\2\2\u034a\u034b\5P)\2\u034b\u034c\5\26\f\2")
        buf.write("\u034c[\3\2\2\2\u034d\u0351\7\67\2\2\u034e\u0350\5\u00a0")
        buf.write("Q\2\u034f\u034e\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3\2\2\2\u0353")
        buf.write("\u0351\3\2\2\2\u0354\u035e\5\4\3\2\u0355\u0359\7\67\2")
        buf.write("\2\u0356\u0358\5\u00a0Q\2\u0357\u0356\3\2\2\2\u0358\u035b")
        buf.write("\3\2\2\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a")
        buf.write("\u035c\3\2\2\2\u035b\u0359\3\2\2\2\u035c\u035e\5\26\f")
        buf.write("\2\u035d\u034d\3\2\2\2\u035d\u0355\3\2\2\2\u035e]\3\2")
        buf.write("\2\2\u035f\u0361\5\6\4\2\u0360\u0362\5h\65\2\u0361\u0360")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0395\3\2\2\2\u0363")
        buf.write("\u0365\5f\64\2\u0364\u0363\3\2\2\2\u0365\u0368\3\2\2\2")
        buf.write("\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369\3")
        buf.write("\2\2\2\u0368\u0366\3\2\2\2\u0369\u036b\5\u00a0Q\2\u036a")
        buf.write("\u036c\5*\26\2\u036b\u036a\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u036e\3\2\2\2\u036d\u036f\5h\65\2\u036e\u036d\3")
        buf.write("\2\2\2\u036e\u036f\3\2\2\2\u036f\u0395\3\2\2\2\u0370\u0372")
        buf.write("\5f\64\2\u0371\u0370\3\2\2\2\u0372\u0375\3\2\2\2\u0373")
        buf.write("\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2\2")
        buf.write("\u0375\u0373\3\2\2\2\u0376\u0378\5\u00a0Q\2\u0377\u0379")
        buf.write("\5*\26\2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037c\5\26\f\2\u037b\u037d\5h\65")
        buf.write("\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0395")
        buf.write("\3\2\2\2\u037e\u0380\5f\64\2\u037f\u037e\3\2\2\2\u0380")
        buf.write("\u0383\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382\u0384\3\2\2\2\u0383\u0381\3\2\2\2\u0384\u0385\5")
        buf.write("\u00a0Q\2\u0385\u0389\7\5\2\2\u0386\u0388\5\62\32\2\u0387")
        buf.write("\u0386\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2")
        buf.write("\u0389\u038a\3\2\2\2\u038a\u038c\3\2\2\2\u038b\u0389\3")
        buf.write("\2\2\2\u038c\u038e\7\6\2\2\u038d\u038f\5*\26\2\u038e\u038d")
        buf.write("\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0392\5\26\f\2\u0391\u0393\5h\65\2\u0392\u0391\3\2\2")
        buf.write("\2\u0392\u0393\3\2\2\2\u0393\u0395\3\2\2\2\u0394\u035f")
        buf.write("\3\2\2\2\u0394\u0366\3\2\2\2\u0394\u0373\3\2\2\2\u0394")
        buf.write("\u0381\3\2\2\2\u0395_\3\2\2\2\u0396\u0397\78\2\2\u0397")
        buf.write("\u0399\5\u00a0Q\2\u0398\u039a\5b\62\2\u0399\u0398\3\2")
        buf.write("\2\2\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u039d")
        buf.write("\5d\63\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a2\7\3\2\2\u039f\u03a1\5^\60\2")
        buf.write("\u03a0\u039f\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0\3")
        buf.write("\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\3\2\2\2\u03a4\u03a2")
        buf.write("\3\2\2\2\u03a5\u03a6\7\4\2\2\u03a6\u03b9\3\2\2\2\u03a7")
        buf.write("\u03a8\78\2\2\u03a8\u03aa\5\u00a0Q\2\u03a9\u03ab\5b\62")
        buf.write("\2\u03aa\u03a9\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad")
        buf.write("\3\2\2\2\u03ac\u03ae\5d\63\2\u03ad\u03ac\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b3\7\22\2")
        buf.write("\2\u03b0\u03b2\5^\60\2\u03b1\u03b0\3\2\2\2\u03b2\u03b5")
        buf.write("\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4")
        buf.write("\u03b6\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b6\u03b7\7\21\2")
        buf.write("\2\u03b7\u03b9\3\2\2\2\u03b8\u0396\3\2\2\2\u03b8\u03a7")
        buf.write("\3\2\2\2\u03b9a\3\2\2\2\u03ba\u03bc\79\2\2\u03bb\u03bd")
        buf.write("\5\u00a0Q\2\u03bc\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03cc\3\2\2\2")
        buf.write("\u03c0\u03c1\7\5\2\2\u03c1\u03c6\5\u00a0Q\2\u03c2\u03c3")
        buf.write("\7\31\2\2\u03c3\u03c5\5\u00a0Q\2\u03c4\u03c2\3\2\2\2\u03c5")
        buf.write("\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2")
        buf.write("\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03ca\7")
        buf.write("\6\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03ba\3\2\2\2\u03cb\u03c0")
        buf.write("\3\2\2\2\u03ccc\3\2\2\2\u03cd\u03cf\7:\2\2\u03ce\u03d0")
        buf.write("\5\u00a0Q\2\u03cf\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1")
        buf.write("\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03e2\3\2\2\2")
        buf.write("\u03d3\u03d4\7;\2\2\u03d4\u03e2\5\u00a0Q\2\u03d5\u03d6")
        buf.write("\7;\2\2\u03d6\u03d7\7\5\2\2\u03d7\u03dc\5\u00a0Q\2\u03d8")
        buf.write("\u03d9\7\31\2\2\u03d9\u03db\5\u00a0Q\2\u03da\u03d8\3\2")
        buf.write("\2\2\u03db\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd")
        buf.write("\3\2\2\2\u03dd\u03df\3\2\2\2\u03de\u03dc\3\2\2\2\u03df")
        buf.write("\u03e0\7\6\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03cd\3\2\2\2")
        buf.write("\u03e1\u03d3\3\2\2\2\u03e1\u03d5\3\2\2\2\u03e2e\3\2\2")
        buf.write("\2\u03e3\u03e8\5\u00a0Q\2\u03e4\u03e8\7 \2\2\u03e5\u03e8")
        buf.write("\7!\2\2\u03e6\u03e8\7\"\2\2\u03e7\u03e3\3\2\2\2\u03e7")
        buf.write("\u03e4\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e6\3\2\2\2")
        buf.write("\u03e8g\3\2\2\2\u03e9\u03ea\t\13\2\2\u03eai\3\2\2\2\u03eb")
        buf.write("\u03ec\7A\2\2\u03ec\u03ee\5\u00a0Q\2\u03ed\u03ef\5b\62")
        buf.write("\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f1")
        buf.write("\3\2\2\2\u03f0\u03f2\5d\63\2\u03f1\u03f0\3\2\2\2\u03f1")
        buf.write("\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f7\7\3\2\2")
        buf.write("\u03f4\u03f6\5r:\2\u03f5\u03f4\3\2\2\2\u03f6\u03f9\3\2")
        buf.write("\2\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa")
        buf.write("\3\2\2\2\u03f9\u03f7\3\2\2\2\u03fa\u03fb\7\4\2\2\u03fb")
        buf.write("\u040e\3\2\2\2\u03fc\u03fd\7A\2\2\u03fd\u03ff\5\u00a0")
        buf.write("Q\2\u03fe\u0400\5b\62\2\u03ff\u03fe\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400\u0402\3\2\2\2\u0401\u0403\5d\63\2\u0402")
        buf.write("\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0408\7\22\2\2\u0405\u0407\5r:\2\u0406\u0405\3")
        buf.write("\2\2\2\u0407\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409")
        buf.write("\3\2\2\2\u0409\u040b\3\2\2\2\u040a\u0408\3\2\2\2\u040b")
        buf.write("\u040c\7\21\2\2\u040c\u040e\3\2\2\2\u040d\u03eb\3\2\2")
        buf.write("\2\u040d\u03fc\3\2\2\2\u040ek\3\2\2\2\u040f\u0410\7@\2")
        buf.write("\2\u0410\u0412\5\u00a0Q\2\u0411\u0413\5b\62\2\u0412\u0411")
        buf.write("\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2\u0414")
        buf.write("\u0416\5d\63\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u0417\3\2\2\2\u0417\u0418\7\3\2\2\u0418\u0419\5")
        buf.write("t;\2\u0419\u041a\7\4\2\2\u041a\u042d\3\2\2\2\u041b\u041c")
        buf.write("\7@\2\2\u041c\u041e\5\u00a0Q\2\u041d\u041f\5b\62\2\u041e")
        buf.write("\u041d\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\3\2\2\2")
        buf.write("\u0420\u0422\5d\63\2\u0421\u0420\3\2\2\2\u0421\u0422\3")
        buf.write("\2\2\2\u0422\u0423\3\2\2\2\u0423\u0427\7\22\2\2\u0424")
        buf.write("\u0426\5t;\2\u0425\u0424\3\2\2\2\u0426\u0429\3\2\2\2\u0427")
        buf.write("\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a\3\2\2\2")
        buf.write("\u0429\u0427\3\2\2\2\u042a\u042b\7\21\2\2\u042b\u042d")
        buf.write("\3\2\2\2\u042c\u040f\3\2\2\2\u042c\u041b\3\2\2\2\u042d")
        buf.write("m\3\2\2\2\u042e\u042f\7?\2\2\u042f\u0431\5\u00a0Q\2\u0430")
        buf.write("\u0432\5b\62\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2\2")
        buf.write("\u0432\u0434\3\2\2\2\u0433\u0435\5d\63\2\u0434\u0433\3")
        buf.write("\2\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u043a")
        buf.write("\7\3\2\2\u0437\u0439\5z>\2\u0438\u0437\3\2\2\2\u0439\u043c")
        buf.write("\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u043d\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u043e\7\4\2\2")
        buf.write("\u043e\u0451\3\2\2\2\u043f\u0440\7?\2\2\u0440\u0442\5")
        buf.write("\u00a0Q\2\u0441\u0443\5b\62\2\u0442\u0441\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u0446\5d\63\2")
        buf.write("\u0445\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\3")
        buf.write("\2\2\2\u0447\u044b\7\22\2\2\u0448\u044a\5z>\2\u0449\u0448")
        buf.write("\3\2\2\2\u044a\u044d\3\2\2\2\u044b\u0449\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u044e\3\2\2\2\u044d\u044b\3\2\2\2")
        buf.write("\u044e\u044f\7\21\2\2\u044f\u0451\3\2\2\2\u0450\u042e")
        buf.write("\3\2\2\2\u0450\u043f\3\2\2\2\u0451o\3\2\2\2\u0452\u0454")
        buf.write("\7>\2\2\u0453\u0455\t\f\2\2\u0454\u0453\3\2\2\2\u0454")
        buf.write("\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0458\5\u00a0")
        buf.write("Q\2\u0457\u0459\5b\62\2\u0458\u0457\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u045c\5d\63\2\u045b")
        buf.write("\u045a\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d\3\2\2\2")
        buf.write("\u045d\u0461\7\3\2\2\u045e\u0460\5|?\2\u045f\u045e\3\2")
        buf.write("\2\2\u0460\u0463\3\2\2\2\u0461\u045f\3\2\2\2\u0461\u0462")
        buf.write("\3\2\2\2\u0462\u0464\3\2\2\2\u0463\u0461\3\2\2\2\u0464")
        buf.write("\u0465\7\4\2\2\u0465\u047b\3\2\2\2\u0466\u0468\7>\2\2")
        buf.write("\u0467\u0469\t\f\2\2\u0468\u0467\3\2\2\2\u0468\u0469\3")
        buf.write("\2\2\2\u0469\u046a\3\2\2\2\u046a\u046c\5\u00a0Q\2\u046b")
        buf.write("\u046d\5b\62\2\u046c\u046b\3\2\2\2\u046c\u046d\3\2\2\2")
        buf.write("\u046d\u046f\3\2\2\2\u046e\u0470\5d\63\2\u046f\u046e\3")
        buf.write("\2\2\2\u046f\u0470\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0475")
        buf.write("\7\22\2\2\u0472\u0474\5|?\2\u0473\u0472\3\2\2\2\u0474")
        buf.write("\u0477\3\2\2\2\u0475\u0473\3\2\2\2\u0475\u0476\3\2\2\2")
        buf.write("\u0476\u0478\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u0479\7")
        buf.write("\21\2\2\u0479\u047b\3\2\2\2\u047a\u0452\3\2\2\2\u047a")
        buf.write("\u0466\3\2\2\2\u047bq\3\2\2\2\u047c\u047f\5t;\2\u047d")
        buf.write("\u047f\5z>\2\u047e\u047c\3\2\2\2\u047e\u047d\3\2\2\2\u047f")
        buf.write("s\3\2\2\2\u0480\u0481\5v<\2\u0481\u0482\7\22\2\2\u0482")
        buf.write("\u0484\5(\25\2\u0483\u0485\5h\65\2\u0484\u0483\3\2\2\2")
        buf.write("\u0484\u0485\3\2\2\2\u0485u\3\2\2\2\u0486\u0487\5\u00a0")
        buf.write("Q\2\u0487\u0489\7\5\2\2\u0488\u048a\5x=\2\u0489\u0488")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048b\3\2\2\2\u048b")
        buf.write("\u048d\7\6\2\2\u048c\u048e\7\35\2\2\u048d\u048c\3\2\2")
        buf.write("\2\u048d\u048e\3\2\2\2\u048ew\3\2\2\2\u048f\u0490\5(\25")
        buf.write("\2\u0490\u0497\5\u00a0Q\2\u0491\u0492\7\31\2\2\u0492\u0493")
        buf.write("\5(\25\2\u0493\u0494\5\u00a0Q\2\u0494\u0496\3\2\2\2\u0495")
        buf.write("\u0491\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2")
        buf.write("\u0497\u0498\3\2\2\2\u0498y\3\2\2\2\u0499\u0497\3\2\2")
        buf.write("\2\u049a\u049b\5\u00a0Q\2\u049b\u049c\7\35\2\2\u049c\u049d")
        buf.write("\7\22\2\2\u049d\u049f\5(\25\2\u049e\u04a0\5h\65\2\u049f")
        buf.write("\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0{\3\2\2\2\u04a1")
        buf.write("\u04a3\5\u00a0Q\2\u04a2\u04a4\5h\65\2\u04a3\u04a2\3\2")
        buf.write("\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04ac\3\2\2\2\u04a5\u04a6")
        buf.write("\5\u00a0Q\2\u04a6\u04a7\7\22\2\2\u04a7\u04a9\5~@\2\u04a8")
        buf.write("\u04aa\5h\65\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2")
        buf.write("\u04aa\u04ac\3\2\2\2\u04ab\u04a1\3\2\2\2\u04ab\u04a5\3")
        buf.write("\2\2\2\u04ac}\3\2\2\2\u04ad\u04b3\5\u0082B\2\u04ae\u04af")
        buf.write("\5\u00a0Q\2\u04af\u04b0\7\33\2\2\u04b0\u04b1\5\u00a0Q")
        buf.write("\2\u04b1\u04b3\3\2\2\2\u04b2\u04ad\3\2\2\2\u04b2\u04ae")
        buf.write("\3\2\2\2\u04b3\177\3\2\2\2\u04b4\u04be\5\u0082B\2\u04b5")
        buf.write("\u04be\5\u009cO\2\u04b6\u04be\5\u009eP\2\u04b7\u04be\5")
        buf.write("\u00a0Q\2\u04b8\u04be\58\35\2\u04b9\u04be\5\u0092J\2\u04ba")
        buf.write("\u04be\5\u008cG\2\u04bb\u04be\5\u0086D\2\u04bc\u04be\5")
        buf.write("\u00a2R\2\u04bd\u04b4\3\2\2\2\u04bd\u04b5\3\2\2\2\u04bd")
        buf.write("\u04b6\3\2\2\2\u04bd\u04b7\3\2\2\2\u04bd\u04b8\3\2\2\2")
        buf.write("\u04bd\u04b9\3\2\2\2\u04bd\u04ba\3\2\2\2\u04bd\u04bb\3")
        buf.write("\2\2\2\u04bd\u04bc\3\2\2\2\u04be\u0081\3\2\2\2\u04bf\u04c4")
        buf.write("\5\u0096L\2\u04c0\u04c4\5\u0098M\2\u04c1\u04c4\5\u009a")
        buf.write("N\2\u04c2\u04c4\5\u0084C\2\u04c3\u04bf\3\2\2\2\u04c3\u04c0")
        buf.write("\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c2\3\2\2\2\u04c4")
        buf.write("\u0083\3\2\2\2\u04c5\u04c6\t\r\2\2\u04c6\u0085\3\2\2\2")
        buf.write("\u04c7\u04c8\7\7\2\2\u04c8\u04cf\5\u0088E\2\u04c9\u04cb")
        buf.write("\7\31\2\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04cc\u04ce\5\u0088E\2\u04cd\u04ca\3\2")
        buf.write("\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0")
        buf.write("\3\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2")
        buf.write("\u04d3\7\b\2\2\u04d3\u04e2\3\2\2\2\u04d4\u04d5\7\t\2\2")
        buf.write("\u04d5\u04dc\5\u0088E\2\u04d6\u04d8\7\31\2\2\u04d7\u04d6")
        buf.write("\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9")
        buf.write("\u04db\5\u0088E\2\u04da\u04d7\3\2\2\2\u04db\u04de\3\2")
        buf.write("\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df")
        buf.write("\3\2\2\2\u04de\u04dc\3\2\2\2\u04df\u04e0\7\t\2\2\u04e0")
        buf.write("\u04e2\3\2\2\2\u04e1\u04c7\3\2\2\2\u04e1\u04d4\3\2\2\2")
        buf.write("\u04e2\u0087\3\2\2\2\u04e3\u04e6\5\u008aF\2\u04e4\u04e6")
        buf.write("\5\u0092J\2\u04e5\u04e3\3\2\2\2\u04e5\u04e4\3\2\2\2\u04e6")
        buf.write("\u0515\3\2\2\2\u04e7\u0515\7\22\2\2\u04e8\u04e9\7%\2\2")
        buf.write("\u04e9\u0515\5\u008aF\2\u04ea\u04eb\7\22\2\2\u04eb\u04ec")
        buf.write("\7\22\2\2\u04ec\u0515\5\u008aF\2\u04ed\u04ee\7\22\2\2")
        buf.write("\u04ee\u04f0\5\u008aF\2\u04ef\u04f1\7\22\2\2\u04f0\u04ef")
        buf.write("\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u0515\3\2\2\2\u04f2")
        buf.write("\u04f3\7\22\2\2\u04f3\u04f4\5\u008aF\2\u04f4\u04f5\7\22")
        buf.write("\2\2\u04f5\u04f6\5\u008aF\2\u04f6\u0515\3\2\2\2\u04f7")
        buf.write("\u04f8\5\u008aF\2\u04f8\u04f9\7%\2\2\u04f9\u0515\3\2\2")
        buf.write("\2\u04fa\u04fb\5\u008aF\2\u04fb\u04fd\7\22\2\2\u04fc\u04fe")
        buf.write("\7\22\2\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe")
        buf.write("\u0515\3\2\2\2\u04ff\u0500\5\u008aF\2\u0500\u0501\7%\2")
        buf.write("\2\u0501\u0502\5\u008aF\2\u0502\u0515\3\2\2\2\u0503\u0504")
        buf.write("\5\u008aF\2\u0504\u0505\7\22\2\2\u0505\u0506\7\22\2\2")
        buf.write("\u0506\u0507\5\u008aF\2\u0507\u0515\3\2\2\2\u0508\u0509")
        buf.write("\5\u008aF\2\u0509\u050a\7\22\2\2\u050a\u050c\5\u008aF")
        buf.write("\2\u050b\u050d\7\22\2\2\u050c\u050b\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u0515\3\2\2\2\u050e\u050f\5\u008aF\2\u050f")
        buf.write("\u0510\7\22\2\2\u0510\u0511\5\u008aF\2\u0511\u0512\7\22")
        buf.write("\2\2\u0512\u0513\5\u008aF\2\u0513\u0515\3\2\2\2\u0514")
        buf.write("\u04e5\3\2\2\2\u0514\u04e7\3\2\2\2\u0514\u04e8\3\2\2\2")
        buf.write("\u0514\u04ea\3\2\2\2\u0514\u04ed\3\2\2\2\u0514\u04f2\3")
        buf.write("\2\2\2\u0514\u04f7\3\2\2\2\u0514\u04fa\3\2\2\2\u0514\u04ff")
        buf.write("\3\2\2\2\u0514\u0503\3\2\2\2\u0514\u0508\3\2\2\2\u0514")
        buf.write("\u050e\3\2\2\2\u0515\u0089\3\2\2\2\u0516\u051c\5\u00a0")
        buf.write("Q\2\u0517\u0519\t\16\2\2\u0518\u0517\3\2\2\2\u0518\u0519")
        buf.write("\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051c\5\u009aN\2\u051b")
        buf.write("\u0516\3\2\2\2\u051b\u0518\3\2\2\2\u051c\u008b\3\2\2\2")
        buf.write("\u051d\u051f\7\3\2\2\u051e\u0520\5\u008eH\2\u051f\u051e")
        buf.write("\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0525\3\2\2\2\u0521")
        buf.write("\u0522\7\31\2\2\u0522\u0524\5\u008eH\2\u0523\u0521\3\2")
        buf.write("\2\2\u0524\u0527\3\2\2\2\u0525\u0523\3\2\2\2\u0525\u0526")
        buf.write("\3\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2\u0528")
        buf.write("\u052a\7\31\2\2\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2")
        buf.write("\2\u052a\u052b\3\2\2\2\u052b\u052c\7\4\2\2\u052c\u008d")
        buf.write("\3\2\2\2\u052d\u052e\5\u0090I\2\u052e\u052f\7\22\2\2\u052f")
        buf.write("\u0530\5\u0094K\2\u0530\u008f\3\2\2\2\u0531\u0535\5\u009a")
        buf.write("N\2\u0532\u0535\5\u00a0Q\2\u0533\u0535\5\u009cO\2\u0534")
        buf.write("\u0531\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0533\3\2\2\2")
        buf.write("\u0535\u0091\3\2\2\2\u0536\u0538\7\7\2\2\u0537\u0539\5")
        buf.write("\u0094K\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539")
        buf.write("\u053e\3\2\2\2\u053a\u053b\7\31\2\2\u053b\u053d\5\u0094")
        buf.write("K\2\u053c\u053a\3\2\2\2\u053d\u0540\3\2\2\2\u053e\u053c")
        buf.write("\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0542\3\2\2\2\u0540")
        buf.write("\u053e\3\2\2\2\u0541\u0543\7\31\2\2\u0542\u0541\3\2\2")
        buf.write("\2\u0542\u0543\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0545")
        buf.write("\7\b\2\2\u0545\u0093\3\2\2\2\u0546\u054a\5\u0080A\2\u0547")
        buf.write("\u054a\5\34\17\2\u0548\u054a\5\4\3\2\u0549\u0546\3\2\2")
        buf.write("\2\u0549\u0547\3\2\2\2\u0549\u0548\3\2\2\2\u054a\u0095")
        buf.write("\3\2\2\2\u054b\u054c\t\17\2\2\u054c\u054d\5\u00a0Q\2\u054d")
        buf.write("\u0097\3\2\2\2\u054e\u054f\t\20\2\2\u054f\u0099\3\2\2")
        buf.write("\2\u0550\u0551\7I\2\2\u0551\u009b\3\2\2\2\u0552\u0558")
        buf.write("\7P\2\2\u0553\u0558\7L\2\2\u0554\u0558\7M\2\2\u0555\u0558")
        buf.write("\7N\2\2\u0556\u0558\7O\2\2\u0557\u0552\3\2\2\2\u0557\u0553")
        buf.write("\3\2\2\2\u0557\u0554\3\2\2\2\u0557\u0555\3\2\2\2\u0557")
        buf.write("\u0556\3\2\2\2\u0558\u009d\3\2\2\2\u0559\u055a\t\21\2")
        buf.write("\2\u055a\u009f\3\2\2\2\u055b\u055f\5$\23\2\u055c\u055f")
        buf.write("\7X\2\2\u055d\u055f\7W\2\2\u055e\u055b\3\2\2\2\u055e\u055c")
        buf.write("\3\2\2\2\u055e\u055d\3\2\2\2\u055f\u00a1\3\2\2\2\u0560")
        buf.write("\u0562\7Y\2\2\u0561\u0563\7I\2\2\u0562\u0561\3\2\2\2\u0562")
        buf.write("\u0563\3\2\2\2\u0563\u0567\3\2\2\2\u0564\u0565\7Y\2\2")
        buf.write("\u0565\u0567\5\u00a0Q\2\u0566\u0560\3\2\2\2\u0566\u0564")
        buf.write("\3\2\2\2\u0567\u00a3\3\2\2\2\u0568\u0569\t\16\2\2\u0569")
        buf.write("\u00a5\3\2\2\2\u056a\u056b\t\22\2\2\u056b\u00a7\3\2\2")
        buf.write("\2\u056c\u056d\t\23\2\2\u056d\u00a9\3\2\2\2\u056e\u056f")
        buf.write("\t\24\2\2\u056f\u00ab\3\2\2\2\u0570\u0571\t\25\2\2\u0571")
        buf.write("\u00ad\3\2\2\2\u0572\u0576\t\26\2\2\u0573\u0576\t\27\2")
        buf.write("\2\u0574\u0576\t\30\2\2\u0575\u0572\3\2\2\2\u0575\u0573")
        buf.write("\3\2\2\2\u0575\u0574\3\2\2\2\u0576\u00af\3\2\2\2\u0577")
        buf.write("\u0578\t\31\2\2\u0578\u00b1\3\2\2\2\u0579\u057a\t\32\2")
        buf.write("\2\u057a\u00b3\3\2\2\2\u057b\u057c\t\33\2\2\u057c\u00b5")
        buf.write("\3\2\2\2\u00ba\u00b9\u00c1\u00c4\u00c8\u00cb\u00d2\u00d5")
        buf.write("\u00da\u00dd\u00e2\u00e5\u00e9\u00ed\u00f1\u00f3\u00f7")
        buf.write("\u00fe\u0108\u010f\u0115\u011a\u011d\u0120\u0133\u013c")
        buf.write("\u0146\u014a\u0150\u0155\u015a\u015c\u0163\u0175\u01a2")
        buf.write("\u01a4\u01aa\u01b4\u01b8\u01c1\u01c5\u01c7\u01ce\u01d7")
        buf.write("\u01de\u01e0\u01ea\u01ed\u01f8\u01fb\u0201\u0204\u020c")
        buf.write("\u020e\u0234\u0238\u023f\u0246\u024f\u0257\u025b\u025e")
        buf.write("\u0262\u0268\u026e\u0274\u027d\u0281\u0285\u0289\u028c")
        buf.write("\u0292\u029a\u02a2\u02ae\u02b5\u02bf\u02c9\u02cf\u02d4")
        buf.write("\u02f1\u02f7\u02ff\u0303\u030b\u0312\u031a\u032c\u0336")
        buf.write("\u0347\u0351\u0359\u035d\u0361\u0366\u036b\u036e\u0373")
        buf.write("\u0378\u037c\u0381\u0389\u038e\u0392\u0394\u0399\u039c")
        buf.write("\u03a2\u03aa\u03ad\u03b3\u03b8\u03be\u03c6\u03cb\u03d1")
        buf.write("\u03dc\u03e1\u03e7\u03ee\u03f1\u03f7\u03ff\u0402\u0408")
        buf.write("\u040d\u0412\u0415\u041e\u0421\u0427\u042c\u0431\u0434")
        buf.write("\u043a\u0442\u0445\u044b\u0450\u0454\u0458\u045b\u0461")
        buf.write("\u0468\u046c\u046f\u0475\u047a\u047e\u0484\u0489\u048d")
        buf.write("\u0497\u049f\u04a3\u04a9\u04ab\u04b2\u04bd\u04c3\u04ca")
        buf.write("\u04cf\u04d7\u04dc\u04e1\u04e5\u04f0\u04fd\u050c\u0514")
        buf.write("\u0518\u051b\u051f\u0525\u0529\u0534\u0538\u053e\u0542")
        buf.write("\u0549\u0557\u055e\u0562\u0566\u0575")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'using'", 
                     "'expose'", "'*'", "'^'", "'end'", "<INVALID>", "'pass'", 
                     "'return'", "'yield'", "'await'", "'break'", "'throw'", 
                     "<INVALID>", "'type'", "'|'", "'&'", "'?'", "'**'", 
                     "'^^'", "'val'", "'var'", "'def'", "'='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'if'", "'else'", "'elseif'", 
                     "'switch'", "'case'", "'default'", "'match'", "<INVALID>", 
                     "'try'", "'catch'", "'final'", "'in'", "'for'", "'while'", 
                     "'macro'", "'with'", "'let'", "'class'", "'extend'", 
                     "'act'", "'~'", "'$'", "'@'", "'enumerate'", "'structure'", 
                     "'interface'", "'trait'", "'+'", "'-'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*^'", "'/^'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\'", "'true'", 
                     "'false'", "'null'", "'nothing'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'#'", "'.'", "'_'", "'#!'", "'///'", 
                     "'%%%'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'<='", "'<'", "<INVALID>", 
                     "<INVALID>", "'>='", "'>'", "'++'", "'+='", "'\u2295'", 
                     "'--'", "'-='", "'\u00D7'", "'\u2297'", "'\u2299'", 
                     "'//@'", "'//'", "'/@'", "'/'", "'\u00F7'", "'%%'", 
                     "'%'", "'==='", "'=!='", "'=='", "'~~'", "'~='", "<INVALID>", 
                     "<INVALID>", "'!!'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':?'", "'@@@'", "'@@'", "'@='", "'`'", "'\u00B4'", 
                     "'''", "'...'", "'\u22C5'", "'\u221A'", "'\u215F'", 
                     "'\u00B0'", "'\u1D40'", "'\u1D34'", "'\u00A7'", "'\u00B6'", 
                     "'\u00A4'", "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "Using", "Expose", 
                      "Times", "Power", "End", "Colon", "Pass", "Return", 
                      "Yield", "Await", "Break", "Throw", "Comma", "Type", 
                      "BitOr", "BitAnd", "Nullable", "Keyword", "BaseInput", 
                      "Val", "Var", "Def", "Set", "Flexible", "Name", "Delay", 
                      "If", "Else", "ElseIf", "Switch", "Case", "Default", 
                      "Match", "Rule", "Try", "Catch", "Final", "In", "For", 
                      "While", "Macro", "With", "Let", "Class", "Extend", 
                      "Act", "Tilde", "Suffix", "Prefix", "Enumerate", "Structure", 
                      "Interface", "Trait", "Plus", "Minus", "Decimal", 
                      "DecimalBad", "Binary", "Octal", "Hexadecimal", "Integer", 
                      "Exponent", "Base", "StringEscapeBlock", "StringEscapeSingle", 
                      "StringLiteralBlock", "StringLiteralSingle", "StringEmpty", 
                      "Escape", "True", "False", "Null", "Nothing", "Symbols", 
                      "TrueName", "Symbol", "Sharp", "Dot", "Underline", 
                      "Shebang", "Remark", "Comment", "LineComment", "PartComment", 
                      "NewLine", "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "PlusTo", "LogicXor", "Decrease", "MinusFrom", 
                      "Multiply", "Kronecker", "TensorProduct", "MapAll", 
                      "Remainder", "Map", "Divide", "Quotient", "Output", 
                      "Mod", "Equivalent", "NotEquivalent", "Equal", "Concat", 
                      "Destruct", "LogicOr", "LogicAnd", "DoubleBang", "NotEqual", 
                      "BitNot", "LogicNot", "Elvis", "Curry", "Apply", "LetAssign", 
                      "Quote", "Acute", "Quotation", "Ellipsis", "DOT", 
                      "Surd", "Reciprocal", "Degree", "Transpose", "Hermitian", 
                      "Section", "Pilcrow", "Currency", "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_exportStatment = 8
    RULE_idTuples = 9
    RULE_blockStatement = 10
    RULE_blockNonEnd = 11
    RULE_expressionStatement = 12
    RULE_expression = 13
    RULE_controlFlow = 14
    RULE_functionCall = 15
    RULE_arguments = 16
    RULE_flowController = 17
    RULE_typeStatement = 18
    RULE_typeExpression = 19
    RULE_typeSuffix = 20
    RULE_assignStatment = 21
    RULE_assignLHS = 22
    RULE_assignRHS = 23
    RULE_parameter = 24
    RULE_functionPattern = 25
    RULE_maybeSymbol = 26
    RULE_symbols = 27
    RULE_ifStatment = 28
    RULE_ifShort = 29
    RULE_ifSingle = 30
    RULE_ifNested = 31
    RULE_elif = 32
    RULE_elseIf = 33
    RULE_switchStatment = 34
    RULE_caseBody = 35
    RULE_switchBody = 36
    RULE_matchStatment = 37
    RULE_matchBody = 38
    RULE_condition = 39
    RULE_tryStatement = 40
    RULE_tryCatch = 41
    RULE_tryFinal = 42
    RULE_forStatement = 43
    RULE_whileStatment = 44
    RULE_letStatment = 45
    RULE_classExpression = 46
    RULE_classStatement = 47
    RULE_classExtend = 48
    RULE_classTrait = 49
    RULE_classController = 50
    RULE_classEos = 51
    RULE_traitStatement = 52
    RULE_interfaceStatement = 53
    RULE_structureStatement = 54
    RULE_enumerateStatement = 55
    RULE_traitExpression = 56
    RULE_interfaceExpression = 57
    RULE_interfaceFunction = 58
    RULE_interfaceParameters = 59
    RULE_structureExpression = 60
    RULE_enumerateExpression = 61
    RULE_enumerateNumber = 62
    RULE_data = 63
    RULE_number = 64
    RULE_byteInput = 65
    RULE_index = 66
    RULE_indexValid = 67
    RULE_indexTerm = 68
    RULE_dict = 69
    RULE_keyValue = 70
    RULE_keyValid = 71
    RULE_list = 72
    RULE_element = 73
    RULE_complex = 74
    RULE_decimal = 75
    RULE_integer = 76
    RULE_string = 77
    RULE_special = 78
    RULE_symbol = 79
    RULE_solt = 80
    RULE_add_ops = 81
    RULE_pre_ops = 82
    RULE_pst_ops = 83
    RULE_bit_ops = 84
    RULE_lgk_ops = 85
    RULE_cpr_ops = 86
    RULE_pow_ops = 87
    RULE_mul_ops = 88
    RULE_list_ops = 89

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "exportStatment", 
                   "idTuples", "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "controlFlow", "functionCall", "arguments", 
                   "flowController", "typeStatement", "typeExpression", 
                   "typeSuffix", "assignStatment", "assignLHS", "assignRHS", 
                   "parameter", "functionPattern", "maybeSymbol", "symbols", 
                   "ifStatment", "ifShort", "ifSingle", "ifNested", "elif", 
                   "elseIf", "switchStatment", "caseBody", "switchBody", 
                   "matchStatment", "matchBody", "condition", "tryStatement", 
                   "tryCatch", "tryFinal", "forStatement", "whileStatment", 
                   "letStatment", "classExpression", "classStatement", "classExtend", 
                   "classTrait", "classController", "classEos", "traitStatement", 
                   "interfaceStatement", "structureStatement", "enumerateStatement", 
                   "traitExpression", "interfaceExpression", "interfaceFunction", 
                   "interfaceParameters", "structureExpression", "enumerateExpression", 
                   "enumerateNumber", "data", "number", "byteInput", "index", 
                   "indexValid", "indexTerm", "dict", "keyValue", "keyValid", 
                   "list", "element", "complex", "decimal", "integer", "string", 
                   "special", "symbol", "solt", "add_ops", "pre_ops", "pst_ops", 
                   "bit_ops", "lgk_ops", "cpr_ops", "pow_ops", "mul_ops", 
                   "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    Using=11
    Expose=12
    Times=13
    Power=14
    End=15
    Colon=16
    Pass=17
    Return=18
    Yield=19
    Await=20
    Break=21
    Throw=22
    Comma=23
    Type=24
    BitOr=25
    BitAnd=26
    Nullable=27
    Keyword=28
    BaseInput=29
    Val=30
    Var=31
    Def=32
    Set=33
    Flexible=34
    Name=35
    Delay=36
    If=37
    Else=38
    ElseIf=39
    Switch=40
    Case=41
    Default=42
    Match=43
    Rule=44
    Try=45
    Catch=46
    Final=47
    In=48
    For=49
    While=50
    Macro=51
    With=52
    Let=53
    Class=54
    Extend=55
    Act=56
    Tilde=57
    Suffix=58
    Prefix=59
    Enumerate=60
    Structure=61
    Interface=62
    Trait=63
    Plus=64
    Minus=65
    Decimal=66
    DecimalBad=67
    Binary=68
    Octal=69
    Hexadecimal=70
    Integer=71
    Exponent=72
    Base=73
    StringEscapeBlock=74
    StringEscapeSingle=75
    StringLiteralBlock=76
    StringLiteralSingle=77
    StringEmpty=78
    Escape=79
    True=80
    False=81
    Null=82
    Nothing=83
    Symbols=84
    TrueName=85
    Symbol=86
    Sharp=87
    Dot=88
    Underline=89
    Shebang=90
    Remark=91
    Comment=92
    LineComment=93
    PartComment=94
    NewLine=95
    WhiteSpace=96
    Import=97
    LeftShift=98
    LessEqual=99
    Less=100
    Export=101
    RightShift=102
    GraterEqual=103
    Grater=104
    Increase=105
    PlusTo=106
    LogicXor=107
    Decrease=108
    MinusFrom=109
    Multiply=110
    Kronecker=111
    TensorProduct=112
    MapAll=113
    Remainder=114
    Map=115
    Divide=116
    Quotient=117
    Output=118
    Mod=119
    Equivalent=120
    NotEquivalent=121
    Equal=122
    Concat=123
    Destruct=124
    LogicOr=125
    LogicAnd=126
    DoubleBang=127
    NotEqual=128
    BitNot=129
    LogicNot=130
    Elvis=131
    Curry=132
    Apply=133
    LetAssign=134
    Quote=135
    Acute=136
    Quotation=137
    Ellipsis=138
    DOT=139
    Surd=140
    Reciprocal=141
    Degree=142
    Transpose=143
    Hermitian=144
    Section=145
    Pilcrow=146
    Currency=147
    Element=148

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                self.state = 180
                self.statement()
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 186
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def exportStatment(self):
            return self.getTypedRuleContext(NyarParser.ExportStatmentContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def letStatment(self):
            return self.getTypedRuleContext(NyarParser.LetStatmentContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def switchStatment(self):
            return self.getTypedRuleContext(NyarParser.SwitchStatmentContext,0)


        def ifStatment(self):
            return self.getTypedRuleContext(NyarParser.IfStatmentContext,0)


        def matchStatment(self):
            return self.getTypedRuleContext(NyarParser.MatchStatmentContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(NyarParser.ForStatementContext,0)


        def whileStatment(self):
            return self.getTypedRuleContext(NyarParser.WhileStatmentContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def interfaceStatement(self):
            return self.getTypedRuleContext(NyarParser.InterfaceStatementContext,0)


        def structureStatement(self):
            return self.getTypedRuleContext(NyarParser.StructureStatementContext,0)


        def enumerateStatement(self):
            return self.getTypedRuleContext(NyarParser.EnumerateStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Using]:
                    self.state = 189
                    self.importStatement()
                    pass
                elif token in [NyarParser.Expose]:
                    self.state = 190
                    self.exportStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 193
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Let]:
                    self.state = 196
                    self.letStatment()
                    pass
                elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Val, NyarParser.Var, NyarParser.Def, NyarParser.Suffix, NyarParser.Symbols, NyarParser.TrueName, NyarParser.Symbol]:
                    self.state = 197
                    self.assignStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 208
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Switch]:
                    self.state = 203
                    self.switchStatment()
                    pass
                elif token in [NyarParser.If]:
                    self.state = 204
                    self.ifStatment()
                    pass
                elif token in [NyarParser.Match]:
                    self.state = 205
                    self.matchStatment()
                    pass
                elif token in [NyarParser.For]:
                    self.state = 206
                    self.forStatement()
                    pass
                elif token in [NyarParser.While]:
                    self.state = 207
                    self.whileStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 210
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Type]:
                    self.state = 213
                    self.typeStatement()
                    pass
                elif token in [NyarParser.Trait]:
                    self.state = 214
                    self.traitStatement()
                    pass
                elif token in [NyarParser.Class]:
                    self.state = 215
                    self.classStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 218
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Interface]:
                    self.state = 221
                    self.interfaceStatement()
                    pass
                elif token in [NyarParser.Structure]:
                    self.state = 222
                    self.structureStatement()
                    pass
                elif token in [NyarParser.Enumerate]:
                    self.state = 223
                    self.enumerateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 226
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 229
                self.tryStatement()
                self.state = 231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 230
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 233
                self.expression(0)
                self.state = 235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 234
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 237
                self.data()
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 238
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleModifyContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.mod = None # Token
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)
        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleModify" ):
                listener.enterModuleModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleModify" ):
                listener.exitModuleModify(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleModify" ):
                return visitor.visitModuleModify(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.match(NyarParser.Using)
                self.state = 250
                localctx.name = self.moduleName()
                self.state = 252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 251
                    localctx.mod = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Power):
                        localctx.mod = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.match(NyarParser.Using)
                self.state = 255
                localctx.name = self.moduleName()
                self.state = 256
                self.match(NyarParser.As)
                self.state = 257
                self.symbol()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 259
                self.match(NyarParser.Using)
                self.state = 260
                localctx.name = self.moduleName()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 261
                    self.match(NyarParser.With)


                self.state = 264
                self.symbol()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 266
                self.match(NyarParser.Using)
                self.state = 267
                localctx.name = self.moduleName()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With or _la==NyarParser.Dot:
                    self.state = 268
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.With or _la==NyarParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 271
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 273
                self.match(NyarParser.Using)
                self.state = 274
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        self._la = 0 # Token type
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 277
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Suffix:
                    self.state = 279
                    self.moduleLanguage()


                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Prefix:
                    self.state = 282
                    self.moduleScope()


                self.state = 285
                self.symbols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(NyarParser.Suffix)
            self.state = 289
            self.symbol()
            self.state = 290
            self.match(NyarParser.Divide)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(NyarParser.Prefix)
            self.state = 293
            self.symbol()
            self.state = 294
            self.match(NyarParser.Divide)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Expose(self):
            return self.getToken(NyarParser.Expose, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_exportStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatment" ):
                listener.enterExportStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatment" ):
                listener.exitExportStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportStatment" ):
                return visitor.visitExportStatment(self)
            else:
                return visitor.visitChildren(self)




    def exportStatment(self):

        localctx = NyarParser.ExportStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exportStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(NyarParser.Expose)
            self.state = 297
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(NyarParser.T__0)
            self.state = 300
            self.symbol()
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 301
                self.match(NyarParser.Comma)
                self.state = 302
                self.symbol()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.match(NyarParser.T__0)
                self.state = 314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 311
                    self.statement()
                    self.state = 316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 317
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.match(NyarParser.Colon)
                self.state = 319
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.match(NyarParser.Colon)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 321
                    self.statement()
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 327
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.match(NyarParser.T__0)
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 331
                    self.statement()
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 337
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Colon:
                    self.state = 338
                    self.match(NyarParser.Colon)


                self.state = 342 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 341
                        self.statement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 344 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.expression(0)
            self.state = 353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 349
                    self.match(NyarParser.Comma)
                    self.state = 350
                    self.expression(0) 
                self.state = 355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # SymbolContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 357
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 358
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 359
                localctx.left = self.symbol()
                self.state = 360
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 362
                localctx.op = self.pre_ops()
                self.state = 363
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 365
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 366
                self.match(NyarParser.T__2)
                self.state = 367
                self.expression(0)
                self.state = 368
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 370
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 418
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 416
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 373
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 374
                        localctx.op = self.bit_ops()
                        self.state = 375
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 377
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 378
                        localctx.op = self.lgk_ops()
                        self.state = 379
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 381
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 382
                        localctx.op = self.cpr_ops()
                        self.state = 383
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 385
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 386
                        localctx.op = self.pow_ops()
                        self.state = 387
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 389
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 390
                        localctx.op = self.mul_ops()
                        self.state = 391
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 393
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 394
                        localctx.op = self.add_ops()
                        self.state = 395
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 397
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 398
                        localctx.op = self.list_ops()
                        self.state = 399
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 401
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 402
                        self.match(NyarParser.Dot)
                        self.state = 403
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 404
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 405
                        self.match(NyarParser.Dot)
                        self.state = 406
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 407
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 408
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 409
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 410
                        self.match(NyarParser.As)
                        self.state = 411
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 412
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 413
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 414
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 415
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 422
                    self.match(NyarParser.T__2)
                    self.state = 423
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 427
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                localctx.state = self.match(NyarParser.Return)
                self.state = 429
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                localctx.state = self.match(NyarParser.Return)
                self.state = 431
                self.match(NyarParser.T__2)
                self.state = 432
                self.expressionStatement()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 433
                    self.match(NyarParser.Comma)


                self.state = 436
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.symbols()
            self.state = 441
            self.match(NyarParser.T__2)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                self.state = 442
                self.arguments()
                self.state = 447
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 443
                        self.match(NyarParser.Comma)
                        self.state = 444
                        self.arguments() 
                    self.state = 449
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 450
                    self.match(NyarParser.Comma)




            self.state = 455
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_arguments)
        try:
            self.state = 460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeStatement)
        try:
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(NyarParser.Type)
                self.state = 465
                self.symbol()
                self.state = 466
                self.match(NyarParser.Colon)
                self.state = 467
                self.typeExpression(0)
                self.state = 469
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 468
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(NyarParser.Type)
                self.state = 472
                self.symbol()
                self.state = 473
                self.match(NyarParser.T__0)
                self.state = 474
                self.typeExpression(0)
                self.state = 476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 475
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 481
                self.symbol()
                self.state = 482
                self.match(NyarParser.T__2)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (NyarParser.Integer - 71)) | (1 << (NyarParser.TrueName - 71)) | (1 << (NyarParser.Symbol - 71)))) != 0):
                    self.state = 483
                    self.typeExpression(0)
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 484
                        self.match(NyarParser.Comma)
                        self.state = 485
                        self.typeExpression(0)
                        self.state = 490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 493
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 495
                self.symbol()
                self.state = 496
                self.match(NyarParser.Less)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (NyarParser.Integer - 71)) | (1 << (NyarParser.TrueName - 71)) | (1 << (NyarParser.Symbol - 71)))) != 0):
                    self.state = 497
                    self.typeExpression(0)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 498
                        self.match(NyarParser.Comma)
                        self.state = 499
                        self.typeExpression(0)
                        self.state = 504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 507
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 509
                self.symbol()
                self.state = 511
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 510
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 513
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 522
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 516
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 517
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 518
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 519
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 520
                        self.match(NyarParser.T__4)
                        self.state = 521
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            _la = self._input.LA(1)
            if not(_la==NyarParser.Act or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 528
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def functionPattern(self):
            return self.getTypedRuleContext(NyarParser.FunctionPatternContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.match(NyarParser.Val)
                self.state = 531
                self.assignLHS()
                self.state = 532
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self.match(NyarParser.Var)
                self.state = 535
                self.assignLHS()
                self.state = 536
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 538
                self.match(NyarParser.Def)
                self.state = 539
                self.assignLHS()
                self.state = 540
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 542
                self.match(NyarParser.Def)
                self.state = 543
                self.functionPattern()
                self.state = 544
                self.blockStatement()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 546
                self.functionPattern()
                self.state = 547
                _la = self._input.LA(1)
                if not(_la==NyarParser.Set or _la==NyarParser.Delay):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 548
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 550
                self.assignLHS()
                self.state = 551
                self.match(NyarParser.Set)
                self.state = 552
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 554
                self.assignLHS()
                self.state = 555
                self.match(NyarParser.Flexible)
                self.state = 556
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 558
                self.assignLHS()
                self.state = 559
                self.match(NyarParser.Delay)
                self.state = 560
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.symbol()
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 565
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.maybeSymbol()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 569
                    self.match(NyarParser.Comma)
                    self.state = 570
                    self.maybeSymbol()
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.symbols()
                self.state = 578
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignRHS" ):
                listener.enterAssignRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignRHS" ):
                listener.exitAssignRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignRHS" ):
                return visitor.visitAssignRHS(self)
            else:
                return visitor.visitChildren(self)




    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.expressionStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 584
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 585
                self.match(NyarParser.T__0)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 586
                    self.statement()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 592
                self.match(NyarParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 593
                self.match(NyarParser.Colon)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 594
                    self.statement()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keyword(self):
            return self.getToken(NyarParser.Keyword, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_parameter)
        try:
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 603
                    self.typeExpression(0)


                self.state = 606
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 607
                    self.typeExpression(0)


                self.state = 610
                self.symbol()
                self.state = 611
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.typeExpression(0)


                self.state = 616
                self.symbol()
                self.state = 617
                self.match(NyarParser.Keyword)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 619
                    self.typeExpression(0)


                self.state = 622
                self.symbol()
                self.state = 623
                self.match(NyarParser.Nullable)
                self.state = 624
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_functionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPattern" ):
                listener.enterFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPattern" ):
                listener.exitFunctionPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionPattern" ):
                return visitor.visitFunctionPattern(self)
            else:
                return visitor.visitChildren(self)




    def functionPattern(self):

        localctx = NyarParser.FunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.symbol()
            self.state = 629
            self.match(NyarParser.T__2)
            self.state = 630
            self.parameter()
            self.state = 635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 631
                    self.match(NyarParser.Comma)
                    self.state = 632
                    self.parameter() 
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 638
                self.match(NyarParser.Comma)


            self.state = 641
            self.match(NyarParser.T__3)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 642
                self.typeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_maybeSymbol)
        self._la = 0 # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols, NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.symbols()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 646
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Suffix]:
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.match(NyarParser.Suffix)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_symbols

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MaybeMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Symbols(self):
            return self.getToken(NyarParser.Symbols, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeMethod" ):
                listener.enterMaybeMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeMethod" ):
                listener.exitMaybeMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeMethod" ):
                return visitor.visitMaybeMethod(self)
            else:
                return visitor.visitChildren(self)


    class MustMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMustMethod" ):
                listener.enterMustMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMustMethod" ):
                listener.exitMustMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMustMethod" ):
                return visitor.visitMustMethod(self)
            else:
                return visitor.visitChildren(self)



    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_symbols)
        try:
            self.state = 656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols]:
                localctx = NyarParser.MaybeMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.match(NyarParser.Symbols)
                pass
            elif token in [NyarParser.TrueName]:
                localctx = NyarParser.MustMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(NyarParser.TrueName)
                self.state = 654
                self.match(NyarParser.Dot)
                self.state = 655
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def ifSingle(self):
            return self.getTypedRuleContext(NyarParser.IfSingleContext,0)


        def ifNested(self):
            return self.getTypedRuleContext(NyarParser.IfNestedContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatment" ):
                listener.enterIfStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatment" ):
                listener.exitIfStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatment" ):
                return visitor.visitIfStatment(self)
            else:
                return visitor.visitChildren(self)




    def ifStatment(self):

        localctx = NyarParser.IfStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ifStatment)
        try:
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(NyarParser.If)
                self.state = 659
                self.ifShort()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.match(NyarParser.If)
                self.state = 661
                self.ifSingle()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.match(NyarParser.If)
                self.state = 663
                self.ifNested()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfShortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfShort" ):
                listener.enterIfShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfShort" ):
                listener.exitIfShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfShort" ):
                return visitor.visitIfShort(self)
            else:
                return visitor.visitChildren(self)




    def ifShort(self):

        localctx = NyarParser.IfShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ifShort)
        try:
            self.state = 672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.condition()
                self.state = 667
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.condition()
                self.state = 670
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfSingleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)




    def ifSingle(self):

        localctx = NyarParser.IfSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifSingle)
        try:
            self.state = 684
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.condition()
                self.state = 675
                self.blockNonEnd()
                self.state = 676
                self.match(NyarParser.Else)
                self.state = 677
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 679
                self.condition()
                self.state = 680
                self.blockNonEnd()
                self.state = 681
                self.match(NyarParser.Else)
                self.state = 682
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNestedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifNested

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)




    def ifNested(self):

        localctx = NyarParser.IfNestedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ifNested)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 686
                self.condition()
                self.state = 687
                self.blockNonEnd()
                self.state = 689 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 688
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 691 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 693
                self.match(NyarParser.Else)
                self.state = 694
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.condition()
                self.state = 697
                self.blockNonEnd()
                self.state = 699 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 698
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 701 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 703
                self.match(NyarParser.Else)
                self.state = 704
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.condition()
                self.state = 707
                self.blockNonEnd()
                self.state = 711
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 708
                        self.elseIf() 
                    self.state = 713
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 714
                self.elif()
                self.state = 715
                self.ifShort()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(NyarParser.ElseIf, 0)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif" ):
                listener.enterElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif" ):
                listener.exitElif(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif" ):
                return visitor.visitElif(self)
            else:
                return visitor.visitChildren(self)




    def elif(self):

        localctx = NyarParser.ElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elif)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.ElseIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.match(NyarParser.ElseIf)
                pass
            elif token in [NyarParser.Else]:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.match(NyarParser.Else)
                self.state = 721
                self.match(NyarParser.If)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elseIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.elif()
            self.state = 725
            self.condition()
            self.state = 726
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_switchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatment" ):
                listener.enterSwitchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatment" ):
                listener.exitSwitchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatment" ):
                return visitor.visitSwitchStatment(self)
            else:
                return visitor.visitChildren(self)




    def switchStatment(self):

        localctx = NyarParser.SwitchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(NyarParser.Switch)
            self.state = 729
            self.condition()
            self.state = 730
            self.switchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_caseBody)
        try:
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(NyarParser.Case)
                self.state = 733
                self.expression(0)
                self.state = 734
                self.match(NyarParser.Colon)
                self.state = 735
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.expression(0)
                self.state = 738
                self.match(NyarParser.Rule)
                self.state = 739
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.match(NyarParser.Default)
                self.state = 742
                self.match(NyarParser.Colon)
                self.state = 743
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                self.match(NyarParser.Case)
                self.state = 745
                self.match(NyarParser.Times)
                self.state = 746
                self.match(NyarParser.Colon)
                self.state = 747
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 748
                self.match(NyarParser.Times)
                self.state = 749
                self.match(NyarParser.Rule)
                self.state = 750
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.match(NyarParser.T__0)
                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 754
                    self.caseBody()
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 760
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(NyarParser.Colon)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                    self.state = 762
                    self.caseBody()
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 768
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match(self):
            return self.getToken(NyarParser.Match, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatment" ):
                listener.enterMatchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatment" ):
                listener.exitMatchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatment" ):
                return visitor.visitMatchStatment(self)
            else:
                return visitor.visitChildren(self)




    def matchStatment(self):

        localctx = NyarParser.MatchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(NyarParser.Match)
            self.state = 772
            self.condition()
            self.state = 773
            self.matchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_matchBody)
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_condition)
        try:
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 779
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 780
                self.match(NyarParser.T__2)
                self.state = 781
                self.expression(0)
                self.state = 782
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockNonEnd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.BlockNonEndContext)
            else:
                return self.getTypedRuleContext(NyarParser.BlockNonEndContext,i)


        def tryFinal(self):
            return self.getTypedRuleContext(NyarParser.TryFinalContext,0)


        def Catch(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Catch)
            else:
                return self.getToken(NyarParser.Catch, i)

        def tryCatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TryCatchContext)
            else:
                return self.getTypedRuleContext(NyarParser.TryCatchContext,i)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.match(NyarParser.Try)
                self.state = 787
                self.blockNonEnd()
                self.state = 790 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 788
                    self.match(NyarParser.Catch)
                    self.state = 789
                    self.tryCatch()
                    self.state = 792 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Catch):
                        break

                self.state = 794
                self.tryFinal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 796
                self.match(NyarParser.Try)
                self.state = 797
                self.blockNonEnd()
                self.state = 798
                self.match(NyarParser.Catch)
                self.state = 799
                self.symbol()
                self.state = 800
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(NyarParser.Try)
                self.state = 803
                self.blockNonEnd()
                self.state = 804
                self.match(NyarParser.Catch)
                self.state = 805
                self.match(NyarParser.T__2)
                self.state = 806
                self.symbol()
                self.state = 807
                self.match(NyarParser.T__3)
                self.state = 808
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatch" ):
                return visitor.visitTryCatch(self)
            else:
                return visitor.visitChildren(self)




    def tryCatch(self):

        localctx = NyarParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tryCatch)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.symbol()
                self.state = 813
                self.blockNonEnd()
                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(NyarParser.T__2)
                self.state = 816
                self.symbol()
                self.state = 817
                self.match(NyarParser.T__3)
                self.state = 818
                self.blockNonEnd()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryFinalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryFinal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryFinal" ):
                listener.enterTryFinal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryFinal" ):
                listener.exitTryFinal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryFinal" ):
                return visitor.visitTryFinal(self)
            else:
                return visitor.visitChildren(self)




    def tryFinal(self):

        localctx = NyarParser.TryFinalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tryFinal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(NyarParser.Final)
            self.state = 823
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_forStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)



    def forStatement(self):

        localctx = NyarParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        try:
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(NyarParser.For)
                self.state = 826
                self.match(NyarParser.T__2)
                self.state = 827
                self.expressionStatement()
                self.state = 828
                self.match(NyarParser.T__3)
                self.state = 829
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.match(NyarParser.For)
                self.state = 832
                self.symbol()
                self.state = 833
                self.match(NyarParser.In)
                self.state = 834
                self.expression(0)
                self.state = 835
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(NyarParser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_whileStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatment" ):
                listener.enterWhileStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatment" ):
                listener.exitWhileStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatment" ):
                return visitor.visitWhileStatment(self)
            else:
                return visitor.visitChildren(self)




    def whileStatment(self):

        localctx = NyarParser.WhileStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whileStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(NyarParser.While)
            self.state = 840
            self.condition()
            self.state = 841
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_letStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatment" ):
                listener.enterLetStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatment" ):
                listener.exitLetStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatment" ):
                return visitor.visitLetStatment(self)
            else:
                return visitor.visitChildren(self)




    def letStatment(self):

        localctx = NyarParser.LetStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_letStatment)
        self._la = 0 # Token type
        try:
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.match(NyarParser.Let)
                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 844
                        self.symbol() 
                    self.state = 849
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 850
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.match(NyarParser.Let)
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 852
                    self.symbol()
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 858
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classController(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassControllerContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassControllerContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.emptyStatement()
                self.state = 863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self.classEos()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 865
                        self.classController() 
                    self.state = 870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 871
                self.symbol()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 872
                    self.typeSuffix()


                self.state = 876
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 875
                    self.classEos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 878
                        self.classController() 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 884
                self.symbol()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 885
                    self.typeSuffix()


                self.state = 888
                self.blockStatement()
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.classEos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 895
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 892
                        self.classController() 
                    self.state = 897
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 898
                self.symbol()
                self.state = 899
                self.match(NyarParser.T__2)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (NyarParser.Integer - 71)) | (1 << (NyarParser.TrueName - 71)) | (1 << (NyarParser.Symbol - 71)))) != 0):
                    self.state = 900
                    self.parameter()
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 906
                self.match(NyarParser.T__3)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 907
                    self.typeSuffix()


                self.state = 910
                self.blockStatement()
                self.state = 912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.classEos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(NyarParser.Class)
                self.state = 917
                self.symbol()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 918
                    self.classExtend()


                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 921
                    self.classTrait()


                self.state = 924
                self.match(NyarParser.T__0)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 925
                    self.classExpression()
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 931
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(NyarParser.Class)
                self.state = 934
                self.symbol()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 935
                    self.classExtend()


                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 938
                    self.classTrait()


                self.state = 941
                self.match(NyarParser.Colon)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 942
                    self.classExpression()
                    self.state = 947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 948
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extend(self):
            return self.getToken(NyarParser.Extend, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtend" ):
                listener.enterClassExtend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtend" ):
                listener.exitClassExtend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtend" ):
                return visitor.visitClassExtend(self)
            else:
                return visitor.visitChildren(self)




    def classExtend(self):

        localctx = NyarParser.ClassExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classExtend)
        self._la = 0 # Token type
        try:
            self.state = 969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extend]:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.match(NyarParser.Extend)
                self.state = 954 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 953
                    self.symbol()
                    self.state = 956 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.match(NyarParser.T__2)
                self.state = 959
                self.symbol()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 960
                    self.match(NyarParser.Comma)
                    self.state = 961
                    self.symbol()
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTraitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classTrait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTrait" ):
                listener.enterClassTrait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTrait" ):
                listener.exitClassTrait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTrait" ):
                return visitor.visitClassTrait(self)
            else:
                return visitor.visitChildren(self)




    def classTrait(self):

        localctx = NyarParser.ClassTraitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classTrait)
        self._la = 0 # Token type
        try:
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.match(NyarParser.Act)
                self.state = 973 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 972
                    self.symbol()
                    self.state = 975 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 977
                self.match(NyarParser.Tilde)
                self.state = 978
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(NyarParser.Tilde)
                self.state = 980
                self.match(NyarParser.T__2)
                self.state = 981
                self.symbol()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 982
                    self.match(NyarParser.Comma)
                    self.state = 983
                    self.symbol()
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 989
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassController" ):
                listener.enterClassController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassController" ):
                listener.exitClassController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassController" ):
                return visitor.visitClassController(self)
            else:
                return visitor.visitChildren(self)




    def classController(self):

        localctx = NyarParser.ClassControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classController)
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.symbol()
                pass
            elif token in [NyarParser.Val]:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.match(NyarParser.Val)
                pass
            elif token in [NyarParser.Var]:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(NyarParser.Var)
                pass
            elif token in [NyarParser.Def]:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self.match(NyarParser.Def)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassEosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classEos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEos" ):
                listener.enterClassEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEos" ):
                listener.exitClassEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassEos" ):
                return visitor.visitClassEos(self)
            else:
                return visitor.visitChildren(self)




    def classEos(self):

        localctx = NyarParser.ClassEosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classEos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            _la = self._input.LA(1)
            if not(_la==NyarParser.Semicolon or _la==NyarParser.Comma):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def traitExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TraitExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TraitExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.match(NyarParser.Trait)
                self.state = 1002
                self.symbol()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1003
                    self.classExtend()


                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1006
                    self.classTrait()


                self.state = 1009
                self.match(NyarParser.T__0)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1010
                    self.traitExpression()
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1016
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1018
                self.match(NyarParser.Trait)
                self.state = 1019
                self.symbol()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1020
                    self.classExtend()


                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1023
                    self.classTrait()


                self.state = 1026
                self.match(NyarParser.Colon)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1027
                    self.traitExpression()
                    self.state = 1032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1033
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Interface(self):
            return self.getToken(NyarParser.Interface, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def interfaceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.InterfaceExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.InterfaceExpressionContext,i)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceStatement" ):
                listener.enterInterfaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceStatement" ):
                listener.exitInterfaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceStatement" ):
                return visitor.visitInterfaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def interfaceStatement(self):

        localctx = NyarParser.InterfaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_interfaceStatement)
        self._la = 0 # Token type
        try:
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1037
                self.match(NyarParser.Interface)
                self.state = 1038
                self.symbol()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1039
                    self.classExtend()


                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1042
                    self.classTrait()


                self.state = 1045
                self.match(NyarParser.T__0)
                self.state = 1046
                self.interfaceExpression()
                self.state = 1047
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.match(NyarParser.Interface)
                self.state = 1050
                self.symbol()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1051
                    self.classExtend()


                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1054
                    self.classTrait()


                self.state = 1057
                self.match(NyarParser.Colon)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1058
                    self.interfaceExpression()
                    self.state = 1063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1064
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Structure(self):
            return self.getToken(NyarParser.Structure, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def structureExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StructureExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.StructureExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_structureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureStatement" ):
                listener.enterStructureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureStatement" ):
                listener.exitStructureStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureStatement" ):
                return visitor.visitStructureStatement(self)
            else:
                return visitor.visitChildren(self)




    def structureStatement(self):

        localctx = NyarParser.StructureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_structureStatement)
        self._la = 0 # Token type
        try:
            self.state = 1102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.match(NyarParser.Structure)
                self.state = 1069
                self.symbol()
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1070
                    self.classExtend()


                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1073
                    self.classTrait()


                self.state = 1076
                self.match(NyarParser.T__0)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1077
                    self.structureExpression()
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1083
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1085
                self.match(NyarParser.Structure)
                self.state = 1086
                self.symbol()
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1087
                    self.classExtend()


                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1090
                    self.classTrait()


                self.state = 1093
                self.match(NyarParser.Colon)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1094
                    self.structureExpression()
                    self.state = 1099
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1100
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def Enumerate(self):
            return self.getToken(NyarParser.Enumerate, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def enumerateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.EnumerateExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.EnumerateExpressionContext,i)


        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_enumerateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateStatement" ):
                listener.enterEnumerateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateStatement" ):
                listener.exitEnumerateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateStatement" ):
                return visitor.visitEnumerateStatement(self)
            else:
                return visitor.visitChildren(self)




    def enumerateStatement(self):

        localctx = NyarParser.EnumerateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_enumerateStatement)
        self._la = 0 # Token type
        try:
            self.state = 1144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1104
                self.match(NyarParser.Enumerate)
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Times or _la==NyarParser.Plus:
                    self.state = 1105
                    localctx.e = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Plus):
                        localctx.e = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1108
                self.symbol()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1109
                    self.classExtend()


                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1112
                    self.classTrait()


                self.state = 1115
                self.match(NyarParser.T__0)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1116
                    self.enumerateExpression()
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1122
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.match(NyarParser.Enumerate)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Times or _la==NyarParser.Plus:
                    self.state = 1125
                    localctx.e = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Plus):
                        localctx.e = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1128
                self.symbol()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1129
                    self.classExtend()


                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1132
                    self.classTrait()


                self.state = 1135
                self.match(NyarParser.Colon)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1136
                    self.enumerateExpression()
                    self.state = 1141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1142
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceExpression(self):
            return self.getTypedRuleContext(NyarParser.InterfaceExpressionContext,0)


        def structureExpression(self):
            return self.getTypedRuleContext(NyarParser.StructureExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitExpression" ):
                listener.enterTraitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitExpression" ):
                listener.exitTraitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitExpression" ):
                return visitor.visitTraitExpression(self)
            else:
                return visitor.visitChildren(self)




    def traitExpression(self):

        localctx = NyarParser.TraitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_traitExpression)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.interfaceExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.structureExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceFunction(self):
            return self.getTypedRuleContext(NyarParser.InterfaceFunctionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_interfaceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceExpression" ):
                listener.enterInterfaceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceExpression" ):
                listener.exitInterfaceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceExpression" ):
                return visitor.visitInterfaceExpression(self)
            else:
                return visitor.visitChildren(self)




    def interfaceExpression(self):

        localctx = NyarParser.InterfaceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_interfaceExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.interfaceFunction()
            self.state = 1151
            self.match(NyarParser.Colon)
            self.state = 1152
            self.typeExpression(0)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                self.state = 1153
                self.classEos()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def interfaceParameters(self):
            return self.getTypedRuleContext(NyarParser.InterfaceParametersContext,0)


        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceFunction" ):
                listener.enterInterfaceFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceFunction" ):
                listener.exitInterfaceFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceFunction" ):
                return visitor.visitInterfaceFunction(self)
            else:
                return visitor.visitChildren(self)




    def interfaceFunction(self):

        localctx = NyarParser.InterfaceFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_interfaceFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.symbol()
            self.state = 1157
            self.match(NyarParser.T__2)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (NyarParser.Integer - 71)) | (1 << (NyarParser.TrueName - 71)) | (1 << (NyarParser.Symbol - 71)))) != 0):
                self.state = 1158
                self.interfaceParameters()


            self.state = 1161
            self.match(NyarParser.T__3)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Nullable:
                self.state = 1162
                localctx.e = self.match(NyarParser.Nullable)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceParameters" ):
                listener.enterInterfaceParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceParameters" ):
                listener.exitInterfaceParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceParameters" ):
                return visitor.visitInterfaceParameters(self)
            else:
                return visitor.visitChildren(self)




    def interfaceParameters(self):

        localctx = NyarParser.InterfaceParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_interfaceParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.typeExpression(0)
            self.state = 1166
            self.symbol()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 1167
                self.match(NyarParser.Comma)
                self.state = 1168
                self.typeExpression(0)
                self.state = 1169
                self.symbol()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_structureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureExpression" ):
                listener.enterStructureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureExpression" ):
                listener.exitStructureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureExpression" ):
                return visitor.visitStructureExpression(self)
            else:
                return visitor.visitChildren(self)




    def structureExpression(self):

        localctx = NyarParser.StructureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_structureExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.symbol()
            self.state = 1177
            localctx.e = self.match(NyarParser.Nullable)
            self.state = 1178
            self.match(NyarParser.Colon)
            self.state = 1179
            self.typeExpression(0)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                self.state = 1180
                self.classEos()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enumerateNumber(self):
            return self.getTypedRuleContext(NyarParser.EnumerateNumberContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_enumerateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateExpression" ):
                listener.enterEnumerateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateExpression" ):
                listener.exitEnumerateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateExpression" ):
                return visitor.visitEnumerateExpression(self)
            else:
                return visitor.visitChildren(self)




    def enumerateExpression(self):

        localctx = NyarParser.EnumerateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enumerateExpression)
        self._la = 0 # Token type
        try:
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1183
                self.symbol()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                    self.state = 1184
                    self.classEos()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.symbol()
                self.state = 1188
                self.match(NyarParser.Colon)
                self.state = 1189
                self.enumerateNumber()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                    self.state = 1190
                    self.classEos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_enumerateNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateNumber" ):
                listener.enterEnumerateNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateNumber" ):
                listener.exitEnumerateNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateNumber" ):
                return visitor.visitEnumerateNumber(self)
            else:
                return visitor.visitChildren(self)




    def enumerateNumber(self):

        localctx = NyarParser.EnumerateNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_enumerateNumber)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Decimal, NyarParser.DecimalBad, NyarParser.Binary, NyarParser.Octal, NyarParser.Hexadecimal, NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.number()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.symbol()
                self.state = 1197
                self.match(NyarParser.BitOr)
                self.state = 1198
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_data)
        try:
            self.state = 1211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1204
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1205
                self.symbol()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1206
                self.symbols()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1207
                self.list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1208
                self.dict()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1209
                self.index()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1210
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def byteInput(self):
            return self.getTypedRuleContext(NyarParser.ByteInputContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_number)
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1213
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1214
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1215
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1216
                self.byteInput()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteInputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_byteInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteInput" ):
                listener.enterByteInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteInput" ):
                listener.exitByteInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteInput" ):
                return visitor.visitByteInput(self)
            else:
                return visitor.visitChildren(self)




    def byteInput(self):

        localctx = NyarParser.ByteInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_byteInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (NyarParser.Binary - 68)) | (1 << (NyarParser.Octal - 68)) | (1 << (NyarParser.Hexadecimal - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 1247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.match(NyarParser.T__4)
                self.state = 1222
                self.indexValid()
                self.state = 1229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__4) | (1 << NyarParser.Colon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Comma) | (1 << NyarParser.Name))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)))) != 0):
                    self.state = 1224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1223
                        self.match(NyarParser.Comma)


                    self.state = 1226
                    self.indexValid()
                    self.state = 1231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1232
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1234
                self.match(NyarParser.T__6)
                self.state = 1235
                self.indexValid()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__4) | (1 << NyarParser.Colon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Comma) | (1 << NyarParser.Name))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)))) != 0):
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1236
                        self.match(NyarParser.Comma)


                    self.state = 1239
                    self.indexValid()
                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1245
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Index000Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex000" ):
                listener.enterIndex000(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex000" ):
                listener.exitIndex000(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex000" ):
                return visitor.visitIndex000(self)
            else:
                return visitor.visitChildren(self)


    class Index011Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)
        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex011" ):
                listener.enterIndex011(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex011" ):
                listener.exitIndex011(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex011" ):
                return visitor.visitIndex011(self)
            else:
                return visitor.visitChildren(self)


    class Index110Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex110" ):
                listener.enterIndex110(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex110" ):
                listener.exitIndex110(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex110" ):
                return visitor.visitIndex110(self)
            else:
                return visitor.visitChildren(self)


    class Index001Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex001" ):
                listener.enterIndex001(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex001" ):
                listener.exitIndex001(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex001" ):
                return visitor.visitIndex001(self)
            else:
                return visitor.visitChildren(self)


    class Index100Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex100" ):
                listener.enterIndex100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex100" ):
                listener.exitIndex100(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex100" ):
                return visitor.visitIndex100(self)
            else:
                return visitor.visitChildren(self)


    class Index111Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex111" ):
                listener.enterIndex111(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex111" ):
                listener.exitIndex111(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex111" ):
                return visitor.visitIndex111(self)
            else:
                return visitor.visitChildren(self)


    class Index010Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)
        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex010" ):
                listener.enterIndex010(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex010" ):
                listener.exitIndex010(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex010" ):
                return visitor.visitIndex010(self)
            else:
                return visitor.visitChildren(self)


    class IndexTakeContext(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTake" ):
                listener.enterIndexTake(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTake" ):
                listener.exitIndexTake(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexTake" ):
                return visitor.visitIndexTake(self)
            else:
                return visitor.visitChildren(self)


    class Index101Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex101" ):
                listener.enterIndex101(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex101" ):
                listener.exitIndex101(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex101" ):
                return visitor.visitIndex101(self)
            else:
                return visitor.visitChildren(self)



    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_indexValid)
        try:
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                localctx = NyarParser.IndexTakeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Plus, NyarParser.Minus, NyarParser.Integer, NyarParser.TrueName, NyarParser.Symbol]:
                    self.state = 1249
                    self.indexTerm()
                    pass
                elif token in [NyarParser.T__4]:
                    self.state = 1250
                    self.list()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = NyarParser.Index000Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1253
                self.match(NyarParser.Colon)
                pass

            elif la_ == 3:
                localctx = NyarParser.Index001Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1254
                self.match(NyarParser.Name)
                self.state = 1255
                self.indexTerm()
                pass

            elif la_ == 4:
                localctx = NyarParser.Index001Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1256
                self.match(NyarParser.Colon)
                self.state = 1257
                self.match(NyarParser.Colon)
                self.state = 1258
                self.indexTerm()
                pass

            elif la_ == 5:
                localctx = NyarParser.Index010Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1259
                self.match(NyarParser.Colon)
                self.state = 1260
                self.indexTerm()
                self.state = 1262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1261
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 6:
                localctx = NyarParser.Index011Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1264
                self.match(NyarParser.Colon)
                self.state = 1265
                self.indexTerm()
                self.state = 1266
                self.match(NyarParser.Colon)
                self.state = 1267
                self.indexTerm()
                pass

            elif la_ == 7:
                localctx = NyarParser.Index100Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1269
                self.indexTerm()
                self.state = 1270
                self.match(NyarParser.Name)
                pass

            elif la_ == 8:
                localctx = NyarParser.Index100Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1272
                self.indexTerm()
                self.state = 1273
                self.match(NyarParser.Colon)
                self.state = 1275
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1274
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 9:
                localctx = NyarParser.Index101Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1277
                self.indexTerm()
                self.state = 1278
                self.match(NyarParser.Name)
                self.state = 1279
                self.indexTerm()
                pass

            elif la_ == 10:
                localctx = NyarParser.Index101Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1281
                self.indexTerm()
                self.state = 1282
                self.match(NyarParser.Colon)
                self.state = 1283
                self.match(NyarParser.Colon)
                self.state = 1284
                self.indexTerm()
                pass

            elif la_ == 11:
                localctx = NyarParser.Index110Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1286
                self.indexTerm()
                self.state = 1287
                self.match(NyarParser.Colon)
                self.state = 1288
                self.indexTerm()
                self.state = 1290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1289
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 12:
                localctx = NyarParser.Index111Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1292
                self.indexTerm()
                self.state = 1293
                self.match(NyarParser.Colon)
                self.state = 1294
                self.indexTerm()
                self.state = 1295
                self.match(NyarParser.Colon)
                self.state = 1296
                self.indexTerm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTerm" ):
                listener.enterIndexTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTerm" ):
                listener.exitIndexTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexTerm" ):
                return visitor.visitIndexTerm(self)
            else:
                return visitor.visitChildren(self)




    def indexTerm(self):

        localctx = NyarParser.IndexTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_indexTerm)
        self._la = 0 # Token type
        try:
            self.state = 1305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1300
                self.symbol()
                pass
            elif token in [NyarParser.Plus, NyarParser.Minus, NyarParser.Integer]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Plus or _la==NyarParser.Minus:
                    self.state = 1301
                    localctx.sign = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                        localctx.sign = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1304
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(NyarParser.T__0)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (NyarParser.Integer - 71)) | (1 << (NyarParser.StringEscapeBlock - 71)) | (1 << (NyarParser.StringEscapeSingle - 71)) | (1 << (NyarParser.StringLiteralBlock - 71)) | (1 << (NyarParser.StringLiteralSingle - 71)) | (1 << (NyarParser.StringEmpty - 71)) | (1 << (NyarParser.TrueName - 71)) | (1 << (NyarParser.Symbol - 71)))) != 0):
                self.state = 1308
                self.keyValue()


            self.state = 1315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1311
                    self.match(NyarParser.Comma)
                    self.state = 1312
                    self.keyValue() 
                self.state = 1317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1318
                self.match(NyarParser.Comma)


            self.state = 1321
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            localctx.key = self.keyValid()
            self.state = 1324
            self.match(NyarParser.Colon)
            self.state = 1325
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_keyValid)
        try:
            self.state = 1330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteralBlock, NyarParser.StringLiteralSingle, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(NyarParser.T__4)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure) | (1 << NyarParser.Interface) | (1 << NyarParser.Trait))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0):
                self.state = 1333
                self.element()


            self.state = 1340
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1336
                    self.match(NyarParser.Comma)
                    self.state = 1337
                    self.element() 
                self.state = 1342
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1343
                self.match(NyarParser.Comma)


            self.state = 1346
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_element)
        try:
            self.state = 1351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1348
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1349
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1350
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1354
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteralSingle(self):
            return self.getToken(NyarParser.StringLiteralSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralSingle" ):
                listener.enterStringLiteralSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralSingle" ):
                listener.exitStringLiteralSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralSingle" ):
                return visitor.visitStringLiteralSingle(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteralBlock(self):
            return self.getToken(NyarParser.StringLiteralBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralBlock" ):
                listener.enterStringLiteralBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralBlock" ):
                listener.exitStringLiteralBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralBlock" ):
                return visitor.visitStringLiteralBlock(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_string)
        try:
            self.state = 1365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1360
                self.match(NyarParser.StringEmpty)
                pass
            elif token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1362
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteralBlock]:
                localctx = NyarParser.StringLiteralBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1363
                self.match(NyarParser.StringLiteralBlock)
                pass
            elif token in [NyarParser.StringLiteralSingle]:
                localctx = NyarParser.StringLiteralSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1364
                self.match(NyarParser.StringLiteralSingle)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (NyarParser.True - 80)) | (1 << (NyarParser.False - 80)) | (1 << (NyarParser.Null - 80)) | (1 << (NyarParser.Nothing - 80)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_symbol)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1369
                self.flowController()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1370
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1371
                self.match(NyarParser.TrueName)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # SymbolContext

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_solt)
        try:
            self.state = 1380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1374
                self.match(NyarParser.Sharp)
                self.state = 1376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1375
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1378
                self.match(NyarParser.Sharp)
                self.state = 1379
                localctx.id = self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (NyarParser.BitNot - 129)) | (1 << (NyarParser.LogicNot - 129)) | (1 << (NyarParser.Reciprocal - 129)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (NyarParser.Increase - 105)) | (1 << (NyarParser.Decrease - 105)) | (1 << (NyarParser.DoubleBang - 105)) | (1 << (NyarParser.BitNot - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (NyarParser.Exponent - 72)) | (1 << (NyarParser.Base - 72)) | (1 << (NyarParser.LeftShift - 72)) | (1 << (NyarParser.RightShift - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1390
            _la = self._input.LA(1)
            if not(((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (NyarParser.LogicXor - 107)) | (1 << (NyarParser.LogicOr - 107)) | (1 << (NyarParser.LogicAnd - 107)) | (1 << (NyarParser.LogicNot - 107)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1392
                _la = self._input.LA(1)
                if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (NyarParser.Equivalent - 120)) | (1 << (NyarParser.NotEquivalent - 120)) | (1 << (NyarParser.Equal - 120)) | (1 << (NyarParser.NotEqual - 120)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1393
                _la = self._input.LA(1)
                if not(((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (NyarParser.LessEqual - 99)) | (1 << (NyarParser.Less - 99)) | (1 << (NyarParser.GraterEqual - 99)) | (1 << (NyarParser.Grater - 99)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1394
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1399
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (NyarParser.Multiply - 110)) | (1 << (NyarParser.Kronecker - 110)) | (1 << (NyarParser.TensorProduct - 110)) | (1 << (NyarParser.Remainder - 110)) | (1 << (NyarParser.Divide - 110)) | (1 << (NyarParser.Mod - 110)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            _la = self._input.LA(1)
            if not(((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (NyarParser.LeftShift - 98)) | (1 << (NyarParser.RightShift - 98)) | (1 << (NyarParser.Increase - 98)) | (1 << (NyarParser.Map - 98)) | (1 << (NyarParser.Concat - 98)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[13] = self.expression_sempred
        self._predicates[19] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




