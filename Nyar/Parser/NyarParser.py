# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0094")
        buf.write("\u0587\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\3\2\7\2\u00ba")
        buf.write("\n\2\f\2\16\2\u00bd\13\2\3\2\3\2\3\3\3\3\3\3\5\3\u00c4")
        buf.write("\n\3\3\3\5\3\u00c7\n\3\3\3\3\3\5\3\u00cb\n\3\3\3\5\3\u00ce")
        buf.write("\n\3\3\3\3\3\3\3\3\3\3\3\5\3\u00d5\n\3\3\3\5\3\u00d8\n")
        buf.write("\3\3\3\3\3\3\3\5\3\u00dd\n\3\3\3\5\3\u00e0\n\3\3\3\3\3")
        buf.write("\3\3\5\3\u00e5\n\3\3\3\5\3\u00e8\n\3\3\3\3\3\5\3\u00ec")
        buf.write("\n\3\3\3\3\3\5\3\u00f0\n\3\3\3\3\3\5\3\u00f4\n\3\5\3\u00f6")
        buf.write("\n\3\3\4\3\4\5\4\u00fa\n\4\3\5\3\5\3\6\3\6\3\6\5\6\u0101")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u010b\n\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0112\n\6\3\6\3\6\3\6\3\6\5\6\u0118")
        buf.write("\n\6\3\7\3\7\3\7\5\7\u011d\n\7\3\7\5\7\u0120\n\7\3\7\5")
        buf.write("\7\u0123\n\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3")
        buf.write("\n\3\13\3\13\3\13\3\13\7\13\u0134\n\13\f\13\16\13\u0137")
        buf.write("\13\13\3\13\3\13\3\f\3\f\7\f\u013d\n\f\f\f\16\f\u0140")
        buf.write("\13\f\3\f\3\f\3\f\7\f\u0145\n\f\f\f\16\f\u0148\13\f\3")
        buf.write("\f\3\f\3\f\5\f\u014d\n\f\3\r\3\r\7\r\u0151\n\r\f\r\16")
        buf.write("\r\u0154\13\r\3\r\3\r\5\r\u0158\n\r\3\r\6\r\u015b\n\r")
        buf.write("\r\r\16\r\u015c\5\r\u015f\n\r\3\16\3\16\3\16\7\16\u0164")
        buf.write("\n\16\f\16\16\16\u0167\13\16\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0178\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\7\17\u01a5\n\17\f\17\16\17\u01a8\13\17\3\20")
        buf.write("\3\20\3\20\5\20\u01ad\n\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u01b7\n\20\3\20\3\20\5\20\u01bb\n\20")
        buf.write("\3\21\3\21\3\21\3\21\3\21\7\21\u01c2\n\21\f\21\16\21\u01c5")
        buf.write("\13\21\3\21\5\21\u01c8\n\21\5\21\u01ca\n\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\5\22\u01d1\n\22\3\23\3\23\3\24\3\24\3")
        buf.write("\24\3\24\3\24\5\24\u01da\n\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u01e1\n\24\5\24\u01e3\n\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\7\25\u01eb\n\25\f\25\16\25\u01ee\13\25\5\25\u01f0")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u01f9\n")
        buf.write("\25\f\25\16\25\u01fc\13\25\5\25\u01fe\n\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u0204\n\25\3\25\5\25\u0207\n\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\7\25\u020f\n\25\f\25\16\25\u0212")
        buf.write("\13\25\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u023c")
        buf.write("\n\27\3\30\3\30\5\30\u0240\n\30\3\30\3\30\3\30\7\30\u0245")
        buf.write("\n\30\f\30\16\30\u0248\13\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u024e\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u0255\n\31\f")
        buf.write("\31\16\31\u0258\13\31\3\31\3\31\3\31\7\31\u025d\n\31\f")
        buf.write("\31\16\31\u0260\13\31\3\31\5\31\u0263\n\31\3\32\5\32\u0266")
        buf.write("\n\32\3\32\3\32\5\32\u026a\n\32\3\32\3\32\3\32\3\32\5")
        buf.write("\32\u0270\n\32\3\32\3\32\3\32\3\32\5\32\u0276\n\32\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u027c\n\32\3\33\3\33\3\33\3\33\3")
        buf.write("\33\7\33\u0283\n\33\f\33\16\33\u0286\13\33\3\33\5\33\u0289")
        buf.write("\n\33\3\33\3\33\5\33\u028d\n\33\3\34\3\34\5\34\u0291\n")
        buf.write("\34\3\34\5\34\u0294\n\34\3\35\3\35\3\35\3\35\5\35\u029a")
        buf.write("\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u02a2\n\36\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\5\37\u02aa\n\37\3 \3 \3 ")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \5 \u02b6\n \3!\3!\3!\6!\u02bb\n")
        buf.write("!\r!\16!\u02bc\3!\3!\3!\3!\3!\3!\6!\u02c5\n!\r!\16!\u02c6")
        buf.write("\3!\3!\3!\3!\3!\3!\7!\u02cf\n!\f!\16!\u02d2\13!\3!\3!")
        buf.write("\3!\5!\u02d7\n!\3\"\3\"\3\"\5\"\u02dc\n\"\3#\3#\3#\3#")
        buf.write("\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\5%\u02f9\n%\3&\3&\7&\u02fd\n&\f&\16&")
        buf.write("\u0300\13&\3&\3&\3&\7&\u0305\n&\f&\16&\u0308\13&\3&\5")
        buf.write("&\u030b\n&\3\'\3\'\3\'\3\'\3(\3(\5(\u0313\n(\3)\3)\3)")
        buf.write("\3)\3)\5)\u031a\n)\3*\3*\3*\3*\6*\u0320\n*\r*\16*\u0321")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0334")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\3+\5+\u033e\n+\3,\3,\3,\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u034f\n-\3.\3.\3.\3")
        buf.write(".\3/\3/\7/\u0357\n/\f/\16/\u035a\13/\3/\3/\3/\7/\u035f")
        buf.write("\n/\f/\16/\u0362\13/\3/\5/\u0365\n/\3\60\3\60\5\60\u0369")
        buf.write("\n\60\3\60\7\60\u036c\n\60\f\60\16\60\u036f\13\60\3\60")
        buf.write("\3\60\5\60\u0373\n\60\3\60\5\60\u0376\n\60\3\60\7\60\u0379")
        buf.write("\n\60\f\60\16\60\u037c\13\60\3\60\3\60\5\60\u0380\n\60")
        buf.write("\3\60\3\60\5\60\u0384\n\60\3\60\7\60\u0387\n\60\f\60\16")
        buf.write("\60\u038a\13\60\3\60\3\60\3\60\7\60\u038f\n\60\f\60\16")
        buf.write("\60\u0392\13\60\3\60\3\60\5\60\u0396\n\60\3\60\3\60\5")
        buf.write("\60\u039a\n\60\5\60\u039c\n\60\3\61\3\61\3\61\5\61\u03a1")
        buf.write("\n\61\3\61\5\61\u03a4\n\61\3\61\3\61\7\61\u03a8\n\61\f")
        buf.write("\61\16\61\u03ab\13\61\3\61\3\61\3\61\3\61\3\61\5\61\u03b2")
        buf.write("\n\61\3\61\5\61\u03b5\n\61\3\61\3\61\7\61\u03b9\n\61\f")
        buf.write("\61\16\61\u03bc\13\61\3\61\3\61\5\61\u03c0\n\61\3\62\3")
        buf.write("\62\6\62\u03c4\n\62\r\62\16\62\u03c5\3\62\3\62\3\62\3")
        buf.write("\62\7\62\u03cc\n\62\f\62\16\62\u03cf\13\62\3\62\3\62\5")
        buf.write("\62\u03d3\n\62\3\63\3\63\6\63\u03d7\n\63\r\63\16\63\u03d8")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u03e2\n\63\f")
        buf.write("\63\16\63\u03e5\13\63\3\63\3\63\5\63\u03e9\n\63\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u03ef\n\64\3\65\3\65\3\66\3\66\3\66")
        buf.write("\5\66\u03f6\n\66\3\66\5\66\u03f9\n\66\3\66\3\66\7\66\u03fd")
        buf.write("\n\66\f\66\16\66\u0400\13\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\5\66\u0407\n\66\3\66\5\66\u040a\n\66\3\66\3\66\7\66\u040e")
        buf.write("\n\66\f\66\16\66\u0411\13\66\3\66\3\66\5\66\u0415\n\66")
        buf.write("\3\67\3\67\3\67\5\67\u041a\n\67\3\67\5\67\u041d\n\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0426\n\67\3\67")
        buf.write("\5\67\u0429\n\67\3\67\3\67\7\67\u042d\n\67\f\67\16\67")
        buf.write("\u0430\13\67\3\67\3\67\5\67\u0434\n\67\38\38\38\58\u0439")
        buf.write("\n8\38\58\u043c\n8\38\38\78\u0440\n8\f8\168\u0443\138")
        buf.write("\38\38\38\38\38\58\u044a\n8\38\58\u044d\n8\38\38\78\u0451")
        buf.write("\n8\f8\168\u0454\138\38\38\58\u0458\n8\39\39\59\u045c")
        buf.write("\n9\39\39\59\u0460\n9\39\59\u0463\n9\39\39\79\u0467\n")
        buf.write("9\f9\169\u046a\139\39\39\39\39\59\u0470\n9\39\39\59\u0474")
        buf.write("\n9\39\59\u0477\n9\39\39\79\u047b\n9\f9\169\u047e\139")
        buf.write("\39\39\59\u0482\n9\3:\3:\5:\u0486\n:\3;\3;\3;\3;\5;\u048c")
        buf.write("\n;\3<\3<\3<\5<\u0491\n<\3<\3<\5<\u0495\n<\3=\3=\3=\3")
        buf.write("=\3=\3=\7=\u049d\n=\f=\16=\u04a0\13=\3>\3>\3>\3>\3>\5")
        buf.write(">\u04a7\n>\3?\3?\5?\u04ab\n?\3?\3?\3?\3?\5?\u04b1\n?\5")
        buf.write("?\u04b3\n?\3@\3@\3@\3@\3@\5@\u04ba\n@\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\5A\u04c5\nA\3B\3B\3B\3B\5B\u04cb\nB\3C\3C\3")
        buf.write("D\3D\3D\5D\u04d2\nD\3D\7D\u04d5\nD\fD\16D\u04d8\13D\3")
        buf.write("D\3D\3D\3D\3D\5D\u04df\nD\3D\7D\u04e2\nD\fD\16D\u04e5")
        buf.write("\13D\3D\3D\5D\u04e9\nD\3E\3E\5E\u04ed\nE\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\5E\u04f8\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\5E\u0505\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\5E\u0514\nE\3E\3E\3E\3E\3E\3E\5E\u051c\nE\3F\3F\5F\u0520")
        buf.write("\nF\3F\5F\u0523\nF\3G\3G\5G\u0527\nG\3G\3G\7G\u052b\n")
        buf.write("G\fG\16G\u052e\13G\3G\5G\u0531\nG\3G\3G\3H\3H\3H\3H\3")
        buf.write("I\3I\3I\5I\u053c\nI\3J\3J\5J\u0540\nJ\3J\3J\7J\u0544\n")
        buf.write("J\fJ\16J\u0547\13J\3J\5J\u054a\nJ\3J\3J\3K\3K\3K\5K\u0551")
        buf.write("\nK\3L\3L\3L\3M\3M\3N\3N\3O\3O\3O\3O\3O\5O\u055f\nO\3")
        buf.write("P\3P\3Q\3Q\3Q\5Q\u0566\nQ\3R\3R\5R\u056a\nR\3R\3R\5R\u056e")
        buf.write("\nR\3S\3S\3T\3T\3U\3U\3V\3V\3W\3W\3X\3X\3X\5X\u057d\n")
        buf.write("X\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3\\\2\4\34(]\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\2\35\4\2\21\21FF")
        buf.write("\4\288^^\4\2\25\25\31\31\4\2\27\30\32\32\4\2\25\25\27")
        buf.write("\32\4\2\21\21\37\37\3\2\35\36\3\2<=\4\2%%((\4\2\13\13")
        buf.write("\33\33\4\2\21\21DD\3\2JL\3\2DE\4\2HHMM\3\2HI\3\2VY\6\2")
        buf.write("DEoo\u0082\u0083\u008d\u008d\6\2ooqq\u0080\u0080\u0082")
        buf.write("\u0082\5\2NOhhll\5\2pp~\177\u0083\u0083\4\2y{\u0081\u0081")
        buf.write("\4\2ijmn\3\2~\177\3\2FG\6\2\17\20rsuuxx\7\2hhlloovv||")
        buf.write("\5\2\17\17\21\21DE\2\u063c\2\u00bb\3\2\2\2\4\u00f5\3\2")
        buf.write("\2\2\6\u00f9\3\2\2\2\b\u00fb\3\2\2\2\n\u0117\3\2\2\2\f")
        buf.write("\u0122\3\2\2\2\16\u0124\3\2\2\2\20\u0128\3\2\2\2\22\u012c")
        buf.write("\3\2\2\2\24\u012f\3\2\2\2\26\u014c\3\2\2\2\30\u015e\3")
        buf.write("\2\2\2\32\u0160\3\2\2\2\34\u0177\3\2\2\2\36\u01ba\3\2")
        buf.write("\2\2 \u01bc\3\2\2\2\"\u01d0\3\2\2\2$\u01d2\3\2\2\2&\u01e2")
        buf.write("\3\2\2\2(\u0206\3\2\2\2*\u0213\3\2\2\2,\u023b\3\2\2\2")
        buf.write(".\u024d\3\2\2\2\60\u0262\3\2\2\2\62\u027b\3\2\2\2\64\u027d")
        buf.write("\3\2\2\2\66\u0293\3\2\2\28\u0299\3\2\2\2:\u02a1\3\2\2")
        buf.write("\2<\u02a9\3\2\2\2>\u02b5\3\2\2\2@\u02d6\3\2\2\2B\u02db")
        buf.write("\3\2\2\2D\u02dd\3\2\2\2F\u02e1\3\2\2\2H\u02f8\3\2\2\2")
        buf.write("J\u030a\3\2\2\2L\u030c\3\2\2\2N\u0312\3\2\2\2P\u0319\3")
        buf.write("\2\2\2R\u0333\3\2\2\2T\u033d\3\2\2\2V\u033f\3\2\2\2X\u034e")
        buf.write("\3\2\2\2Z\u0350\3\2\2\2\\\u0364\3\2\2\2^\u039b\3\2\2\2")
        buf.write("`\u03bf\3\2\2\2b\u03d2\3\2\2\2d\u03e8\3\2\2\2f\u03ee\3")
        buf.write("\2\2\2h\u03f0\3\2\2\2j\u0414\3\2\2\2l\u0433\3\2\2\2n\u0457")
        buf.write("\3\2\2\2p\u0481\3\2\2\2r\u0485\3\2\2\2t\u0487\3\2\2\2")
        buf.write("v\u048d\3\2\2\2x\u0496\3\2\2\2z\u04a1\3\2\2\2|\u04b2\3")
        buf.write("\2\2\2~\u04b9\3\2\2\2\u0080\u04c4\3\2\2\2\u0082\u04ca")
        buf.write("\3\2\2\2\u0084\u04cc\3\2\2\2\u0086\u04e8\3\2\2\2\u0088")
        buf.write("\u051b\3\2\2\2\u008a\u0522\3\2\2\2\u008c\u0524\3\2\2\2")
        buf.write("\u008e\u0534\3\2\2\2\u0090\u053b\3\2\2\2\u0092\u053d\3")
        buf.write("\2\2\2\u0094\u0550\3\2\2\2\u0096\u0552\3\2\2\2\u0098\u0555")
        buf.write("\3\2\2\2\u009a\u0557\3\2\2\2\u009c\u055e\3\2\2\2\u009e")
        buf.write("\u0560\3\2\2\2\u00a0\u0565\3\2\2\2\u00a2\u056d\3\2\2\2")
        buf.write("\u00a4\u056f\3\2\2\2\u00a6\u0571\3\2\2\2\u00a8\u0573\3")
        buf.write("\2\2\2\u00aa\u0575\3\2\2\2\u00ac\u0577\3\2\2\2\u00ae\u057c")
        buf.write("\3\2\2\2\u00b0\u057e\3\2\2\2\u00b2\u0580\3\2\2\2\u00b4")
        buf.write("\u0582\3\2\2\2\u00b6\u0584\3\2\2\2\u00b8\u00ba\5\4\3\2")
        buf.write("\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9\3")
        buf.write("\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd\u00bb")
        buf.write("\3\2\2\2\u00be\u00bf\7\2\2\3\u00bf\3\3\2\2\2\u00c0\u00f6")
        buf.write("\5\6\4\2\u00c1\u00c4\5\n\6\2\u00c2\u00c4\5\22\n\2\u00c3")
        buf.write("\u00c1\3\2\2\2\u00c3\u00c2\3\2\2\2\u00c4\u00c6\3\2\2\2")
        buf.write("\u00c5\u00c7\5\b\5\2\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3")
        buf.write("\2\2\2\u00c7\u00f6\3\2\2\2\u00c8\u00cb\5\\/\2\u00c9\u00cb")
        buf.write("\5,\27\2\u00ca\u00c8\3\2\2\2\u00ca\u00c9\3\2\2\2\u00cb")
        buf.write("\u00cd\3\2\2\2\u00cc\u00ce\5\b\5\2\u00cd\u00cc\3\2\2\2")
        buf.write("\u00cd\u00ce\3\2\2\2\u00ce\u00f6\3\2\2\2\u00cf\u00d5\5")
        buf.write("F$\2\u00d0\u00d5\5:\36\2\u00d1\u00d5\5L\'\2\u00d2\u00d5")
        buf.write("\5X-\2\u00d3\u00d5\5Z.\2\u00d4\u00cf\3\2\2\2\u00d4\u00d0")
        buf.write("\3\2\2\2\u00d4\u00d1\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4")
        buf.write("\u00d3\3\2\2\2\u00d5\u00d7\3\2\2\2\u00d6\u00d8\5\b\5\2")
        buf.write("\u00d7\u00d6\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00f6\3")
        buf.write("\2\2\2\u00d9\u00dd\5&\24\2\u00da\u00dd\5j\66\2\u00db\u00dd")
        buf.write("\5`\61\2\u00dc\u00d9\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc")
        buf.write("\u00db\3\2\2\2\u00dd\u00df\3\2\2\2\u00de\u00e0\5\b\5\2")
        buf.write("\u00df\u00de\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00f6\3")
        buf.write("\2\2\2\u00e1\u00e5\5l\67\2\u00e2\u00e5\5n8\2\u00e3\u00e5")
        buf.write("\5p9\2\u00e4\u00e1\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e3")
        buf.write("\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6\u00e8\5\b\5\2\u00e7")
        buf.write("\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00f6\3\2\2\2")
        buf.write("\u00e9\u00eb\5R*\2\u00ea\u00ec\5\b\5\2\u00eb\u00ea\3\2")
        buf.write("\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00f6\3\2\2\2\u00ed\u00ef")
        buf.write("\5\34\17\2\u00ee\u00f0\5\b\5\2\u00ef\u00ee\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\u00f6\3\2\2\2\u00f1\u00f3\5\u0080")
        buf.write("A\2\u00f2\u00f4\5\b\5\2\u00f3\u00f2\3\2\2\2\u00f3\u00f4")
        buf.write("\3\2\2\2\u00f4\u00f6\3\2\2\2\u00f5\u00c0\3\2\2\2\u00f5")
        buf.write("\u00c3\3\2\2\2\u00f5\u00ca\3\2\2\2\u00f5\u00d4\3\2\2\2")
        buf.write("\u00f5\u00dc\3\2\2\2\u00f5\u00e4\3\2\2\2\u00f5\u00e9\3")
        buf.write("\2\2\2\u00f5\u00ed\3\2\2\2\u00f5\u00f1\3\2\2\2\u00f6\5")
        buf.write("\3\2\2\2\u00f7\u00fa\5\b\5\2\u00f8\u00fa\7\n\2\2\u00f9")
        buf.write("\u00f7\3\2\2\2\u00f9\u00f8\3\2\2\2\u00fa\7\3\2\2\2\u00fb")
        buf.write("\u00fc\7\13\2\2\u00fc\t\3\2\2\2\u00fd\u00fe\7\r\2\2\u00fe")
        buf.write("\u0100\5\f\7\2\u00ff\u0101\t\2\2\2\u0100\u00ff\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u0118\3\2\2\2\u0102\u0103\7")
        buf.write("\r\2\2\u0103\u0104\5\f\7\2\u0104\u0105\7\f\2\2\u0105\u0106")
        buf.write("\5\u00a0Q\2\u0106\u0118\3\2\2\2\u0107\u0108\7\r\2\2\u0108")
        buf.write("\u010a\5\f\7\2\u0109\u010b\78\2\2\u010a\u0109\3\2\2\2")
        buf.write("\u010a\u010b\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010d\5")
        buf.write("\u00a0Q\2\u010d\u0118\3\2\2\2\u010e\u010f\7\r\2\2\u010f")
        buf.write("\u0111\5\f\7\2\u0110\u0112\t\3\2\2\u0111\u0110\3\2\2\2")
        buf.write("\u0111\u0112\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\5")
        buf.write("\24\13\2\u0114\u0118\3\2\2\2\u0115\u0116\7\r\2\2\u0116")
        buf.write("\u0118\5\u008cG\2\u0117\u00fd\3\2\2\2\u0117\u0102\3\2")
        buf.write("\2\2\u0117\u0107\3\2\2\2\u0117\u010e\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0118\13\3\2\2\2\u0119\u0123\5\u009cO\2\u011a")
        buf.write("\u0123\5\u00a0Q\2\u011b\u011d\5\16\b\2\u011c\u011b\3\2")
        buf.write("\2\2\u011c\u011d\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u0120")
        buf.write("\5\20\t\2\u011f\u011e\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0121\3\2\2\2\u0121\u0123\58\35\2\u0122\u0119\3\2\2\2")
        buf.write("\u0122\u011a\3\2\2\2\u0122\u011c\3\2\2\2\u0123\r\3\2\2")
        buf.write("\2\u0124\u0125\7>\2\2\u0125\u0126\5\u00a0Q\2\u0126\u0127")
        buf.write("\7\22\2\2\u0127\17\3\2\2\2\u0128\u0129\7?\2\2\u0129\u012a")
        buf.write("\5\u00a0Q\2\u012a\u012b\7\22\2\2\u012b\21\3\2\2\2\u012c")
        buf.write("\u012d\7\16\2\2\u012d\u012e\5\u00a0Q\2\u012e\23\3\2\2")
        buf.write("\2\u012f\u0130\7\3\2\2\u0130\u0135\5\u00a0Q\2\u0131\u0132")
        buf.write("\7\33\2\2\u0132\u0134\5\u00a0Q\2\u0133\u0131\3\2\2\2\u0134")
        buf.write("\u0137\3\2\2\2\u0135\u0133\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0138\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u0139\7")
        buf.write("\4\2\2\u0139\25\3\2\2\2\u013a\u013e\7\3\2\2\u013b\u013d")
        buf.write("\5\4\3\2\u013c\u013b\3\2\2\2\u013d\u0140\3\2\2\2\u013e")
        buf.write("\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141\3\2\2\2")
        buf.write("\u0140\u013e\3\2\2\2\u0141\u014d\7\4\2\2\u0142\u0146\7")
        buf.write("\23\2\2\u0143\u0145\5\4\3\2\u0144\u0143\3\2\2\2\u0145")
        buf.write("\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u0149\3\2\2\2\u0148\u0146\3\2\2\2\u0149\u014d\7")
        buf.write("\24\2\2\u014a\u014b\7\23\2\2\u014b\u014d\5\34\17\2\u014c")
        buf.write("\u013a\3\2\2\2\u014c\u0142\3\2\2\2\u014c\u014a\3\2\2\2")
        buf.write("\u014d\27\3\2\2\2\u014e\u0152\7\3\2\2\u014f\u0151\5\4")
        buf.write("\3\2\u0150\u014f\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150")
        buf.write("\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0155\3\2\2\2\u0154")
        buf.write("\u0152\3\2\2\2\u0155\u015f\7\4\2\2\u0156\u0158\7\23\2")
        buf.write("\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015a")
        buf.write("\3\2\2\2\u0159\u015b\5\4\3\2\u015a\u0159\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\u015f\3\2\2\2\u015e\u014e\3\2\2\2\u015e\u0157\3")
        buf.write("\2\2\2\u015f\31\3\2\2\2\u0160\u0165\5\34\17\2\u0161\u0162")
        buf.write("\7\33\2\2\u0162\u0164\5\34\17\2\u0163\u0161\3\2\2\2\u0164")
        buf.write("\u0167\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2")
        buf.write("\u0166\33\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u0169\b\17")
        buf.write("\1\2\u0169\u0178\5 \21\2\u016a\u0178\5,\27\2\u016b\u016c")
        buf.write("\5\u00a0Q\2\u016c\u016d\5\u009cO\2\u016d\u0178\3\2\2\2")
        buf.write("\u016e\u016f\5\u00a6T\2\u016f\u0170\5\34\17\17\u0170\u0178")
        buf.write("\3\2\2\2\u0171\u0178\5\u0080A\2\u0172\u0173\7\5\2\2\u0173")
        buf.write("\u0174\5\34\17\2\u0174\u0175\7\6\2\2\u0175\u0178\3\2\2")
        buf.write("\2\u0176\u0178\5\36\20\2\u0177\u0168\3\2\2\2\u0177\u016a")
        buf.write("\3\2\2\2\u0177\u016b\3\2\2\2\u0177\u016e\3\2\2\2\u0177")
        buf.write("\u0171\3\2\2\2\u0177\u0172\3\2\2\2\u0177\u0176\3\2\2\2")
        buf.write("\u0178\u01a6\3\2\2\2\u0179\u017a\f\r\2\2\u017a\u017b\5")
        buf.write("\u00aaV\2\u017b\u017c\5\34\17\16\u017c\u01a5\3\2\2\2\u017d")
        buf.write("\u017e\f\f\2\2\u017e\u017f\5\u00acW\2\u017f\u0180\5\34")
        buf.write("\17\r\u0180\u01a5\3\2\2\2\u0181\u0182\f\13\2\2\u0182\u0183")
        buf.write("\5\u00aeX\2\u0183\u0184\5\34\17\f\u0184\u01a5\3\2\2\2")
        buf.write("\u0185\u0186\f\n\2\2\u0186\u0187\5\u00b0Y\2\u0187\u0188")
        buf.write("\5\34\17\n\u0188\u01a5\3\2\2\2\u0189\u018a\f\t\2\2\u018a")
        buf.write("\u018b\5\u00b2Z\2\u018b\u018c\5\34\17\n\u018c\u01a5\3")
        buf.write("\2\2\2\u018d\u018e\f\b\2\2\u018e\u018f\5\u00a4S\2\u018f")
        buf.write("\u0190\5\34\17\t\u0190\u01a5\3\2\2\2\u0191\u0192\f\7\2")
        buf.write("\2\u0192\u0193\5\u00b4[\2\u0193\u0194\5\34\17\b\u0194")
        buf.write("\u01a5\3\2\2\2\u0195\u0196\f\25\2\2\u0196\u0197\7^\2\2")
        buf.write("\u0197\u01a5\5\u00a0Q\2\u0198\u0199\f\24\2\2\u0199\u019a")
        buf.write("\7^\2\2\u019a\u01a5\5 \21\2\u019b\u019c\f\23\2\2\u019c")
        buf.write("\u01a5\5\u0086D\2\u019d\u019e\f\20\2\2\u019e\u019f\7\f")
        buf.write("\2\2\u019f\u01a5\5(\25\2\u01a0\u01a1\f\16\2\2\u01a1\u01a5")
        buf.write("\5\u00a8U\2\u01a2\u01a3\f\3\2\2\u01a3\u01a5\7\36\2\2\u01a4")
        buf.write("\u0179\3\2\2\2\u01a4\u017d\3\2\2\2\u01a4\u0181\3\2\2\2")
        buf.write("\u01a4\u0185\3\2\2\2\u01a4\u0189\3\2\2\2\u01a4\u018d\3")
        buf.write("\2\2\2\u01a4\u0191\3\2\2\2\u01a4\u0195\3\2\2\2\u01a4\u0198")
        buf.write("\3\2\2\2\u01a4\u019b\3\2\2\2\u01a4\u019d\3\2\2\2\u01a4")
        buf.write("\u01a0\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a5\u01a8\3\2\2\2")
        buf.write("\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\35\3\2")
        buf.write("\2\2\u01a8\u01a6\3\2\2\2\u01a9\u01ac\t\4\2\2\u01aa\u01ab")
        buf.write("\7\5\2\2\u01ab\u01ad\7\6\2\2\u01ac\u01aa\3\2\2\2\u01ac")
        buf.write("\u01ad\3\2\2\2\u01ad\u01bb\3\2\2\2\u01ae\u01af\t\5\2\2")
        buf.write("\u01af\u01bb\5\34\17\2\u01b0\u01b1\7\26\2\2\u01b1\u01bb")
        buf.write("\5\32\16\2\u01b2\u01b3\7\26\2\2\u01b3\u01b4\7\5\2\2\u01b4")
        buf.write("\u01b6\5\32\16\2\u01b5\u01b7\7\33\2\2\u01b6\u01b5\3\2")
        buf.write("\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9")
        buf.write("\7\6\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01a9\3\2\2\2\u01ba")
        buf.write("\u01ae\3\2\2\2\u01ba\u01b0\3\2\2\2\u01ba\u01b2\3\2\2\2")
        buf.write("\u01bb\37\3\2\2\2\u01bc\u01bd\58\35\2\u01bd\u01c9\7\5")
        buf.write("\2\2\u01be\u01c3\5\"\22\2\u01bf\u01c0\7\33\2\2\u01c0\u01c2")
        buf.write("\5\"\22\2\u01c1\u01bf\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c7\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c6\u01c8\7\33\2\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3\2\2\2\u01c9")
        buf.write("\u01be\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\3\2\2\2")
        buf.write("\u01cb\u01cc\7\6\2\2\u01cc!\3\2\2\2\u01cd\u01d1\5\34\17")
        buf.write("\2\u01ce\u01d1\5 \21\2\u01cf\u01d1\5\u0080A\2\u01d0\u01cd")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01cf\3\2\2\2\u01d1")
        buf.write("#\3\2\2\2\u01d2\u01d3\t\6\2\2\u01d3%\3\2\2\2\u01d4\u01d5")
        buf.write("\7\34\2\2\u01d5\u01d6\5\u00a0Q\2\u01d6\u01d7\7\23\2\2")
        buf.write("\u01d7\u01d9\5(\25\2\u01d8\u01da\7\24\2\2\u01d9\u01d8")
        buf.write("\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01e3\3\2\2\2\u01db")
        buf.write("\u01dc\7\34\2\2\u01dc\u01dd\5\u00a0Q\2\u01dd\u01de\7\3")
        buf.write("\2\2\u01de\u01e0\5(\25\2\u01df\u01e1\7\4\2\2\u01e0\u01df")
        buf.write("\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3\3\2\2\2\u01e2")
        buf.write("\u01d4\3\2\2\2\u01e2\u01db\3\2\2\2\u01e3\'\3\2\2\2\u01e4")
        buf.write("\u01e5\b\25\1\2\u01e5\u01e6\5\u00a0Q\2\u01e6\u01ef\7\5")
        buf.write("\2\2\u01e7\u01ec\5(\25\2\u01e8\u01e9\7\33\2\2\u01e9\u01eb")
        buf.write("\5(\25\2\u01ea\u01e8\3\2\2\2\u01eb\u01ee\3\2\2\2\u01ec")
        buf.write("\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01f0\3\2\2\2")
        buf.write("\u01ee\u01ec\3\2\2\2\u01ef\u01e7\3\2\2\2\u01ef\u01f0\3")
        buf.write("\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f2\7\6\2\2\u01f2\u0207")
        buf.write("\3\2\2\2\u01f3\u01f4\5\u00a0Q\2\u01f4\u01fd\7j\2\2\u01f5")
        buf.write("\u01fa\5(\25\2\u01f6\u01f7\7\33\2\2\u01f7\u01f9\5(\25")
        buf.write("\2\u01f8\u01f6\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa\u01f8")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc")
        buf.write("\u01fa\3\2\2\2\u01fd\u01f5\3\2\2\2\u01fd\u01fe\3\2\2\2")
        buf.write("\u01fe\u01ff\3\2\2\2\u01ff\u0200\7n\2\2\u0200\u0207\3")
        buf.write("\2\2\2\u0201\u0203\5\u00a0Q\2\u0202\u0204\t\7\2\2\u0203")
        buf.write("\u0202\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2")
        buf.write("\u0205\u0207\5\u009aN\2\u0206\u01e4\3\2\2\2\u0206\u01f3")
        buf.write("\3\2\2\2\u0206\u0201\3\2\2\2\u0206\u0205\3\2\2\2\u0207")
        buf.write("\u0210\3\2\2\2\u0208\u0209\f\6\2\2\u0209\u020a\t\b\2\2")
        buf.write("\u020a\u020f\5(\25\7\u020b\u020c\f\5\2\2\u020c\u020d\7")
        buf.write("\7\2\2\u020d\u020f\7\b\2\2\u020e\u0208\3\2\2\2\u020e\u020b")
        buf.write("\3\2\2\2\u020f\u0212\3\2\2\2\u0210\u020e\3\2\2\2\u0210")
        buf.write("\u0211\3\2\2\2\u0211)\3\2\2\2\u0212\u0210\3\2\2\2\u0213")
        buf.write("\u0214\t\t\2\2\u0214\u0215\5(\25\2\u0215+\3\2\2\2\u0216")
        buf.write("\u0217\7\"\2\2\u0217\u0218\5.\30\2\u0218\u0219\5\26\f")
        buf.write("\2\u0219\u023c\3\2\2\2\u021a\u021b\7#\2\2\u021b\u021c")
        buf.write("\5.\30\2\u021c\u021d\5\26\f\2\u021d\u023c\3\2\2\2\u021e")
        buf.write("\u021f\7$\2\2\u021f\u0220\5.\30\2\u0220\u0221\5\26\f\2")
        buf.write("\u0221\u023c\3\2\2\2\u0222\u0223\7$\2\2\u0223\u0224\5")
        buf.write("\64\33\2\u0224\u0225\5\26\f\2\u0225\u023c\3\2\2\2\u0226")
        buf.write("\u0227\5\64\33\2\u0227\u0228\t\n\2\2\u0228\u0229\5\60")
        buf.write("\31\2\u0229\u023c\3\2\2\2\u022a\u022b\5.\30\2\u022b\u022c")
        buf.write("\5\u00b6\\\2\u022c\u022d\7%\2\2\u022d\u022e\5\60\31\2")
        buf.write("\u022e\u023c\3\2\2\2\u022f\u0230\5.\30\2\u0230\u0231\7")
        buf.write("%\2\2\u0231\u0232\5\60\31\2\u0232\u023c\3\2\2\2\u0233")
        buf.write("\u0234\5.\30\2\u0234\u0235\7&\2\2\u0235\u0236\5\60\31")
        buf.write("\2\u0236\u023c\3\2\2\2\u0237\u0238\5.\30\2\u0238\u0239")
        buf.write("\7(\2\2\u0239\u023a\5\60\31\2\u023a\u023c\3\2\2\2\u023b")
        buf.write("\u0216\3\2\2\2\u023b\u021a\3\2\2\2\u023b\u021e\3\2\2\2")
        buf.write("\u023b\u0222\3\2\2\2\u023b\u0226\3\2\2\2\u023b\u022a\3")
        buf.write("\2\2\2\u023b\u022f\3\2\2\2\u023b\u0233\3\2\2\2\u023b\u0237")
        buf.write("\3\2\2\2\u023c-\3\2\2\2\u023d\u023f\5\u00a0Q\2\u023e\u0240")
        buf.write("\5*\26\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2\2\u0240")
        buf.write("\u024e\3\2\2\2\u0241\u0246\5\66\34\2\u0242\u0243\7\33")
        buf.write("\2\2\u0243\u0245\5\66\34\2\u0244\u0242\3\2\2\2\u0245\u0248")
        buf.write("\3\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u024e\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024e\58\35\2")
        buf.write("\u024a\u024b\58\35\2\u024b\u024c\5\u0086D\2\u024c\u024e")
        buf.write("\3\2\2\2\u024d\u023d\3\2\2\2\u024d\u0241\3\2\2\2\u024d")
        buf.write("\u0249\3\2\2\2\u024d\u024a\3\2\2\2\u024e/\3\2\2\2\u024f")
        buf.write("\u0263\5\34\17\2\u0250\u0263\5\32\16\2\u0251\u0263\5\4")
        buf.write("\3\2\u0252\u0256\7\3\2\2\u0253\u0255\5\4\3\2\u0254\u0253")
        buf.write("\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256")
        buf.write("\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u0256\3\2\2\2")
        buf.write("\u0259\u0263\7\4\2\2\u025a\u025e\7\23\2\2\u025b\u025d")
        buf.write("\5\4\3\2\u025c\u025b\3\2\2\2\u025d\u0260\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0261\3\2\2\2")
        buf.write("\u0260\u025e\3\2\2\2\u0261\u0263\7\24\2\2\u0262\u024f")
        buf.write("\3\2\2\2\u0262\u0250\3\2\2\2\u0262\u0251\3\2\2\2\u0262")
        buf.write("\u0252\3\2\2\2\u0262\u025a\3\2\2\2\u0263\61\3\2\2\2\u0264")
        buf.write("\u0266\5(\25\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u0267\3\2\2\2\u0267\u027c\5\u00a0Q\2\u0268\u026a")
        buf.write("\5(\25\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a")
        buf.write("\u026b\3\2\2\2\u026b\u026c\5\u00a0Q\2\u026c\u026d\7\21")
        buf.write("\2\2\u026d\u027c\3\2\2\2\u026e\u0270\5(\25\2\u026f\u026e")
        buf.write("\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0272\5\u00a0Q\2\u0272\u0273\7 \2\2\u0273\u027c\3\2\2")
        buf.write("\2\u0274\u0276\5(\25\2\u0275\u0274\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0278\5\u00a0Q\2\u0278")
        buf.write("\u0279\7\37\2\2\u0279\u027a\5\u00a0Q\2\u027a\u027c\3\2")
        buf.write("\2\2\u027b\u0265\3\2\2\2\u027b\u0269\3\2\2\2\u027b\u026f")
        buf.write("\3\2\2\2\u027b\u0275\3\2\2\2\u027c\63\3\2\2\2\u027d\u027e")
        buf.write("\5\u00a0Q\2\u027e\u027f\7\5\2\2\u027f\u0284\5\62\32\2")
        buf.write("\u0280\u0281\7\33\2\2\u0281\u0283\5\62\32\2\u0282\u0280")
        buf.write("\3\2\2\2\u0283\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284")
        buf.write("\u0285\3\2\2\2\u0285\u0288\3\2\2\2\u0286\u0284\3\2\2\2")
        buf.write("\u0287\u0289\7\33\2\2\u0288\u0287\3\2\2\2\u0288\u0289")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c\7\6\2\2\u028b")
        buf.write("\u028d\5*\26\2\u028c\u028b\3\2\2\2\u028c\u028d\3\2\2\2")
        buf.write("\u028d\65\3\2\2\2\u028e\u0290\58\35\2\u028f\u0291\5*\26")
        buf.write("\2\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0294")
        buf.write("\3\2\2\2\u0292\u0294\7>\2\2\u0293\u028e\3\2\2\2\u0293")
        buf.write("\u0292\3\2\2\2\u0294\67\3\2\2\2\u0295\u029a\7Z\2\2\u0296")
        buf.write("\u0297\7[\2\2\u0297\u0298\7^\2\2\u0298\u029a\5\u00a0Q")
        buf.write("\2\u0299\u0295\3\2\2\2\u0299\u0296\3\2\2\2\u029a9\3\2")
        buf.write("\2\2\u029b\u029c\7)\2\2\u029c\u02a2\5<\37\2\u029d\u029e")
        buf.write("\7)\2\2\u029e\u02a2\5> \2\u029f\u02a0\7)\2\2\u02a0\u02a2")
        buf.write("\5@!\2\u02a1\u029b\3\2\2\2\u02a1\u029d\3\2\2\2\u02a1\u029f")
        buf.write("\3\2\2\2\u02a2;\3\2\2\2\u02a3\u02a4\5P)\2\u02a4\u02a5")
        buf.write("\5\34\17\2\u02a5\u02aa\3\2\2\2\u02a6\u02a7\5P)\2\u02a7")
        buf.write("\u02a8\5\26\f\2\u02a8\u02aa\3\2\2\2\u02a9\u02a3\3\2\2")
        buf.write("\2\u02a9\u02a6\3\2\2\2\u02aa=\3\2\2\2\u02ab\u02ac\5P)")
        buf.write("\2\u02ac\u02ad\5\30\r\2\u02ad\u02ae\7*\2\2\u02ae\u02af")
        buf.write("\5\34\17\2\u02af\u02b6\3\2\2\2\u02b0\u02b1\5P)\2\u02b1")
        buf.write("\u02b2\5\30\r\2\u02b2\u02b3\7*\2\2\u02b3\u02b4\5\26\f")
        buf.write("\2\u02b4\u02b6\3\2\2\2\u02b5\u02ab\3\2\2\2\u02b5\u02b0")
        buf.write("\3\2\2\2\u02b6?\3\2\2\2\u02b7\u02b8\5P)\2\u02b8\u02ba")
        buf.write("\5\30\r\2\u02b9\u02bb\5D#\2\u02ba\u02b9\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2")
        buf.write("\u02bd\u02be\3\2\2\2\u02be\u02bf\7*\2\2\u02bf\u02c0\5")
        buf.write("\34\17\2\u02c0\u02d7\3\2\2\2\u02c1\u02c2\5P)\2\u02c2\u02c4")
        buf.write("\5\30\r\2\u02c3\u02c5\5D#\2\u02c4\u02c3\3\2\2\2\u02c5")
        buf.write("\u02c6\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02c8\3\2\2\2\u02c8\u02c9\7*\2\2\u02c9\u02ca\5")
        buf.write("\26\f\2\u02ca\u02d7\3\2\2\2\u02cb\u02cc\5P)\2\u02cc\u02d0")
        buf.write("\5\30\r\2\u02cd\u02cf\5D#\2\u02ce\u02cd\3\2\2\2\u02cf")
        buf.write("\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u02d3\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3\u02d4\5")
        buf.write("B\"\2\u02d4\u02d5\5<\37\2\u02d5\u02d7\3\2\2\2\u02d6\u02b7")
        buf.write("\3\2\2\2\u02d6\u02c1\3\2\2\2\u02d6\u02cb\3\2\2\2\u02d7")
        buf.write("A\3\2\2\2\u02d8\u02dc\7+\2\2\u02d9\u02da\7*\2\2\u02da")
        buf.write("\u02dc\7)\2\2\u02db\u02d8\3\2\2\2\u02db\u02d9\3\2\2\2")
        buf.write("\u02dcC\3\2\2\2\u02dd\u02de\5B\"\2\u02de\u02df\5P)\2\u02df")
        buf.write("\u02e0\5\30\r\2\u02e0E\3\2\2\2\u02e1\u02e2\7,\2\2\u02e2")
        buf.write("\u02e3\5P)\2\u02e3\u02e4\5J&\2\u02e4G\3\2\2\2\u02e5\u02e6")
        buf.write("\7-\2\2\u02e6\u02e7\5\34\17\2\u02e7\u02e8\7\23\2\2\u02e8")
        buf.write("\u02e9\5\30\r\2\u02e9\u02f9\3\2\2\2\u02ea\u02eb\5\34\17")
        buf.write("\2\u02eb\u02ec\7\60\2\2\u02ec\u02ed\5\30\r\2\u02ed\u02f9")
        buf.write("\3\2\2\2\u02ee\u02ef\7.\2\2\u02ef\u02f0\7\23\2\2\u02f0")
        buf.write("\u02f9\5\30\r\2\u02f1\u02f2\7-\2\2\u02f2\u02f3\7\21\2")
        buf.write("\2\u02f3\u02f4\7\23\2\2\u02f4\u02f9\5\30\r\2\u02f5\u02f6")
        buf.write("\7\21\2\2\u02f6\u02f7\7\60\2\2\u02f7\u02f9\5\30\r\2\u02f8")
        buf.write("\u02e5\3\2\2\2\u02f8\u02ea\3\2\2\2\u02f8\u02ee\3\2\2\2")
        buf.write("\u02f8\u02f1\3\2\2\2\u02f8\u02f5\3\2\2\2\u02f9I\3\2\2")
        buf.write("\2\u02fa\u02fe\7\3\2\2\u02fb\u02fd\5H%\2\u02fc\u02fb\3")
        buf.write("\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff")
        buf.write("\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u02fe\3\2\2\2\u0301")
        buf.write("\u030b\7\4\2\2\u0302\u0306\7\23\2\2\u0303\u0305\5H%\2")
        buf.write("\u0304\u0303\3\2\2\2\u0305\u0308\3\2\2\2\u0306\u0304\3")
        buf.write("\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3\2\2\2\u0308\u0306")
        buf.write("\3\2\2\2\u0309\u030b\7\24\2\2\u030a\u02fa\3\2\2\2\u030a")
        buf.write("\u0302\3\2\2\2\u030bK\3\2\2\2\u030c\u030d\7/\2\2\u030d")
        buf.write("\u030e\5P)\2\u030e\u030f\5N(\2\u030fM\3\2\2\2\u0310\u0313")
        buf.write("\5\34\17\2\u0311\u0313\5\26\f\2\u0312\u0310\3\2\2\2\u0312")
        buf.write("\u0311\3\2\2\2\u0313O\3\2\2\2\u0314\u031a\5\34\17\2\u0315")
        buf.write("\u0316\7\5\2\2\u0316\u0317\5\34\17\2\u0317\u0318\7\6\2")
        buf.write("\2\u0318\u031a\3\2\2\2\u0319\u0314\3\2\2\2\u0319\u0315")
        buf.write("\3\2\2\2\u031aQ\3\2\2\2\u031b\u031c\7\61\2\2\u031c\u031f")
        buf.write("\5\30\r\2\u031d\u031e\7\62\2\2\u031e\u0320\5T+\2\u031f")
        buf.write("\u031d\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u031f\3\2\2\2")
        buf.write("\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\5")
        buf.write("V,\2\u0324\u0334\3\2\2\2\u0325\u0326\7\61\2\2\u0326\u0327")
        buf.write("\5\30\r\2\u0327\u0328\7\62\2\2\u0328\u0329\5\u00a0Q\2")
        buf.write("\u0329\u032a\5\30\r\2\u032a\u0334\3\2\2\2\u032b\u032c")
        buf.write("\7\61\2\2\u032c\u032d\5\30\r\2\u032d\u032e\7\62\2\2\u032e")
        buf.write("\u032f\7\5\2\2\u032f\u0330\5\u00a0Q\2\u0330\u0331\7\6")
        buf.write("\2\2\u0331\u0332\5\30\r\2\u0332\u0334\3\2\2\2\u0333\u031b")
        buf.write("\3\2\2\2\u0333\u0325\3\2\2\2\u0333\u032b\3\2\2\2\u0334")
        buf.write("S\3\2\2\2\u0335\u0336\5\u00a0Q\2\u0336\u0337\5\30\r\2")
        buf.write("\u0337\u033e\3\2\2\2\u0338\u0339\7\5\2\2\u0339\u033a\5")
        buf.write("\u00a0Q\2\u033a\u033b\7\6\2\2\u033b\u033c\5\30\r\2\u033c")
        buf.write("\u033e\3\2\2\2\u033d\u0335\3\2\2\2\u033d\u0338\3\2\2\2")
        buf.write("\u033eU\3\2\2\2\u033f\u0340\7\63\2\2\u0340\u0341\5\26")
        buf.write("\f\2\u0341W\3\2\2\2\u0342\u0343\7\65\2\2\u0343\u0344\7")
        buf.write("\5\2\2\u0344\u0345\5\32\16\2\u0345\u0346\7\6\2\2\u0346")
        buf.write("\u0347\5\26\f\2\u0347\u034f\3\2\2\2\u0348\u0349\7\65\2")
        buf.write("\2\u0349\u034a\5\u00a0Q\2\u034a\u034b\7\64\2\2\u034b\u034c")
        buf.write("\5\34\17\2\u034c\u034d\5\26\f\2\u034d\u034f\3\2\2\2\u034e")
        buf.write("\u0342\3\2\2\2\u034e\u0348\3\2\2\2\u034fY\3\2\2\2\u0350")
        buf.write("\u0351\7\66\2\2\u0351\u0352\5P)\2\u0352\u0353\5\26\f\2")
        buf.write("\u0353[\3\2\2\2\u0354\u0358\79\2\2\u0355\u0357\5\u00a0")
        buf.write("Q\2\u0356\u0355\3\2\2\2\u0357\u035a\3\2\2\2\u0358\u0356")
        buf.write("\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2\u035a")
        buf.write("\u0358\3\2\2\2\u035b\u0365\5\4\3\2\u035c\u0360\79\2\2")
        buf.write("\u035d\u035f\5\u00a0Q\2\u035e\u035d\3\2\2\2\u035f\u0362")
        buf.write("\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361")
        buf.write("\u0363\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0365\5\26\f")
        buf.write("\2\u0364\u0354\3\2\2\2\u0364\u035c\3\2\2\2\u0365]\3\2")
        buf.write("\2\2\u0366\u0368\5\6\4\2\u0367\u0369\5h\65\2\u0368\u0367")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u039c\3\2\2\2\u036a")
        buf.write("\u036c\5f\64\2\u036b\u036a\3\2\2\2\u036c\u036f\3\2\2\2")
        buf.write("\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u0370\3")
        buf.write("\2\2\2\u036f\u036d\3\2\2\2\u0370\u0372\5\u00a0Q\2\u0371")
        buf.write("\u0373\5*\26\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2")
        buf.write("\u0373\u0375\3\2\2\2\u0374\u0376\5h\65\2\u0375\u0374\3")
        buf.write("\2\2\2\u0375\u0376\3\2\2\2\u0376\u039c\3\2\2\2\u0377\u0379")
        buf.write("\5f\64\2\u0378\u0377\3\2\2\2\u0379\u037c\3\2\2\2\u037a")
        buf.write("\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037d\3\2\2\2")
        buf.write("\u037c\u037a\3\2\2\2\u037d\u037f\5\u00a0Q\2\u037e\u0380")
        buf.write("\5*\26\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u0381\3\2\2\2\u0381\u0383\5\26\f\2\u0382\u0384\5h\65")
        buf.write("\2\u0383\u0382\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u039c")
        buf.write("\3\2\2\2\u0385\u0387\5f\64\2\u0386\u0385\3\2\2\2\u0387")
        buf.write("\u038a\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2")
        buf.write("\u0389\u038b\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u038c\5")
        buf.write("\u00a0Q\2\u038c\u0390\7\5\2\2\u038d\u038f\5\62\32\2\u038e")
        buf.write("\u038d\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2\2")
        buf.write("\u0390\u0391\3\2\2\2\u0391\u0393\3\2\2\2\u0392\u0390\3")
        buf.write("\2\2\2\u0393\u0395\7\6\2\2\u0394\u0396\5*\26\2\u0395\u0394")
        buf.write("\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u0399\5\26\f\2\u0398\u039a\5h\65\2\u0399\u0398\3\2\2")
        buf.write("\2\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u0366")
        buf.write("\3\2\2\2\u039b\u036d\3\2\2\2\u039b\u037a\3\2\2\2\u039b")
        buf.write("\u0388\3\2\2\2\u039c_\3\2\2\2\u039d\u039e\7:\2\2\u039e")
        buf.write("\u03a0\5\u00a0Q\2\u039f\u03a1\5b\62\2\u03a0\u039f\3\2")
        buf.write("\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3\3\2\2\2\u03a2\u03a4")
        buf.write("\5d\63\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03a5\3\2\2\2\u03a5\u03a9\7\3\2\2\u03a6\u03a8\5^\60\2")
        buf.write("\u03a7\u03a6\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3")
        buf.write("\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\3\2\2\2\u03ab\u03a9")
        buf.write("\3\2\2\2\u03ac\u03ad\7\4\2\2\u03ad\u03c0\3\2\2\2\u03ae")
        buf.write("\u03af\7:\2\2\u03af\u03b1\5\u00a0Q\2\u03b0\u03b2\5b\62")
        buf.write("\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b4")
        buf.write("\3\2\2\2\u03b3\u03b5\5d\63\2\u03b4\u03b3\3\2\2\2\u03b4")
        buf.write("\u03b5\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03ba\7\23\2")
        buf.write("\2\u03b7\u03b9\5^\60\2\u03b8\u03b7\3\2\2\2\u03b9\u03bc")
        buf.write("\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb")
        buf.write("\u03bd\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\7\24\2")
        buf.write("\2\u03be\u03c0\3\2\2\2\u03bf\u039d\3\2\2\2\u03bf\u03ae")
        buf.write("\3\2\2\2\u03c0a\3\2\2\2\u03c1\u03c3\7;\2\2\u03c2\u03c4")
        buf.write("\5\u00a0Q\2\u03c3\u03c2\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5")
        buf.write("\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03d3\3\2\2\2")
        buf.write("\u03c7\u03c8\7\5\2\2\u03c8\u03cd\5\u00a0Q\2\u03c9\u03ca")
        buf.write("\7\33\2\2\u03ca\u03cc\5\u00a0Q\2\u03cb\u03c9\3\2\2\2\u03cc")
        buf.write("\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2")
        buf.write("\u03ce\u03d0\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d1\7")
        buf.write("\6\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03c1\3\2\2\2\u03d2\u03c7")
        buf.write("\3\2\2\2\u03d3c\3\2\2\2\u03d4\u03d6\7<\2\2\u03d5\u03d7")
        buf.write("\5\u00a0Q\2\u03d6\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8")
        buf.write("\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03e9\3\2\2\2")
        buf.write("\u03da\u03db\7=\2\2\u03db\u03e9\5\u00a0Q\2\u03dc\u03dd")
        buf.write("\7=\2\2\u03dd\u03de\7\5\2\2\u03de\u03e3\5\u00a0Q\2\u03df")
        buf.write("\u03e0\7\33\2\2\u03e0\u03e2\5\u00a0Q\2\u03e1\u03df\3\2")
        buf.write("\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4")
        buf.write("\3\2\2\2\u03e4\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6")
        buf.write("\u03e7\7\6\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03d4\3\2\2\2")
        buf.write("\u03e8\u03da\3\2\2\2\u03e8\u03dc\3\2\2\2\u03e9e\3\2\2")
        buf.write("\2\u03ea\u03ef\5\u00a0Q\2\u03eb\u03ef\7\"\2\2\u03ec\u03ef")
        buf.write("\7#\2\2\u03ed\u03ef\7$\2\2\u03ee\u03ea\3\2\2\2\u03ee\u03eb")
        buf.write("\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ed\3\2\2\2\u03ef")
        buf.write("g\3\2\2\2\u03f0\u03f1\t\13\2\2\u03f1i\3\2\2\2\u03f2\u03f3")
        buf.write("\7C\2\2\u03f3\u03f5\5\u00a0Q\2\u03f4\u03f6\5b\62\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8\3\2\2\2")
        buf.write("\u03f7\u03f9\5d\63\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9\3")
        buf.write("\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fe\7\3\2\2\u03fb\u03fd")
        buf.write("\5r:\2\u03fc\u03fb\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc")
        buf.write("\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401\3\2\2\2\u0400")
        buf.write("\u03fe\3\2\2\2\u0401\u0402\7\4\2\2\u0402\u0415\3\2\2\2")
        buf.write("\u0403\u0404\7C\2\2\u0404\u0406\5\u00a0Q\2\u0405\u0407")
        buf.write("\5b\62\2\u0406\u0405\3\2\2\2\u0406\u0407\3\2\2\2\u0407")
        buf.write("\u0409\3\2\2\2\u0408\u040a\5d\63\2\u0409\u0408\3\2\2\2")
        buf.write("\u0409\u040a\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040f\7")
        buf.write("\23\2\2\u040c\u040e\5r:\2\u040d\u040c\3\2\2\2\u040e\u0411")
        buf.write("\3\2\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410")
        buf.write("\u0412\3\2\2\2\u0411\u040f\3\2\2\2\u0412\u0413\7\24\2")
        buf.write("\2\u0413\u0415\3\2\2\2\u0414\u03f2\3\2\2\2\u0414\u0403")
        buf.write("\3\2\2\2\u0415k\3\2\2\2\u0416\u0417\7B\2\2\u0417\u0419")
        buf.write("\5\u00a0Q\2\u0418\u041a\5b\62\2\u0419\u0418\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u041c\3\2\2\2\u041b\u041d\5d\63\2")
        buf.write("\u041c\u041b\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e\3")
        buf.write("\2\2\2\u041e\u041f\7\3\2\2\u041f\u0420\5t;\2\u0420\u0421")
        buf.write("\7\4\2\2\u0421\u0434\3\2\2\2\u0422\u0423\7B\2\2\u0423")
        buf.write("\u0425\5\u00a0Q\2\u0424\u0426\5b\62\2\u0425\u0424\3\2")
        buf.write("\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u0429")
        buf.write("\5d\63\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429")
        buf.write("\u042a\3\2\2\2\u042a\u042e\7\23\2\2\u042b\u042d\5t;\2")
        buf.write("\u042c\u042b\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3")
        buf.write("\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u042e")
        buf.write("\3\2\2\2\u0431\u0432\7\24\2\2\u0432\u0434\3\2\2\2\u0433")
        buf.write("\u0416\3\2\2\2\u0433\u0422\3\2\2\2\u0434m\3\2\2\2\u0435")
        buf.write("\u0436\7A\2\2\u0436\u0438\5\u00a0Q\2\u0437\u0439\5b\62")
        buf.write("\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b")
        buf.write("\3\2\2\2\u043a\u043c\5d\63\2\u043b\u043a\3\2\2\2\u043b")
        buf.write("\u043c\3\2\2\2\u043c\u043d\3\2\2\2\u043d\u0441\7\3\2\2")
        buf.write("\u043e\u0440\5z>\2\u043f\u043e\3\2\2\2\u0440\u0443\3\2")
        buf.write("\2\2\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0444")
        buf.write("\3\2\2\2\u0443\u0441\3\2\2\2\u0444\u0445\7\4\2\2\u0445")
        buf.write("\u0458\3\2\2\2\u0446\u0447\7A\2\2\u0447\u0449\5\u00a0")
        buf.write("Q\2\u0448\u044a\5b\62\2\u0449\u0448\3\2\2\2\u0449\u044a")
        buf.write("\3\2\2\2\u044a\u044c\3\2\2\2\u044b\u044d\5d\63\2\u044c")
        buf.write("\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2")
        buf.write("\u044e\u0452\7\23\2\2\u044f\u0451\5z>\2\u0450\u044f\3")
        buf.write("\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453")
        buf.write("\3\2\2\2\u0453\u0455\3\2\2\2\u0454\u0452\3\2\2\2\u0455")
        buf.write("\u0456\7\24\2\2\u0456\u0458\3\2\2\2\u0457\u0435\3\2\2")
        buf.write("\2\u0457\u0446\3\2\2\2\u0458o\3\2\2\2\u0459\u045b\7@\2")
        buf.write("\2\u045a\u045c\t\f\2\2\u045b\u045a\3\2\2\2\u045b\u045c")
        buf.write("\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045f\5\u00a0Q\2\u045e")
        buf.write("\u0460\5b\62\2\u045f\u045e\3\2\2\2\u045f\u0460\3\2\2\2")
        buf.write("\u0460\u0462\3\2\2\2\u0461\u0463\5d\63\2\u0462\u0461\3")
        buf.write("\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0468")
        buf.write("\7\3\2\2\u0465\u0467\5|?\2\u0466\u0465\3\2\2\2\u0467\u046a")
        buf.write("\3\2\2\2\u0468\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469")
        buf.write("\u046b\3\2\2\2\u046a\u0468\3\2\2\2\u046b\u046c\7\4\2\2")
        buf.write("\u046c\u0482\3\2\2\2\u046d\u046f\7@\2\2\u046e\u0470\t")
        buf.write("\f\2\2\u046f\u046e\3\2\2\2\u046f\u0470\3\2\2\2\u0470\u0471")
        buf.write("\3\2\2\2\u0471\u0473\5\u00a0Q\2\u0472\u0474\5b\62\2\u0473")
        buf.write("\u0472\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2")
        buf.write("\u0475\u0477\5d\63\2\u0476\u0475\3\2\2\2\u0476\u0477\3")
        buf.write("\2\2\2\u0477\u0478\3\2\2\2\u0478\u047c\7\23\2\2\u0479")
        buf.write("\u047b\5|?\2\u047a\u0479\3\2\2\2\u047b\u047e\3\2\2\2\u047c")
        buf.write("\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047f\3\2\2\2")
        buf.write("\u047e\u047c\3\2\2\2\u047f\u0480\7\24\2\2\u0480\u0482")
        buf.write("\3\2\2\2\u0481\u0459\3\2\2\2\u0481\u046d\3\2\2\2\u0482")
        buf.write("q\3\2\2\2\u0483\u0486\5t;\2\u0484\u0486\5z>\2\u0485\u0483")
        buf.write("\3\2\2\2\u0485\u0484\3\2\2\2\u0486s\3\2\2\2\u0487\u0488")
        buf.write("\5v<\2\u0488\u0489\7\23\2\2\u0489\u048b\5(\25\2\u048a")
        buf.write("\u048c\5h\65\2\u048b\u048a\3\2\2\2\u048b\u048c\3\2\2\2")
        buf.write("\u048cu\3\2\2\2\u048d\u048e\5\u00a0Q\2\u048e\u0490\7\5")
        buf.write("\2\2\u048f\u0491\5x=\2\u0490\u048f\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0494\7\6\2\2\u0493")
        buf.write("\u0495\7\37\2\2\u0494\u0493\3\2\2\2\u0494\u0495\3\2\2")
        buf.write("\2\u0495w\3\2\2\2\u0496\u0497\5(\25\2\u0497\u049e\5\u00a0")
        buf.write("Q\2\u0498\u0499\7\33\2\2\u0499\u049a\5(\25\2\u049a\u049b")
        buf.write("\5\u00a0Q\2\u049b\u049d\3\2\2\2\u049c\u0498\3\2\2\2\u049d")
        buf.write("\u04a0\3\2\2\2\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2")
        buf.write("\u049fy\3\2\2\2\u04a0\u049e\3\2\2\2\u04a1\u04a2\5\u00a0")
        buf.write("Q\2\u04a2\u04a3\7\37\2\2\u04a3\u04a4\7\23\2\2\u04a4\u04a6")
        buf.write("\5(\25\2\u04a5\u04a7\5h\65\2\u04a6\u04a5\3\2\2\2\u04a6")
        buf.write("\u04a7\3\2\2\2\u04a7{\3\2\2\2\u04a8\u04aa\5\u00a0Q\2\u04a9")
        buf.write("\u04ab\5h\65\2\u04aa\u04a9\3\2\2\2\u04aa\u04ab\3\2\2\2")
        buf.write("\u04ab\u04b3\3\2\2\2\u04ac\u04ad\5\u00a0Q\2\u04ad\u04ae")
        buf.write("\7\23\2\2\u04ae\u04b0\5~@\2\u04af\u04b1\5h\65\2\u04b0")
        buf.write("\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2")
        buf.write("\u04b2\u04a8\3\2\2\2\u04b2\u04ac\3\2\2\2\u04b3}\3\2\2")
        buf.write("\2\u04b4\u04ba\5\u0082B\2\u04b5\u04b6\5\u00a0Q\2\u04b6")
        buf.write("\u04b7\7\35\2\2\u04b7\u04b8\5\u00a0Q\2\u04b8\u04ba\3\2")
        buf.write("\2\2\u04b9\u04b4\3\2\2\2\u04b9\u04b5\3\2\2\2\u04ba\177")
        buf.write("\3\2\2\2\u04bb\u04c5\5\u0082B\2\u04bc\u04c5\5\u009cO\2")
        buf.write("\u04bd\u04c5\5\u009eP\2\u04be\u04c5\5\u00a0Q\2\u04bf\u04c5")
        buf.write("\58\35\2\u04c0\u04c5\5\u0092J\2\u04c1\u04c5\5\u008cG\2")
        buf.write("\u04c2\u04c5\5\u0086D\2\u04c3\u04c5\5\u00a2R\2\u04c4\u04bb")
        buf.write("\3\2\2\2\u04c4\u04bc\3\2\2\2\u04c4\u04bd\3\2\2\2\u04c4")
        buf.write("\u04be\3\2\2\2\u04c4\u04bf\3\2\2\2\u04c4\u04c0\3\2\2\2")
        buf.write("\u04c4\u04c1\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c3\3")
        buf.write("\2\2\2\u04c5\u0081\3\2\2\2\u04c6\u04cb\5\u0096L\2\u04c7")
        buf.write("\u04cb\5\u0098M\2\u04c8\u04cb\5\u009aN\2\u04c9\u04cb\5")
        buf.write("\u0084C\2\u04ca\u04c6\3\2\2\2\u04ca\u04c7\3\2\2\2\u04ca")
        buf.write("\u04c8\3\2\2\2\u04ca\u04c9\3\2\2\2\u04cb\u0083\3\2\2\2")
        buf.write("\u04cc\u04cd\t\r\2\2\u04cd\u0085\3\2\2\2\u04ce\u04cf\7")
        buf.write("\7\2\2\u04cf\u04d6\5\u0088E\2\u04d0\u04d2\7\33\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2")
        buf.write("\u04d3\u04d5\5\u0088E\2\u04d4\u04d1\3\2\2\2\u04d5\u04d8")
        buf.write("\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7")
        buf.write("\u04d9\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9\u04da\7\b\2\2")
        buf.write("\u04da\u04e9\3\2\2\2\u04db\u04dc\7\t\2\2\u04dc\u04e3\5")
        buf.write("\u0088E\2\u04dd\u04df\7\33\2\2\u04de\u04dd\3\2\2\2\u04de")
        buf.write("\u04df\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e2\5\u0088")
        buf.write("E\2\u04e1\u04de\3\2\2\2\u04e2\u04e5\3\2\2\2\u04e3\u04e1")
        buf.write("\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5")
        buf.write("\u04e3\3\2\2\2\u04e6\u04e7\7\t\2\2\u04e7\u04e9\3\2\2\2")
        buf.write("\u04e8\u04ce\3\2\2\2\u04e8\u04db\3\2\2\2\u04e9\u0087\3")
        buf.write("\2\2\2\u04ea\u04ed\5\u008aF\2\u04eb\u04ed\5\u0092J\2\u04ec")
        buf.write("\u04ea\3\2\2\2\u04ec\u04eb\3\2\2\2\u04ed\u051c\3\2\2\2")
        buf.write("\u04ee\u051c\7\23\2\2\u04ef\u04f0\7\'\2\2\u04f0\u051c")
        buf.write("\5\u008aF\2\u04f1\u04f2\7\23\2\2\u04f2\u04f3\7\23\2\2")
        buf.write("\u04f3\u051c\5\u008aF\2\u04f4\u04f5\7\23\2\2\u04f5\u04f7")
        buf.write("\5\u008aF\2\u04f6\u04f8\7\23\2\2\u04f7\u04f6\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u051c\3\2\2\2\u04f9\u04fa\7\23\2")
        buf.write("\2\u04fa\u04fb\5\u008aF\2\u04fb\u04fc\7\23\2\2\u04fc\u04fd")
        buf.write("\5\u008aF\2\u04fd\u051c\3\2\2\2\u04fe\u04ff\5\u008aF\2")
        buf.write("\u04ff\u0500\7\'\2\2\u0500\u051c\3\2\2\2\u0501\u0502\5")
        buf.write("\u008aF\2\u0502\u0504\7\23\2\2\u0503\u0505\7\23\2\2\u0504")
        buf.write("\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u051c\3\2\2\2")
        buf.write("\u0506\u0507\5\u008aF\2\u0507\u0508\7\'\2\2\u0508\u0509")
        buf.write("\5\u008aF\2\u0509\u051c\3\2\2\2\u050a\u050b\5\u008aF\2")
        buf.write("\u050b\u050c\7\23\2\2\u050c\u050d\7\23\2\2\u050d\u050e")
        buf.write("\5\u008aF\2\u050e\u051c\3\2\2\2\u050f\u0510\5\u008aF\2")
        buf.write("\u0510\u0511\7\23\2\2\u0511\u0513\5\u008aF\2\u0512\u0514")
        buf.write("\7\23\2\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514")
        buf.write("\u051c\3\2\2\2\u0515\u0516\5\u008aF\2\u0516\u0517\7\23")
        buf.write("\2\2\u0517\u0518\5\u008aF\2\u0518\u0519\7\23\2\2\u0519")
        buf.write("\u051a\5\u008aF\2\u051a\u051c\3\2\2\2\u051b\u04ec\3\2")
        buf.write("\2\2\u051b\u04ee\3\2\2\2\u051b\u04ef\3\2\2\2\u051b\u04f1")
        buf.write("\3\2\2\2\u051b\u04f4\3\2\2\2\u051b\u04f9\3\2\2\2\u051b")
        buf.write("\u04fe\3\2\2\2\u051b\u0501\3\2\2\2\u051b\u0506\3\2\2\2")
        buf.write("\u051b\u050a\3\2\2\2\u051b\u050f\3\2\2\2\u051b\u0515\3")
        buf.write("\2\2\2\u051c\u0089\3\2\2\2\u051d\u0523\5\u00a0Q\2\u051e")
        buf.write("\u0520\t\16\2\2\u051f\u051e\3\2\2\2\u051f\u0520\3\2\2")
        buf.write("\2\u0520\u0521\3\2\2\2\u0521\u0523\5\u009aN\2\u0522\u051d")
        buf.write("\3\2\2\2\u0522\u051f\3\2\2\2\u0523\u008b\3\2\2\2\u0524")
        buf.write("\u0526\7\3\2\2\u0525\u0527\5\u008eH\2\u0526\u0525\3\2")
        buf.write("\2\2\u0526\u0527\3\2\2\2\u0527\u052c\3\2\2\2\u0528\u0529")
        buf.write("\7\33\2\2\u0529\u052b\5\u008eH\2\u052a\u0528\3\2\2\2\u052b")
        buf.write("\u052e\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2")
        buf.write("\u052d\u0530\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0531\7")
        buf.write("\33\2\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2\2\u0531")
        buf.write("\u0532\3\2\2\2\u0532\u0533\7\4\2\2\u0533\u008d\3\2\2\2")
        buf.write("\u0534\u0535\5\u0090I\2\u0535\u0536\7\23\2\2\u0536\u0537")
        buf.write("\5\u0094K\2\u0537\u008f\3\2\2\2\u0538\u053c\5\u009aN\2")
        buf.write("\u0539\u053c\5\u00a0Q\2\u053a\u053c\5\u009cO\2\u053b\u0538")
        buf.write("\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053a\3\2\2\2\u053c")
        buf.write("\u0091\3\2\2\2\u053d\u053f\7\7\2\2\u053e\u0540\5\u0094")
        buf.write("K\2\u053f\u053e\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0545")
        buf.write("\3\2\2\2\u0541\u0542\7\33\2\2\u0542\u0544\5\u0094K\2\u0543")
        buf.write("\u0541\3\2\2\2\u0544\u0547\3\2\2\2\u0545\u0543\3\2\2\2")
        buf.write("\u0545\u0546\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545\3")
        buf.write("\2\2\2\u0548\u054a\7\33\2\2\u0549\u0548\3\2\2\2\u0549")
        buf.write("\u054a\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\7\b\2\2")
        buf.write("\u054c\u0093\3\2\2\2\u054d\u0551\5\u0080A\2\u054e\u0551")
        buf.write("\5\34\17\2\u054f\u0551\5\4\3\2\u0550\u054d\3\2\2\2\u0550")
        buf.write("\u054e\3\2\2\2\u0550\u054f\3\2\2\2\u0551\u0095\3\2\2\2")
        buf.write("\u0552\u0553\t\17\2\2\u0553\u0554\5\u00a0Q\2\u0554\u0097")
        buf.write("\3\2\2\2\u0555\u0556\t\20\2\2\u0556\u0099\3\2\2\2\u0557")
        buf.write("\u0558\7M\2\2\u0558\u009b\3\2\2\2\u0559\u055f\7T\2\2\u055a")
        buf.write("\u055f\7P\2\2\u055b\u055f\7Q\2\2\u055c\u055f\7R\2\2\u055d")
        buf.write("\u055f\7S\2\2\u055e\u0559\3\2\2\2\u055e\u055a\3\2\2\2")
        buf.write("\u055e\u055b\3\2\2\2\u055e\u055c\3\2\2\2\u055e\u055d\3")
        buf.write("\2\2\2\u055f\u009d\3\2\2\2\u0560\u0561\t\21\2\2\u0561")
        buf.write("\u009f\3\2\2\2\u0562\u0566\5$\23\2\u0563\u0566\7\\\2\2")
        buf.write("\u0564\u0566\7[\2\2\u0565\u0562\3\2\2\2\u0565\u0563\3")
        buf.write("\2\2\2\u0565\u0564\3\2\2\2\u0566\u00a1\3\2\2\2\u0567\u0569")
        buf.write("\7]\2\2\u0568\u056a\7M\2\2\u0569\u0568\3\2\2\2\u0569\u056a")
        buf.write("\3\2\2\2\u056a\u056e\3\2\2\2\u056b\u056c\7]\2\2\u056c")
        buf.write("\u056e\5\u00a0Q\2\u056d\u0567\3\2\2\2\u056d\u056b\3\2")
        buf.write("\2\2\u056e\u00a3\3\2\2\2\u056f\u0570\t\16\2\2\u0570\u00a5")
        buf.write("\3\2\2\2\u0571\u0572\t\22\2\2\u0572\u00a7\3\2\2\2\u0573")
        buf.write("\u0574\t\23\2\2\u0574\u00a9\3\2\2\2\u0575\u0576\t\24\2")
        buf.write("\2\u0576\u00ab\3\2\2\2\u0577\u0578\t\25\2\2\u0578\u00ad")
        buf.write("\3\2\2\2\u0579\u057d\t\26\2\2\u057a\u057d\t\27\2\2\u057b")
        buf.write("\u057d\t\30\2\2\u057c\u0579\3\2\2\2\u057c\u057a\3\2\2")
        buf.write("\2\u057c\u057b\3\2\2\2\u057d\u00af\3\2\2\2\u057e\u057f")
        buf.write("\t\31\2\2\u057f\u00b1\3\2\2\2\u0580\u0581\t\32\2\2\u0581")
        buf.write("\u00b3\3\2\2\2\u0582\u0583\t\33\2\2\u0583\u00b5\3\2\2")
        buf.write("\2\u0584\u0585\t\34\2\2\u0585\u00b7\3\2\2\2\u00ba\u00bb")
        buf.write("\u00c3\u00c6\u00ca\u00cd\u00d4\u00d7\u00dc\u00df\u00e4")
        buf.write("\u00e7\u00eb\u00ef\u00f3\u00f5\u00f9\u0100\u010a\u0111")
        buf.write("\u0117\u011c\u011f\u0122\u0135\u013e\u0146\u014c\u0152")
        buf.write("\u0157\u015c\u015e\u0165\u0177\u01a4\u01a6\u01ac\u01b6")
        buf.write("\u01ba\u01c3\u01c7\u01c9\u01d0\u01d9\u01e0\u01e2\u01ec")
        buf.write("\u01ef\u01fa\u01fd\u0203\u0206\u020e\u0210\u023b\u023f")
        buf.write("\u0246\u024d\u0256\u025e\u0262\u0265\u0269\u026f\u0275")
        buf.write("\u027b\u0284\u0288\u028c\u0290\u0293\u0299\u02a1\u02a9")
        buf.write("\u02b5\u02bc\u02c6\u02d0\u02d6\u02db\u02f8\u02fe\u0306")
        buf.write("\u030a\u0312\u0319\u0321\u0333\u033d\u034e\u0358\u0360")
        buf.write("\u0364\u0368\u036d\u0372\u0375\u037a\u037f\u0383\u0388")
        buf.write("\u0390\u0395\u0399\u039b\u03a0\u03a3\u03a9\u03b1\u03b4")
        buf.write("\u03ba\u03bf\u03c5\u03cd\u03d2\u03d8\u03e3\u03e8\u03ee")
        buf.write("\u03f5\u03f8\u03fe\u0406\u0409\u040f\u0414\u0419\u041c")
        buf.write("\u0425\u0428\u042e\u0433\u0438\u043b\u0441\u0449\u044c")
        buf.write("\u0452\u0457\u045b\u045f\u0462\u0468\u046f\u0473\u0476")
        buf.write("\u047c\u0481\u0485\u048b\u0490\u0494\u049e\u04a6\u04aa")
        buf.write("\u04b0\u04b2\u04b9\u04c4\u04ca\u04d1\u04d6\u04de\u04e3")
        buf.write("\u04e8\u04ec\u04f7\u0504\u0513\u051b\u051f\u0522\u0526")
        buf.write("\u052c\u0530\u053b\u053f\u0545\u0549\u0550\u055e\u0565")
        buf.write("\u0569\u056d\u057c")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'using'", 
                     "'expose'", "<INVALID>", "<INVALID>", "'*'", "'/'", 
                     "<INVALID>", "<INVALID>", "'pass'", "'return'", "'yield'", 
                     "'await'", "'break'", "'throw'", "<INVALID>", "'type'", 
                     "'|'", "'&'", "'?'", "'**'", "'^^'", "'val'", "'var'", 
                     "'def'", "'='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'if'", "'else'", "'elseif'", "'switch'", "'case'", 
                     "'default'", "'match'", "<INVALID>", "'try'", "'catch'", 
                     "'final'", "'in'", "'for'", "'while'", "'macro'", "'with'", 
                     "'let'", "'class'", "'extend'", "'act'", "'~'", "'$'", 
                     "'@'", "'enumerate'", "'structure'", "'interface'", 
                     "'trait'", "'+'", "'-'", "'^'", "'\u221A'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*^'", "'/^'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'\\'", "'true'", 
                     "'false'", "'null'", "'nothing'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'#'", "'.'", "'_'", "'#!'", "'///'", 
                     "'%%%'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'<='", "'<'", "<INVALID>", 
                     "<INVALID>", "'>='", "'>'", "'++'", "'\u2295'", "'--'", 
                     "'\u2297'", "'\u2299'", "'//@'", "'//'", "'/@'", "'%%'", 
                     "'%'", "'==='", "'=!='", "'=='", "'~~'", "'~='", "<INVALID>", 
                     "<INVALID>", "'!!'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':?'", "'@@@'", "'@@'", "'@='", "'`'", "'\u00B4'", 
                     "'''", "'...'", "'\u22C5'", "'\u215F'", "'\u00B0'", 
                     "'\u1D40'", "'\u1D34'", "'\u00A7'", "'\u00B6'", "'\u00A4'", 
                     "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "Using", "Expose", 
                      "Divide", "Multiply", "Star", "Slash", "Colon", "End", 
                      "Pass", "Return", "Yield", "Await", "Break", "Throw", 
                      "Comma", "Type", "BitOr", "BitAnd", "Nullable", "Keyword", 
                      "BaseInput", "Val", "Var", "Def", "Set", "Flexible", 
                      "Name", "Delay", "If", "Else", "ElseIf", "Switch", 
                      "Case", "Default", "Match", "Rule", "Try", "Catch", 
                      "Final", "In", "For", "While", "Macro", "With", "Let", 
                      "Class", "Extend", "Act", "Tilde", "Suffix", "Prefix", 
                      "Enumerate", "Structure", "Interface", "Trait", "Plus", 
                      "Minus", "Power", "Surd", "Decimal", "DecimalBad", 
                      "Binary", "Octal", "Hexadecimal", "Integer", "Exponent", 
                      "Base", "StringEscapeBlock", "StringEscapeSingle", 
                      "StringLiteralBlock", "StringLiteralSingle", "StringEmpty", 
                      "Escape", "True", "False", "Null", "Nothing", "Symbols", 
                      "TrueName", "Symbol", "Sharp", "Dot", "Underline", 
                      "Shebang", "Remark", "Comment", "LineComment", "PartComment", 
                      "NewLine", "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "LogicXor", "Decrease", "Kronecker", "TensorProduct", 
                      "MapAll", "Quotient", "Map", "Output", "Modulo", "Equivalent", 
                      "NotEquivalent", "Equal", "Concat", "Destruct", "LogicOr", 
                      "LogicAnd", "DoubleBang", "NotEqual", "BitNot", "LogicNot", 
                      "Elvis", "Curry", "Apply", "LetAssign", "Quote", "Acute", 
                      "Quotation", "Ellipsis", "DOT", "Reciprocal", "Degree", 
                      "Transpose", "Hermitian", "Section", "Pilcrow", "Currency", 
                      "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_exportStatment = 8
    RULE_idTuples = 9
    RULE_blockStatement = 10
    RULE_blockNonEnd = 11
    RULE_expressionStatement = 12
    RULE_expression = 13
    RULE_controlFlow = 14
    RULE_functionCall = 15
    RULE_arguments = 16
    RULE_flowController = 17
    RULE_typeStatement = 18
    RULE_typeExpression = 19
    RULE_typeSuffix = 20
    RULE_assignStatment = 21
    RULE_assignLHS = 22
    RULE_assignRHS = 23
    RULE_parameter = 24
    RULE_functionPattern = 25
    RULE_maybeSymbol = 26
    RULE_symbols = 27
    RULE_ifStatment = 28
    RULE_ifShort = 29
    RULE_ifSingle = 30
    RULE_ifNested = 31
    RULE_elif = 32
    RULE_elseIf = 33
    RULE_switchStatment = 34
    RULE_caseBody = 35
    RULE_switchBody = 36
    RULE_matchStatment = 37
    RULE_matchBody = 38
    RULE_condition = 39
    RULE_tryStatement = 40
    RULE_tryCatch = 41
    RULE_tryFinal = 42
    RULE_forStatement = 43
    RULE_whileStatment = 44
    RULE_letStatment = 45
    RULE_classExpression = 46
    RULE_classStatement = 47
    RULE_classExtend = 48
    RULE_classTrait = 49
    RULE_classController = 50
    RULE_classEos = 51
    RULE_traitStatement = 52
    RULE_interfaceStatement = 53
    RULE_structureStatement = 54
    RULE_enumerateStatement = 55
    RULE_traitExpression = 56
    RULE_interfaceExpression = 57
    RULE_interfaceFunction = 58
    RULE_interfaceParameters = 59
    RULE_structureExpression = 60
    RULE_enumerateExpression = 61
    RULE_enumerateNumber = 62
    RULE_data = 63
    RULE_number = 64
    RULE_byteInput = 65
    RULE_index = 66
    RULE_indexValid = 67
    RULE_indexTerm = 68
    RULE_dict = 69
    RULE_keyValue = 70
    RULE_keyValid = 71
    RULE_list = 72
    RULE_element = 73
    RULE_complex = 74
    RULE_decimal = 75
    RULE_integer = 76
    RULE_string = 77
    RULE_special = 78
    RULE_symbol = 79
    RULE_solt = 80
    RULE_add_ops = 81
    RULE_pre_ops = 82
    RULE_pst_ops = 83
    RULE_bit_ops = 84
    RULE_lgk_ops = 85
    RULE_cpr_ops = 86
    RULE_pow_ops = 87
    RULE_mul_ops = 88
    RULE_list_ops = 89
    RULE_mod_assign = 90

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "exportStatment", 
                   "idTuples", "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "controlFlow", "functionCall", "arguments", 
                   "flowController", "typeStatement", "typeExpression", 
                   "typeSuffix", "assignStatment", "assignLHS", "assignRHS", 
                   "parameter", "functionPattern", "maybeSymbol", "symbols", 
                   "ifStatment", "ifShort", "ifSingle", "ifNested", "elif", 
                   "elseIf", "switchStatment", "caseBody", "switchBody", 
                   "matchStatment", "matchBody", "condition", "tryStatement", 
                   "tryCatch", "tryFinal", "forStatement", "whileStatment", 
                   "letStatment", "classExpression", "classStatement", "classExtend", 
                   "classTrait", "classController", "classEos", "traitStatement", 
                   "interfaceStatement", "structureStatement", "enumerateStatement", 
                   "traitExpression", "interfaceExpression", "interfaceFunction", 
                   "interfaceParameters", "structureExpression", "enumerateExpression", 
                   "enumerateNumber", "data", "number", "byteInput", "index", 
                   "indexValid", "indexTerm", "dict", "keyValue", "keyValid", 
                   "list", "element", "complex", "decimal", "integer", "string", 
                   "special", "symbol", "solt", "add_ops", "pre_ops", "pst_ops", 
                   "bit_ops", "lgk_ops", "cpr_ops", "pow_ops", "mul_ops", 
                   "list_ops", "mod_assign" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    Using=11
    Expose=12
    Divide=13
    Multiply=14
    Star=15
    Slash=16
    Colon=17
    End=18
    Pass=19
    Return=20
    Yield=21
    Await=22
    Break=23
    Throw=24
    Comma=25
    Type=26
    BitOr=27
    BitAnd=28
    Nullable=29
    Keyword=30
    BaseInput=31
    Val=32
    Var=33
    Def=34
    Set=35
    Flexible=36
    Name=37
    Delay=38
    If=39
    Else=40
    ElseIf=41
    Switch=42
    Case=43
    Default=44
    Match=45
    Rule=46
    Try=47
    Catch=48
    Final=49
    In=50
    For=51
    While=52
    Macro=53
    With=54
    Let=55
    Class=56
    Extend=57
    Act=58
    Tilde=59
    Suffix=60
    Prefix=61
    Enumerate=62
    Structure=63
    Interface=64
    Trait=65
    Plus=66
    Minus=67
    Power=68
    Surd=69
    Decimal=70
    DecimalBad=71
    Binary=72
    Octal=73
    Hexadecimal=74
    Integer=75
    Exponent=76
    Base=77
    StringEscapeBlock=78
    StringEscapeSingle=79
    StringLiteralBlock=80
    StringLiteralSingle=81
    StringEmpty=82
    Escape=83
    True=84
    False=85
    Null=86
    Nothing=87
    Symbols=88
    TrueName=89
    Symbol=90
    Sharp=91
    Dot=92
    Underline=93
    Shebang=94
    Remark=95
    Comment=96
    LineComment=97
    PartComment=98
    NewLine=99
    WhiteSpace=100
    Import=101
    LeftShift=102
    LessEqual=103
    Less=104
    Export=105
    RightShift=106
    GraterEqual=107
    Grater=108
    Increase=109
    LogicXor=110
    Decrease=111
    Kronecker=112
    TensorProduct=113
    MapAll=114
    Quotient=115
    Map=116
    Output=117
    Modulo=118
    Equivalent=119
    NotEquivalent=120
    Equal=121
    Concat=122
    Destruct=123
    LogicOr=124
    LogicAnd=125
    DoubleBang=126
    NotEqual=127
    BitNot=128
    LogicNot=129
    Elvis=130
    Curry=131
    Apply=132
    LetAssign=133
    Quote=134
    Acute=135
    Quotation=136
    Ellipsis=137
    DOT=138
    Reciprocal=139
    Degree=140
    Transpose=141
    Hermitian=142
    Section=143
    Pilcrow=144
    Currency=145
    Element=146

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                self.state = 182
                self.statement()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def exportStatment(self):
            return self.getTypedRuleContext(NyarParser.ExportStatmentContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def letStatment(self):
            return self.getTypedRuleContext(NyarParser.LetStatmentContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def switchStatment(self):
            return self.getTypedRuleContext(NyarParser.SwitchStatmentContext,0)


        def ifStatment(self):
            return self.getTypedRuleContext(NyarParser.IfStatmentContext,0)


        def matchStatment(self):
            return self.getTypedRuleContext(NyarParser.MatchStatmentContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(NyarParser.ForStatementContext,0)


        def whileStatment(self):
            return self.getTypedRuleContext(NyarParser.WhileStatmentContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def interfaceStatement(self):
            return self.getTypedRuleContext(NyarParser.InterfaceStatementContext,0)


        def structureStatement(self):
            return self.getTypedRuleContext(NyarParser.StructureStatementContext,0)


        def enumerateStatement(self):
            return self.getTypedRuleContext(NyarParser.EnumerateStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Using]:
                    self.state = 191
                    self.importStatement()
                    pass
                elif token in [NyarParser.Expose]:
                    self.state = 192
                    self.exportStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 195
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 200
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Let]:
                    self.state = 198
                    self.letStatment()
                    pass
                elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Val, NyarParser.Var, NyarParser.Def, NyarParser.Suffix, NyarParser.Symbols, NyarParser.TrueName, NyarParser.Symbol]:
                    self.state = 199
                    self.assignStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 203
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 202
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 210
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Switch]:
                    self.state = 205
                    self.switchStatment()
                    pass
                elif token in [NyarParser.If]:
                    self.state = 206
                    self.ifStatment()
                    pass
                elif token in [NyarParser.Match]:
                    self.state = 207
                    self.matchStatment()
                    pass
                elif token in [NyarParser.For]:
                    self.state = 208
                    self.forStatement()
                    pass
                elif token in [NyarParser.While]:
                    self.state = 209
                    self.whileStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 213
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 212
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Type]:
                    self.state = 215
                    self.typeStatement()
                    pass
                elif token in [NyarParser.Trait]:
                    self.state = 216
                    self.traitStatement()
                    pass
                elif token in [NyarParser.Class]:
                    self.state = 217
                    self.classStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 221
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Interface]:
                    self.state = 223
                    self.interfaceStatement()
                    pass
                elif token in [NyarParser.Structure]:
                    self.state = 224
                    self.structureStatement()
                    pass
                elif token in [NyarParser.Enumerate]:
                    self.state = 225
                    self.enumerateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 228
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 231
                self.tryStatement()
                self.state = 233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 232
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 235
                self.expression(0)
                self.state = 237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 236
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 239
                self.data()
                self.state = 241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 240
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 245
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 246
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleModifyContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.mod = None # Token
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def Star(self):
            return self.getToken(NyarParser.Star, 0)
        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleModify" ):
                listener.enterModuleModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleModify" ):
                listener.exitModuleModify(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleModify" ):
                return visitor.visitModuleModify(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.name = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.match(NyarParser.Using)
                self.state = 252
                localctx.name = self.moduleName()
                self.state = 254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 253
                    localctx.mod = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Star or _la==NyarParser.Power):
                        localctx.mod = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 256
                self.match(NyarParser.Using)
                self.state = 257
                localctx.name = self.moduleName()
                self.state = 258
                self.match(NyarParser.As)
                self.state = 259
                self.symbol()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.match(NyarParser.Using)
                self.state = 262
                localctx.name = self.moduleName()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 263
                    self.match(NyarParser.With)


                self.state = 266
                self.symbol()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 268
                self.match(NyarParser.Using)
                self.state = 269
                localctx.name = self.moduleName()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With or _la==NyarParser.Dot:
                    self.state = 270
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.With or _la==NyarParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 273
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 275
                self.match(NyarParser.Using)
                self.state = 276
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        self._la = 0 # Token type
        try:
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Suffix:
                    self.state = 281
                    self.moduleLanguage()


                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Prefix:
                    self.state = 284
                    self.moduleScope()


                self.state = 287
                self.symbols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Slash(self):
            return self.getToken(NyarParser.Slash, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(NyarParser.Suffix)
            self.state = 291
            self.symbol()
            self.state = 292
            self.match(NyarParser.Slash)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Slash(self):
            return self.getToken(NyarParser.Slash, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(NyarParser.Prefix)
            self.state = 295
            self.symbol()
            self.state = 296
            self.match(NyarParser.Slash)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Expose(self):
            return self.getToken(NyarParser.Expose, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_exportStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportStatment" ):
                listener.enterExportStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportStatment" ):
                listener.exitExportStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExportStatment" ):
                return visitor.visitExportStatment(self)
            else:
                return visitor.visitChildren(self)




    def exportStatment(self):

        localctx = NyarParser.ExportStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_exportStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(NyarParser.Expose)
            self.state = 299
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(NyarParser.T__0)
            self.state = 302
            self.symbol()
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 303
                self.match(NyarParser.Comma)
                self.state = 304
                self.symbol()
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 310
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.match(NyarParser.T__0)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                    self.state = 313
                    self.statement()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 319
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.match(NyarParser.Colon)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                    self.state = 321
                    self.statement()
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 327
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.match(NyarParser.Colon)
                self.state = 329
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.match(NyarParser.T__0)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                    self.state = 333
                    self.statement()
                    self.state = 338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 339
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Colon:
                    self.state = 340
                    self.match(NyarParser.Colon)


                self.state = 344 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 343
                        self.statement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 346 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.expression(0)
            self.state = 355
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 351
                    self.match(NyarParser.Comma)
                    self.state = 352
                    self.expression(0) 
                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # SymbolContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 359
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 360
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 361
                localctx.left = self.symbol()
                self.state = 362
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 364
                localctx.op = self.pre_ops()
                self.state = 365
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 367
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 368
                self.match(NyarParser.T__2)
                self.state = 369
                self.expression(0)
                self.state = 370
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 372
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 420
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 418
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 375
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 376
                        localctx.op = self.bit_ops()
                        self.state = 377
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 379
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 380
                        localctx.op = self.lgk_ops()
                        self.state = 381
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 383
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 384
                        localctx.op = self.cpr_ops()
                        self.state = 385
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 387
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 388
                        localctx.op = self.pow_ops()
                        self.state = 389
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 391
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 392
                        localctx.op = self.mul_ops()
                        self.state = 393
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 395
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 396
                        localctx.op = self.add_ops()
                        self.state = 397
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 399
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 400
                        localctx.op = self.list_ops()
                        self.state = 401
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 403
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 404
                        self.match(NyarParser.Dot)
                        self.state = 405
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 406
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 407
                        self.match(NyarParser.Dot)
                        self.state = 408
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 409
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 410
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 411
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 412
                        self.match(NyarParser.As)
                        self.state = 413
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 414
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 415
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 416
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 417
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 422
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.match(NyarParser.T__2)
                    self.state = 425
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 429
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                localctx.state = self.match(NyarParser.Return)
                self.state = 431
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 432
                localctx.state = self.match(NyarParser.Return)
                self.state = 433
                self.match(NyarParser.T__2)
                self.state = 434
                self.expressionStatement()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 435
                    self.match(NyarParser.Comma)


                self.state = 438
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.symbols()
            self.state = 443
            self.match(NyarParser.T__2)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteralBlock - 66)) | (1 << (NyarParser.StringLiteralSingle - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Symbols - 66)) | (1 << (NyarParser.TrueName - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 444
                self.arguments()
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 445
                        self.match(NyarParser.Comma)
                        self.state = 446
                        self.arguments() 
                    self.state = 451
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 452
                    self.match(NyarParser.Comma)




            self.state = 457
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_arguments)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeStatement)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.match(NyarParser.Type)
                self.state = 467
                self.symbol()
                self.state = 468
                self.match(NyarParser.Colon)
                self.state = 469
                self.typeExpression(0)
                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.match(NyarParser.Type)
                self.state = 474
                self.symbol()
                self.state = 475
                self.match(NyarParser.T__0)
                self.state = 476
                self.typeExpression(0)
                self.state = 478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 477
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Star(self):
            return self.getToken(NyarParser.Star, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 483
                self.symbol()
                self.state = 484
                self.match(NyarParser.T__2)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (NyarParser.Integer - 75)) | (1 << (NyarParser.TrueName - 75)) | (1 << (NyarParser.Symbol - 75)))) != 0):
                    self.state = 485
                    self.typeExpression(0)
                    self.state = 490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 486
                        self.match(NyarParser.Comma)
                        self.state = 487
                        self.typeExpression(0)
                        self.state = 492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 495
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 497
                self.symbol()
                self.state = 498
                self.match(NyarParser.Less)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (NyarParser.Integer - 75)) | (1 << (NyarParser.TrueName - 75)) | (1 << (NyarParser.Symbol - 75)))) != 0):
                    self.state = 499
                    self.typeExpression(0)
                    self.state = 504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 500
                        self.match(NyarParser.Comma)
                        self.state = 501
                        self.typeExpression(0)
                        self.state = 506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 509
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 511
                self.symbol()
                self.state = 513
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 512
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Star or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 515
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 524
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 518
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 519
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 520
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 521
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 522
                        self.match(NyarParser.T__4)
                        self.state = 523
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            _la = self._input.LA(1)
            if not(_la==NyarParser.Act or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 530
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def functionPattern(self):
            return self.getTypedRuleContext(NyarParser.FunctionPatternContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignModifyContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def mod_assign(self):
            return self.getTypedRuleContext(NyarParser.Mod_assignContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignModify" ):
                listener.enterAssignModify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignModify" ):
                listener.exitAssignModify(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignModify" ):
                return visitor.visitAssignModify(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.match(NyarParser.Val)
                self.state = 533
                self.assignLHS()
                self.state = 534
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 536
                self.match(NyarParser.Var)
                self.state = 537
                self.assignLHS()
                self.state = 538
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.match(NyarParser.Def)
                self.state = 541
                self.assignLHS()
                self.state = 542
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 544
                self.match(NyarParser.Def)
                self.state = 545
                self.functionPattern()
                self.state = 546
                self.blockStatement()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 548
                self.functionPattern()
                self.state = 549
                _la = self._input.LA(1)
                if not(_la==NyarParser.Set or _la==NyarParser.Delay):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 550
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignModifyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 552
                self.assignLHS()
                self.state = 553
                self.mod_assign()
                self.state = 554
                self.match(NyarParser.Set)
                self.state = 555
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 557
                self.assignLHS()
                self.state = 558
                self.match(NyarParser.Set)
                self.state = 559
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 561
                self.assignLHS()
                self.state = 562
                self.match(NyarParser.Flexible)
                self.state = 563
                self.assignRHS()
                pass

            elif la_ == 9:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 565
                self.assignLHS()
                self.state = 566
                self.match(NyarParser.Delay)
                self.state = 567
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.symbol()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 572
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.maybeSymbol()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 576
                    self.match(NyarParser.Comma)
                    self.state = 577
                    self.maybeSymbol()
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 584
                self.symbols()
                self.state = 585
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignRHS" ):
                listener.enterAssignRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignRHS" ):
                listener.exitAssignRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignRHS" ):
                return visitor.visitAssignRHS(self)
            else:
                return visitor.visitChildren(self)




    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.expressionStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 591
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 592
                self.match(NyarParser.T__0)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                    self.state = 593
                    self.statement()
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 599
                self.match(NyarParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 600
                self.match(NyarParser.Colon)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                    self.state = 601
                    self.statement()
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 607
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Star(self):
            return self.getToken(NyarParser.Star, 0)

        def Keyword(self):
            return self.getToken(NyarParser.Keyword, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_parameter)
        try:
            self.state = 633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 610
                    self.typeExpression(0)


                self.state = 613
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 614
                    self.typeExpression(0)


                self.state = 617
                self.symbol()
                self.state = 618
                self.match(NyarParser.Star)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 621
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 620
                    self.typeExpression(0)


                self.state = 623
                self.symbol()
                self.state = 624
                self.match(NyarParser.Keyword)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 626
                    self.typeExpression(0)


                self.state = 629
                self.symbol()
                self.state = 630
                self.match(NyarParser.Nullable)
                self.state = 631
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_functionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPattern" ):
                listener.enterFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPattern" ):
                listener.exitFunctionPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionPattern" ):
                return visitor.visitFunctionPattern(self)
            else:
                return visitor.visitChildren(self)




    def functionPattern(self):

        localctx = NyarParser.FunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.symbol()
            self.state = 636
            self.match(NyarParser.T__2)
            self.state = 637
            self.parameter()
            self.state = 642
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 638
                    self.match(NyarParser.Comma)
                    self.state = 639
                    self.parameter() 
                self.state = 644
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 645
                self.match(NyarParser.Comma)


            self.state = 648
            self.match(NyarParser.T__3)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 649
                self.typeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_maybeSymbol)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols, NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.symbols()
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 653
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Suffix]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(NyarParser.Suffix)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_symbols

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MaybeMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Symbols(self):
            return self.getToken(NyarParser.Symbols, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeMethod" ):
                listener.enterMaybeMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeMethod" ):
                listener.exitMaybeMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeMethod" ):
                return visitor.visitMaybeMethod(self)
            else:
                return visitor.visitChildren(self)


    class MustMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMustMethod" ):
                listener.enterMustMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMustMethod" ):
                listener.exitMustMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMustMethod" ):
                return visitor.visitMustMethod(self)
            else:
                return visitor.visitChildren(self)



    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_symbols)
        try:
            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols]:
                localctx = NyarParser.MaybeMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(NyarParser.Symbols)
                pass
            elif token in [NyarParser.TrueName]:
                localctx = NyarParser.MustMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.match(NyarParser.TrueName)
                self.state = 661
                self.match(NyarParser.Dot)
                self.state = 662
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def ifSingle(self):
            return self.getTypedRuleContext(NyarParser.IfSingleContext,0)


        def ifNested(self):
            return self.getTypedRuleContext(NyarParser.IfNestedContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatment" ):
                listener.enterIfStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatment" ):
                listener.exitIfStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatment" ):
                return visitor.visitIfStatment(self)
            else:
                return visitor.visitChildren(self)




    def ifStatment(self):

        localctx = NyarParser.IfStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ifStatment)
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.match(NyarParser.If)
                self.state = 666
                self.ifShort()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(NyarParser.If)
                self.state = 668
                self.ifSingle()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(NyarParser.If)
                self.state = 670
                self.ifNested()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfShortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfShort" ):
                listener.enterIfShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfShort" ):
                listener.exitIfShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfShort" ):
                return visitor.visitIfShort(self)
            else:
                return visitor.visitChildren(self)




    def ifShort(self):

        localctx = NyarParser.IfShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ifShort)
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.condition()
                self.state = 674
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.condition()
                self.state = 677
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfSingleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)




    def ifSingle(self):

        localctx = NyarParser.IfSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifSingle)
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.condition()
                self.state = 682
                self.blockNonEnd()
                self.state = 683
                self.match(NyarParser.Else)
                self.state = 684
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.condition()
                self.state = 687
                self.blockNonEnd()
                self.state = 688
                self.match(NyarParser.Else)
                self.state = 689
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNestedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifNested

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)




    def ifNested(self):

        localctx = NyarParser.IfNestedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ifNested)
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.condition()
                self.state = 694
                self.blockNonEnd()
                self.state = 696 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 695
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 698 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 700
                self.match(NyarParser.Else)
                self.state = 701
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.condition()
                self.state = 704
                self.blockNonEnd()
                self.state = 706 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 705
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 708 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                self.state = 710
                self.match(NyarParser.Else)
                self.state = 711
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.condition()
                self.state = 714
                self.blockNonEnd()
                self.state = 718
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 715
                        self.elseIf() 
                    self.state = 720
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 721
                self.elif()
                self.state = 722
                self.ifShort()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(NyarParser.ElseIf, 0)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elif

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif" ):
                listener.enterElif(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif" ):
                listener.exitElif(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif" ):
                return visitor.visitElif(self)
            else:
                return visitor.visitChildren(self)




    def elif(self):

        localctx = NyarParser.ElifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elif)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.ElseIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.match(NyarParser.ElseIf)
                pass
            elif token in [NyarParser.Else]:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(NyarParser.Else)
                self.state = 728
                self.match(NyarParser.If)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elif(self):
            return self.getTypedRuleContext(NyarParser.ElifContext,0)


        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elseIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.elif()
            self.state = 732
            self.condition()
            self.state = 733
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_switchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatment" ):
                listener.enterSwitchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatment" ):
                listener.exitSwitchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatment" ):
                return visitor.visitSwitchStatment(self)
            else:
                return visitor.visitChildren(self)




    def switchStatment(self):

        localctx = NyarParser.SwitchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_switchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(NyarParser.Switch)
            self.state = 736
            self.condition()
            self.state = 737
            self.switchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Star(self):
            return self.getToken(NyarParser.Star, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_caseBody)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.match(NyarParser.Case)
                self.state = 740
                self.expression(0)
                self.state = 741
                self.match(NyarParser.Colon)
                self.state = 742
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.expression(0)
                self.state = 745
                self.match(NyarParser.Rule)
                self.state = 746
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.match(NyarParser.Default)
                self.state = 749
                self.match(NyarParser.Colon)
                self.state = 750
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.match(NyarParser.Case)
                self.state = 752
                self.match(NyarParser.Star)
                self.state = 753
                self.match(NyarParser.Colon)
                self.state = 754
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 755
                self.match(NyarParser.Star)
                self.state = 756
                self.match(NyarParser.Rule)
                self.state = 757
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.match(NyarParser.T__0)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Star) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteralBlock - 66)) | (1 << (NyarParser.StringLiteralSingle - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Symbols - 66)) | (1 << (NyarParser.TrueName - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 761
                    self.caseBody()
                    self.state = 766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 767
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.match(NyarParser.Colon)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Star) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteralBlock - 66)) | (1 << (NyarParser.StringLiteralSingle - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Symbols - 66)) | (1 << (NyarParser.TrueName - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 769
                    self.caseBody()
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 775
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match(self):
            return self.getToken(NyarParser.Match, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatment" ):
                listener.enterMatchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatment" ):
                listener.exitMatchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatment" ):
                return visitor.visitMatchStatment(self)
            else:
                return visitor.visitChildren(self)




    def matchStatment(self):

        localctx = NyarParser.MatchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(NyarParser.Match)
            self.state = 779
            self.condition()
            self.state = 780
            self.matchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_matchBody)
        try:
            self.state = 784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_condition)
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.match(NyarParser.T__2)
                self.state = 788
                self.expression(0)
                self.state = 789
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockNonEnd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.BlockNonEndContext)
            else:
                return self.getTypedRuleContext(NyarParser.BlockNonEndContext,i)


        def tryFinal(self):
            return self.getTypedRuleContext(NyarParser.TryFinalContext,0)


        def Catch(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Catch)
            else:
                return self.getToken(NyarParser.Catch, i)

        def tryCatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TryCatchContext)
            else:
                return self.getTypedRuleContext(NyarParser.TryCatchContext,i)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(NyarParser.Try)
                self.state = 794
                self.blockNonEnd()
                self.state = 797 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 795
                    self.match(NyarParser.Catch)
                    self.state = 796
                    self.tryCatch()
                    self.state = 799 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Catch):
                        break

                self.state = 801
                self.tryFinal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(NyarParser.Try)
                self.state = 804
                self.blockNonEnd()
                self.state = 805
                self.match(NyarParser.Catch)
                self.state = 806
                self.symbol()
                self.state = 807
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.match(NyarParser.Try)
                self.state = 810
                self.blockNonEnd()
                self.state = 811
                self.match(NyarParser.Catch)
                self.state = 812
                self.match(NyarParser.T__2)
                self.state = 813
                self.symbol()
                self.state = 814
                self.match(NyarParser.T__3)
                self.state = 815
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatch" ):
                return visitor.visitTryCatch(self)
            else:
                return visitor.visitChildren(self)




    def tryCatch(self):

        localctx = NyarParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tryCatch)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.symbol()
                self.state = 820
                self.blockNonEnd()
                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(NyarParser.T__2)
                self.state = 823
                self.symbol()
                self.state = 824
                self.match(NyarParser.T__3)
                self.state = 825
                self.blockNonEnd()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryFinalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryFinal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryFinal" ):
                listener.enterTryFinal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryFinal" ):
                listener.exitTryFinal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryFinal" ):
                return visitor.visitTryFinal(self)
            else:
                return visitor.visitChildren(self)




    def tryFinal(self):

        localctx = NyarParser.TryFinalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tryFinal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(NyarParser.Final)
            self.state = 830
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_forStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(ForStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ForStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)



    def forStatement(self):

        localctx = NyarParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        try:
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 832
                self.match(NyarParser.For)
                self.state = 833
                self.match(NyarParser.T__2)
                self.state = 834
                self.expressionStatement()
                self.state = 835
                self.match(NyarParser.T__3)
                self.state = 836
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(NyarParser.For)
                self.state = 839
                self.symbol()
                self.state = 840
                self.match(NyarParser.In)
                self.state = 841
                self.expression(0)
                self.state = 842
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(NyarParser.While, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_whileStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatment" ):
                listener.enterWhileStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatment" ):
                listener.exitWhileStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatment" ):
                return visitor.visitWhileStatment(self)
            else:
                return visitor.visitChildren(self)




    def whileStatment(self):

        localctx = NyarParser.WhileStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whileStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(NyarParser.While)
            self.state = 847
            self.condition()
            self.state = 848
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_letStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatment" ):
                listener.enterLetStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatment" ):
                listener.exitLetStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatment" ):
                return visitor.visitLetStatment(self)
            else:
                return visitor.visitChildren(self)




    def letStatment(self):

        localctx = NyarParser.LetStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_letStatment)
        self._la = 0 # Token type
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.match(NyarParser.Let)
                self.state = 854
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 851
                        self.symbol() 
                    self.state = 856
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 857
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.match(NyarParser.Let)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 859
                    self.symbol()
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 865
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classController(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassControllerContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassControllerContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.emptyStatement()
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 869
                    self.classEos()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 872
                        self.classController() 
                    self.state = 877
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                self.state = 878
                self.symbol()
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 879
                    self.typeSuffix()


                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self.classEos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 885
                        self.classController() 
                    self.state = 890
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 891
                self.symbol()
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 892
                    self.typeSuffix()


                self.state = 895
                self.blockStatement()
                self.state = 897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 896
                    self.classEos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 902
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 899
                        self.classController() 
                    self.state = 904
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 905
                self.symbol()
                self.state = 906
                self.match(NyarParser.T__2)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (NyarParser.Integer - 75)) | (1 << (NyarParser.TrueName - 75)) | (1 << (NyarParser.Symbol - 75)))) != 0):
                    self.state = 907
                    self.parameter()
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 913
                self.match(NyarParser.T__3)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 914
                    self.typeSuffix()


                self.state = 917
                self.blockStatement()
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.classEos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.match(NyarParser.Class)
                self.state = 924
                self.symbol()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 925
                    self.classExtend()


                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 928
                    self.classTrait()


                self.state = 931
                self.match(NyarParser.T__0)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 932
                    self.classExpression()
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 938
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 940
                self.match(NyarParser.Class)
                self.state = 941
                self.symbol()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 942
                    self.classExtend()


                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 945
                    self.classTrait()


                self.state = 948
                self.match(NyarParser.Colon)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 949
                    self.classExpression()
                    self.state = 954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 955
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extend(self):
            return self.getToken(NyarParser.Extend, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtend" ):
                listener.enterClassExtend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtend" ):
                listener.exitClassExtend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtend" ):
                return visitor.visitClassExtend(self)
            else:
                return visitor.visitChildren(self)




    def classExtend(self):

        localctx = NyarParser.ClassExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classExtend)
        self._la = 0 # Token type
        try:
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extend]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.match(NyarParser.Extend)
                self.state = 961 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 960
                    self.symbol()
                    self.state = 963 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(NyarParser.T__2)
                self.state = 966
                self.symbol()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 967
                    self.match(NyarParser.Comma)
                    self.state = 968
                    self.symbol()
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 974
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTraitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classTrait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTrait" ):
                listener.enterClassTrait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTrait" ):
                listener.exitClassTrait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTrait" ):
                return visitor.visitClassTrait(self)
            else:
                return visitor.visitChildren(self)




    def classTrait(self):

        localctx = NyarParser.ClassTraitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classTrait)
        self._la = 0 # Token type
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self.match(NyarParser.Act)
                self.state = 980 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 979
                    self.symbol()
                    self.state = 982 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(NyarParser.Tilde)
                self.state = 985
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.match(NyarParser.Tilde)
                self.state = 987
                self.match(NyarParser.T__2)
                self.state = 988
                self.symbol()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 989
                    self.match(NyarParser.Comma)
                    self.state = 990
                    self.symbol()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassController" ):
                listener.enterClassController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassController" ):
                listener.exitClassController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassController" ):
                return visitor.visitClassController(self)
            else:
                return visitor.visitChildren(self)




    def classController(self):

        localctx = NyarParser.ClassControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classController)
        try:
            self.state = 1004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.symbol()
                pass
            elif token in [NyarParser.Val]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(NyarParser.Val)
                pass
            elif token in [NyarParser.Var]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1002
                self.match(NyarParser.Var)
                pass
            elif token in [NyarParser.Def]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1003
                self.match(NyarParser.Def)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassEosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classEos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEos" ):
                listener.enterClassEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEos" ):
                listener.exitClassEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassEos" ):
                return visitor.visitClassEos(self)
            else:
                return visitor.visitChildren(self)




    def classEos(self):

        localctx = NyarParser.ClassEosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classEos)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            _la = self._input.LA(1)
            if not(_la==NyarParser.Semicolon or _la==NyarParser.Comma):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def traitExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TraitExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TraitExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1008
                self.match(NyarParser.Trait)
                self.state = 1009
                self.symbol()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1010
                    self.classExtend()


                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1013
                    self.classTrait()


                self.state = 1016
                self.match(NyarParser.T__0)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1017
                    self.traitExpression()
                    self.state = 1022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1023
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(NyarParser.Trait)
                self.state = 1026
                self.symbol()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1027
                    self.classExtend()


                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1030
                    self.classTrait()


                self.state = 1033
                self.match(NyarParser.Colon)
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1034
                    self.traitExpression()
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1040
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Interface(self):
            return self.getToken(NyarParser.Interface, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def interfaceExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.InterfaceExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.InterfaceExpressionContext,i)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceStatement" ):
                listener.enterInterfaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceStatement" ):
                listener.exitInterfaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceStatement" ):
                return visitor.visitInterfaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def interfaceStatement(self):

        localctx = NyarParser.InterfaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_interfaceStatement)
        self._la = 0 # Token type
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.match(NyarParser.Interface)
                self.state = 1045
                self.symbol()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1046
                    self.classExtend()


                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1049
                    self.classTrait()


                self.state = 1052
                self.match(NyarParser.T__0)
                self.state = 1053
                self.interfaceExpression()
                self.state = 1054
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(NyarParser.Interface)
                self.state = 1057
                self.symbol()
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1058
                    self.classExtend()


                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1061
                    self.classTrait()


                self.state = 1064
                self.match(NyarParser.Colon)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1065
                    self.interfaceExpression()
                    self.state = 1070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1071
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Structure(self):
            return self.getToken(NyarParser.Structure, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def structureExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StructureExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.StructureExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_structureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureStatement" ):
                listener.enterStructureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureStatement" ):
                listener.exitStructureStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureStatement" ):
                return visitor.visitStructureStatement(self)
            else:
                return visitor.visitChildren(self)




    def structureStatement(self):

        localctx = NyarParser.StructureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_structureStatement)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1075
                self.match(NyarParser.Structure)
                self.state = 1076
                self.symbol()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1077
                    self.classExtend()


                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1080
                    self.classTrait()


                self.state = 1083
                self.match(NyarParser.T__0)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1084
                    self.structureExpression()
                    self.state = 1089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1090
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.match(NyarParser.Structure)
                self.state = 1093
                self.symbol()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1094
                    self.classExtend()


                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1097
                    self.classTrait()


                self.state = 1100
                self.match(NyarParser.Colon)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1101
                    self.structureExpression()
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1107
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def Enumerate(self):
            return self.getToken(NyarParser.Enumerate, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def enumerateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.EnumerateExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.EnumerateExpressionContext,i)


        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Star(self):
            return self.getToken(NyarParser.Star, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_enumerateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateStatement" ):
                listener.enterEnumerateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateStatement" ):
                listener.exitEnumerateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateStatement" ):
                return visitor.visitEnumerateStatement(self)
            else:
                return visitor.visitChildren(self)




    def enumerateStatement(self):

        localctx = NyarParser.EnumerateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_enumerateStatement)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(NyarParser.Enumerate)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Star or _la==NyarParser.Plus:
                    self.state = 1112
                    localctx.e = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Star or _la==NyarParser.Plus):
                        localctx.e = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1115
                self.symbol()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1116
                    self.classExtend()


                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1119
                    self.classTrait()


                self.state = 1122
                self.match(NyarParser.T__0)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1123
                    self.enumerateExpression()
                    self.state = 1128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1129
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.match(NyarParser.Enumerate)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Star or _la==NyarParser.Plus:
                    self.state = 1132
                    localctx.e = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Star or _la==NyarParser.Plus):
                        localctx.e = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1135
                self.symbol()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                    self.state = 1136
                    self.classExtend()


                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 1139
                    self.classTrait()


                self.state = 1142
                self.match(NyarParser.Colon)
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 1143
                    self.enumerateExpression()
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1149
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceExpression(self):
            return self.getTypedRuleContext(NyarParser.InterfaceExpressionContext,0)


        def structureExpression(self):
            return self.getTypedRuleContext(NyarParser.StructureExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitExpression" ):
                listener.enterTraitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitExpression" ):
                listener.exitTraitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitExpression" ):
                return visitor.visitTraitExpression(self)
            else:
                return visitor.visitChildren(self)




    def traitExpression(self):

        localctx = NyarParser.TraitExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_traitExpression)
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1153
                self.interfaceExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1154
                self.structureExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceFunction(self):
            return self.getTypedRuleContext(NyarParser.InterfaceFunctionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_interfaceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceExpression" ):
                listener.enterInterfaceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceExpression" ):
                listener.exitInterfaceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceExpression" ):
                return visitor.visitInterfaceExpression(self)
            else:
                return visitor.visitChildren(self)




    def interfaceExpression(self):

        localctx = NyarParser.InterfaceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_interfaceExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.interfaceFunction()
            self.state = 1158
            self.match(NyarParser.Colon)
            self.state = 1159
            self.typeExpression(0)
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                self.state = 1160
                self.classEos()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def interfaceParameters(self):
            return self.getTypedRuleContext(NyarParser.InterfaceParametersContext,0)


        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceFunction" ):
                listener.enterInterfaceFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceFunction" ):
                listener.exitInterfaceFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceFunction" ):
                return visitor.visitInterfaceFunction(self)
            else:
                return visitor.visitChildren(self)




    def interfaceFunction(self):

        localctx = NyarParser.InterfaceFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_interfaceFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.symbol()
            self.state = 1164
            self.match(NyarParser.T__2)
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (NyarParser.Integer - 75)) | (1 << (NyarParser.TrueName - 75)) | (1 << (NyarParser.Symbol - 75)))) != 0):
                self.state = 1165
                self.interfaceParameters()


            self.state = 1168
            self.match(NyarParser.T__3)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Nullable:
                self.state = 1169
                localctx.e = self.match(NyarParser.Nullable)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_interfaceParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceParameters" ):
                listener.enterInterfaceParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceParameters" ):
                listener.exitInterfaceParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceParameters" ):
                return visitor.visitInterfaceParameters(self)
            else:
                return visitor.visitChildren(self)




    def interfaceParameters(self):

        localctx = NyarParser.InterfaceParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_interfaceParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.typeExpression(0)
            self.state = 1173
            self.symbol()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 1174
                self.match(NyarParser.Comma)
                self.state = 1175
                self.typeExpression(0)
                self.state = 1176
                self.symbol()
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructureExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.e = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_structureExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureExpression" ):
                listener.enterStructureExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureExpression" ):
                listener.exitStructureExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructureExpression" ):
                return visitor.visitStructureExpression(self)
            else:
                return visitor.visitChildren(self)




    def structureExpression(self):

        localctx = NyarParser.StructureExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_structureExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.symbol()
            self.state = 1184
            localctx.e = self.match(NyarParser.Nullable)
            self.state = 1185
            self.match(NyarParser.Colon)
            self.state = 1186
            self.typeExpression(0)
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                self.state = 1187
                self.classEos()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classEos(self):
            return self.getTypedRuleContext(NyarParser.ClassEosContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enumerateNumber(self):
            return self.getTypedRuleContext(NyarParser.EnumerateNumberContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_enumerateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateExpression" ):
                listener.enterEnumerateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateExpression" ):
                listener.exitEnumerateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateExpression" ):
                return visitor.visitEnumerateExpression(self)
            else:
                return visitor.visitChildren(self)




    def enumerateExpression(self):

        localctx = NyarParser.EnumerateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enumerateExpression)
        self._la = 0 # Token type
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.symbol()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                    self.state = 1191
                    self.classEos()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1194
                self.symbol()
                self.state = 1195
                self.match(NyarParser.Colon)
                self.state = 1196
                self.enumerateNumber()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Semicolon or _la==NyarParser.Comma:
                    self.state = 1197
                    self.classEos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerateNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_enumerateNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerateNumber" ):
                listener.enterEnumerateNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerateNumber" ):
                listener.exitEnumerateNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerateNumber" ):
                return visitor.visitEnumerateNumber(self)
            else:
                return visitor.visitChildren(self)




    def enumerateNumber(self):

        localctx = NyarParser.EnumerateNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_enumerateNumber)
        try:
            self.state = 1207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Decimal, NyarParser.DecimalBad, NyarParser.Binary, NyarParser.Octal, NyarParser.Hexadecimal, NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.number()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1203
                self.symbol()
                self.state = 1204
                self.match(NyarParser.BitOr)
                self.state = 1205
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_data)
        try:
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1212
                self.symbol()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1213
                self.symbols()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1214
                self.list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1215
                self.dict()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1216
                self.index()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1217
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def byteInput(self):
            return self.getTypedRuleContext(NyarParser.ByteInputContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_number)
        try:
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1222
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1223
                self.byteInput()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteInputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_byteInput

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteInput" ):
                listener.enterByteInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteInput" ):
                listener.exitByteInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteInput" ):
                return visitor.visitByteInput(self)
            else:
                return visitor.visitChildren(self)




    def byteInput(self):

        localctx = NyarParser.ByteInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_byteInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1226
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (NyarParser.Binary - 72)) | (1 << (NyarParser.Octal - 72)) | (1 << (NyarParser.Hexadecimal - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 1254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1228
                self.match(NyarParser.T__4)
                self.state = 1229
                self.indexValid()
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__4) | (1 << NyarParser.Colon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Comma) | (1 << NyarParser.Name))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.TrueName - 66)) | (1 << (NyarParser.Symbol - 66)))) != 0):
                    self.state = 1231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1230
                        self.match(NyarParser.Comma)


                    self.state = 1233
                    self.indexValid()
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1239
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.match(NyarParser.T__6)
                self.state = 1242
                self.indexValid()
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__4) | (1 << NyarParser.Colon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Comma) | (1 << NyarParser.Name))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.TrueName - 66)) | (1 << (NyarParser.Symbol - 66)))) != 0):
                    self.state = 1244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1243
                        self.match(NyarParser.Comma)


                    self.state = 1246
                    self.indexValid()
                    self.state = 1251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1252
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Index000Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex000" ):
                listener.enterIndex000(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex000" ):
                listener.exitIndex000(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex000" ):
                return visitor.visitIndex000(self)
            else:
                return visitor.visitChildren(self)


    class Index011Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)
        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex011" ):
                listener.enterIndex011(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex011" ):
                listener.exitIndex011(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex011" ):
                return visitor.visitIndex011(self)
            else:
                return visitor.visitChildren(self)


    class Index110Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex110" ):
                listener.enterIndex110(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex110" ):
                listener.exitIndex110(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex110" ):
                return visitor.visitIndex110(self)
            else:
                return visitor.visitChildren(self)


    class Index001Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex001" ):
                listener.enterIndex001(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex001" ):
                listener.exitIndex001(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex001" ):
                return visitor.visitIndex001(self)
            else:
                return visitor.visitChildren(self)


    class Index100Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex100" ):
                listener.enterIndex100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex100" ):
                listener.exitIndex100(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex100" ):
                return visitor.visitIndex100(self)
            else:
                return visitor.visitChildren(self)


    class Index111Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex111" ):
                listener.enterIndex111(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex111" ):
                listener.exitIndex111(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex111" ):
                return visitor.visitIndex111(self)
            else:
                return visitor.visitChildren(self)


    class Index010Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)
        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex010" ):
                listener.enterIndex010(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex010" ):
                listener.exitIndex010(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex010" ):
                return visitor.visitIndex010(self)
            else:
                return visitor.visitChildren(self)


    class IndexTakeContext(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self):
            return self.getTypedRuleContext(NyarParser.IndexTermContext,0)

        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTake" ):
                listener.enterIndexTake(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTake" ):
                listener.exitIndexTake(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexTake" ):
                return visitor.visitIndexTake(self)
            else:
                return visitor.visitChildren(self)


    class Index101Context(IndexValidContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.IndexValidContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexTermContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexTermContext,i)

        def Name(self):
            return self.getToken(NyarParser.Name, 0)
        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Colon)
            else:
                return self.getToken(NyarParser.Colon, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex101" ):
                listener.enterIndex101(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex101" ):
                listener.exitIndex101(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex101" ):
                return visitor.visitIndex101(self)
            else:
                return visitor.visitChildren(self)



    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_indexValid)
        try:
            self.state = 1305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                localctx = NyarParser.IndexTakeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Plus, NyarParser.Minus, NyarParser.Integer, NyarParser.TrueName, NyarParser.Symbol]:
                    self.state = 1256
                    self.indexTerm()
                    pass
                elif token in [NyarParser.T__4]:
                    self.state = 1257
                    self.list()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = NyarParser.Index000Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.match(NyarParser.Colon)
                pass

            elif la_ == 3:
                localctx = NyarParser.Index001Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1261
                self.match(NyarParser.Name)
                self.state = 1262
                self.indexTerm()
                pass

            elif la_ == 4:
                localctx = NyarParser.Index001Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1263
                self.match(NyarParser.Colon)
                self.state = 1264
                self.match(NyarParser.Colon)
                self.state = 1265
                self.indexTerm()
                pass

            elif la_ == 5:
                localctx = NyarParser.Index010Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1266
                self.match(NyarParser.Colon)
                self.state = 1267
                self.indexTerm()
                self.state = 1269
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1268
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 6:
                localctx = NyarParser.Index011Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1271
                self.match(NyarParser.Colon)
                self.state = 1272
                self.indexTerm()
                self.state = 1273
                self.match(NyarParser.Colon)
                self.state = 1274
                self.indexTerm()
                pass

            elif la_ == 7:
                localctx = NyarParser.Index100Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1276
                self.indexTerm()
                self.state = 1277
                self.match(NyarParser.Name)
                pass

            elif la_ == 8:
                localctx = NyarParser.Index100Context(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1279
                self.indexTerm()
                self.state = 1280
                self.match(NyarParser.Colon)
                self.state = 1282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1281
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 9:
                localctx = NyarParser.Index101Context(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1284
                self.indexTerm()
                self.state = 1285
                self.match(NyarParser.Name)
                self.state = 1286
                self.indexTerm()
                pass

            elif la_ == 10:
                localctx = NyarParser.Index101Context(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1288
                self.indexTerm()
                self.state = 1289
                self.match(NyarParser.Colon)
                self.state = 1290
                self.match(NyarParser.Colon)
                self.state = 1291
                self.indexTerm()
                pass

            elif la_ == 11:
                localctx = NyarParser.Index110Context(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1293
                self.indexTerm()
                self.state = 1294
                self.match(NyarParser.Colon)
                self.state = 1295
                self.indexTerm()
                self.state = 1297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                if la_ == 1:
                    self.state = 1296
                    self.match(NyarParser.Colon)


                pass

            elif la_ == 12:
                localctx = NyarParser.Index111Context(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1299
                self.indexTerm()
                self.state = 1300
                self.match(NyarParser.Colon)
                self.state = 1301
                self.indexTerm()
                self.state = 1302
                self.match(NyarParser.Colon)
                self.state = 1303
                self.indexTerm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexTerm" ):
                listener.enterIndexTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexTerm" ):
                listener.exitIndexTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexTerm" ):
                return visitor.visitIndexTerm(self)
            else:
                return visitor.visitChildren(self)




    def indexTerm(self):

        localctx = NyarParser.IndexTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_indexTerm)
        self._la = 0 # Token type
        try:
            self.state = 1312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1307
                self.symbol()
                pass
            elif token in [NyarParser.Plus, NyarParser.Minus, NyarParser.Integer]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Plus or _la==NyarParser.Minus:
                    self.state = 1308
                    localctx.sign = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                        localctx.sign = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1311
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(NyarParser.T__0)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (NyarParser.Integer - 75)) | (1 << (NyarParser.StringEscapeBlock - 75)) | (1 << (NyarParser.StringEscapeSingle - 75)) | (1 << (NyarParser.StringLiteralBlock - 75)) | (1 << (NyarParser.StringLiteralSingle - 75)) | (1 << (NyarParser.StringEmpty - 75)) | (1 << (NyarParser.TrueName - 75)) | (1 << (NyarParser.Symbol - 75)))) != 0):
                self.state = 1315
                self.keyValue()


            self.state = 1322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1318
                    self.match(NyarParser.Comma)
                    self.state = 1319
                    self.keyValue() 
                self.state = 1324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1325
                self.match(NyarParser.Comma)


            self.state = 1328
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            localctx.key = self.keyValid()
            self.state = 1331
            self.match(NyarParser.Colon)
            self.state = 1332
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_keyValid)
        try:
            self.state = 1337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteralBlock, NyarParser.StringLiteralSingle, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1336
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(NyarParser.T__4)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Expose) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Let) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Enumerate) | (1 << NyarParser.Structure))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Interface - 64)) | (1 << (NyarParser.Trait - 64)) | (1 << (NyarParser.Plus - 64)) | (1 << (NyarParser.Minus - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteralBlock - 64)) | (1 << (NyarParser.StringLiteralSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (NyarParser.BitNot - 128)) | (1 << (NyarParser.LogicNot - 128)) | (1 << (NyarParser.Reciprocal - 128)))) != 0):
                self.state = 1340
                self.element()


            self.state = 1347
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1343
                    self.match(NyarParser.Comma)
                    self.state = 1344
                    self.element() 
                self.state = 1349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1350
                self.match(NyarParser.Comma)


            self.state = 1353
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_element)
        try:
            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1355
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1356
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1357
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1361
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteralSingle(self):
            return self.getToken(NyarParser.StringLiteralSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralSingle" ):
                listener.enterStringLiteralSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralSingle" ):
                listener.exitStringLiteralSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralSingle" ):
                return visitor.visitStringLiteralSingle(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteralBlock(self):
            return self.getToken(NyarParser.StringLiteralBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralBlock" ):
                listener.enterStringLiteralBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralBlock" ):
                listener.exitStringLiteralBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteralBlock" ):
                return visitor.visitStringLiteralBlock(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_string)
        try:
            self.state = 1372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1367
                self.match(NyarParser.StringEmpty)
                pass
            elif token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1368
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteralBlock]:
                localctx = NyarParser.StringLiteralBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1370
                self.match(NyarParser.StringLiteralBlock)
                pass
            elif token in [NyarParser.StringLiteralSingle]:
                localctx = NyarParser.StringLiteralSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1371
                self.match(NyarParser.StringLiteralSingle)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (NyarParser.True - 84)) | (1 << (NyarParser.False - 84)) | (1 << (NyarParser.Null - 84)) | (1 << (NyarParser.Nothing - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_symbol)
        try:
            self.state = 1379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.flowController()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.match(NyarParser.TrueName)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # SymbolContext

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_solt)
        try:
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(NyarParser.Sharp)
                self.state = 1383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1382
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1385
                self.match(NyarParser.Sharp)
                self.state = 1386
                localctx.id = self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Plus - 66)) | (1 << (NyarParser.Minus - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            _la = self._input.LA(1)
            if not(((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & ((1 << (NyarParser.Increase - 109)) | (1 << (NyarParser.Decrease - 109)) | (1 << (NyarParser.DoubleBang - 109)) | (1 << (NyarParser.BitNot - 109)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            _la = self._input.LA(1)
            if not(((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (NyarParser.Exponent - 76)) | (1 << (NyarParser.Base - 76)) | (1 << (NyarParser.LeftShift - 76)) | (1 << (NyarParser.RightShift - 76)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (NyarParser.LogicXor - 110)) | (1 << (NyarParser.LogicOr - 110)) | (1 << (NyarParser.LogicAnd - 110)) | (1 << (NyarParser.LogicNot - 110)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                _la = self._input.LA(1)
                if not(((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (NyarParser.Equivalent - 119)) | (1 << (NyarParser.NotEquivalent - 119)) | (1 << (NyarParser.Equal - 119)) | (1 << (NyarParser.NotEqual - 119)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                _la = self._input.LA(1)
                if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (NyarParser.LessEqual - 103)) | (1 << (NyarParser.Less - 103)) | (1 << (NyarParser.GraterEqual - 103)) | (1 << (NyarParser.Grater - 103)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1401
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Modulo(self):
            return self.getToken(NyarParser.Modulo, 0)

        def Quotient(self):
            return self.getToken(NyarParser.Quotient, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            _la = self._input.LA(1)
            if not(_la==NyarParser.Divide or _la==NyarParser.Multiply or ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & ((1 << (NyarParser.Kronecker - 112)) | (1 << (NyarParser.TensorProduct - 112)) | (1 << (NyarParser.Quotient - 112)) | (1 << (NyarParser.Modulo - 112)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (NyarParser.LeftShift - 102)) | (1 << (NyarParser.RightShift - 102)) | (1 << (NyarParser.Increase - 102)) | (1 << (NyarParser.Map - 102)) | (1 << (NyarParser.Concat - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mod_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def Star(self):
            return self.getToken(NyarParser.Star, 0)

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mod_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMod_assign" ):
                listener.enterMod_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMod_assign" ):
                listener.exitMod_assign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMod_assign" ):
                return visitor.visitMod_assign(self)
            else:
                return visitor.visitChildren(self)




    def mod_assign(self):

        localctx = NyarParser.Mod_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_mod_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            _la = self._input.LA(1)
            if not(((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & ((1 << (NyarParser.Divide - 13)) | (1 << (NyarParser.Star - 13)) | (1 << (NyarParser.Plus - 13)) | (1 << (NyarParser.Minus - 13)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[13] = self.expression_sempred
        self._predicates[19] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




