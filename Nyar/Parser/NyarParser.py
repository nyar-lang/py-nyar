# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0092")
        buf.write("\u0473\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\3\2\7\2\u009e\n\2\f\2\16\2\u00a1\13\2\3\2\3\2")
        buf.write("\3\3\3\3\3\3\5\3\u00a8\n\3\3\3\3\3\5\3\u00ac\n\3\3\3\3")
        buf.write("\3\5\3\u00b0\n\3\3\3\3\3\3\3\5\3\u00b5\n\3\3\3\5\3\u00b8")
        buf.write("\n\3\3\3\3\3\5\3\u00bc\n\3\3\3\3\3\5\3\u00c0\n\3\3\3\3")
        buf.write("\3\5\3\u00c4\n\3\3\3\3\3\5\3\u00c8\n\3\3\3\3\3\5\3\u00cc")
        buf.write("\n\3\3\3\3\3\5\3\u00d0\n\3\3\3\3\3\5\3\u00d4\n\3\5\3\u00d6")
        buf.write("\n\3\3\4\3\4\5\4\u00da\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\5\6\u00e8\n\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u00ef\n\6\3\6\3\6\3\6\3\6\5\6\u00f5\n\6\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\5\7\u00ff\n\7\3\7\5\7\u0102\n\7")
        buf.write("\5\7\u0104\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\n")
        buf.write("\7\n\u0110\n\n\f\n\16\n\u0113\13\n\3\n\3\n\3\13\3\13\7")
        buf.write("\13\u0119\n\13\f\13\16\13\u011c\13\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\7\13\u0123\n\13\f\13\16\13\u0126\13\13\3\13\5")
        buf.write("\13\u0129\n\13\3\f\3\f\7\f\u012d\n\f\f\f\16\f\u0130\13")
        buf.write("\f\3\f\3\f\5\f\u0134\n\f\3\f\7\f\u0137\n\f\f\f\16\f\u013a")
        buf.write("\13\f\5\f\u013c\n\f\3\r\3\r\3\r\7\r\u0141\n\r\f\r\16\r")
        buf.write("\u0144\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0155\n\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u0182")
        buf.write("\n\16\f\16\16\16\u0185\13\16\3\17\3\17\3\17\5\17\u018a")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0194")
        buf.write("\n\17\3\17\3\17\5\17\u0198\n\17\3\20\3\20\3\20\3\20\3")
        buf.write("\20\7\20\u019f\n\20\f\20\16\20\u01a2\13\20\5\20\u01a4")
        buf.write("\n\20\3\20\3\20\3\21\3\21\3\21\5\21\u01ab\n\21\3\22\3")
        buf.write("\22\3\23\3\23\3\23\3\23\3\23\5\23\u01b4\n\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u01bb\n\23\5\23\u01bd\n\23\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\7\24\u01c5\n\24\f\24\16\24\u01c8")
        buf.write("\13\24\5\24\u01ca\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\7\24\u01d3\n\24\f\24\16\24\u01d6\13\24\5\24\u01d8")
        buf.write("\n\24\3\24\3\24\3\24\3\24\5\24\u01de\n\24\3\24\5\24\u01e1")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u01e9\n\24\f")
        buf.write("\24\16\24\u01ec\13\24\3\25\3\25\3\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0211\n\26\3")
        buf.write("\27\3\27\5\27\u0215\n\27\3\27\3\27\3\27\7\27\u021a\n\27")
        buf.write("\f\27\16\27\u021d\13\27\3\27\3\27\3\27\3\27\5\27\u0223")
        buf.write("\n\27\3\30\3\30\3\30\3\30\3\30\7\30\u022a\n\30\f\30\16")
        buf.write("\30\u022d\13\30\3\30\3\30\3\30\7\30\u0232\n\30\f\30\16")
        buf.write("\30\u0235\13\30\3\30\5\30\u0238\n\30\3\31\5\31\u023b\n")
        buf.write("\31\3\31\3\31\5\31\u023f\n\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u0245\n\31\3\31\3\31\3\31\3\31\5\31\u024b\n\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u0251\n\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\7\32\u0258\n\32\f\32\16\32\u025b\13\32\3\32\5\32\u025e")
        buf.write("\n\32\3\32\3\32\5\32\u0262\n\32\3\33\3\33\5\33\u0266\n")
        buf.write("\33\3\33\5\33\u0269\n\33\3\34\3\34\3\34\3\34\5\34\u026f")
        buf.write("\n\34\3\35\3\35\3\35\5\35\u0274\n\35\3\36\3\36\3\36\5")
        buf.write("\36\u0279\n\36\3\36\3\36\3\36\3\36\3\36\5\36\u0280\n\36")
        buf.write("\3\36\3\36\5\36\u0284\n\36\3\37\3\37\3\37\5\37\u0289\n")
        buf.write("\37\3\37\3\37\3\37\3 \3 \3 \5 \u0291\n \3 \3 \6 \u0295")
        buf.write("\n \r \16 \u0296\3 \3 \3 \3 \3 \5 \u029e\n \3 \3 \7 \u02a2")
        buf.write("\n \f \16 \u02a5\13 \3 \3 \3 \5 \u02aa\n \3!\3!\3!\3!")
        buf.write("\5!\u02b0\n!\3\"\3\"\3\"\3\"\5\"\u02b6\n\"\3\"\3\"\3#")
        buf.write("\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\5$\u02d1\n$\3%\3%\7%\u02d5\n%\f%\16%\u02d8")
        buf.write("\13%\3%\3%\3%\7%\u02dd\n%\f%\16%\u02e0\13%\3%\5%\u02e3")
        buf.write("\n%\3&\3&\3&\3&\3\'\3\'\5\'\u02eb\n\'\3(\3(\3(\3(\3(\5")
        buf.write("(\u02f2\n(\3)\3)\3)\6)\u02f7\n)\r)\16)\u02f8\3)\3)\3)")
        buf.write("\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u030b\n)\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0317\n*\3+\3+\3+\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u032e")
        buf.write("\n,\3-\3-\7-\u0332\n-\f-\16-\u0335\13-\3-\3-\3-\7-\u033a")
        buf.write("\n-\f-\16-\u033d\13-\3-\5-\u0340\n-\3.\3.\7.\u0344\n.")
        buf.write("\f.\16.\u0347\13.\3.\3.\3.\7.\u034c\n.\f.\16.\u034f\13")
        buf.write(".\3.\3.\3.\5.\u0354\n.\3/\3/\7/\u0358\n/\f/\16/\u035b")
        buf.write("\13/\3/\3/\5/\u035f\n/\3/\7/\u0362\n/\f/\16/\u0365\13")
        buf.write("/\3/\3/\5/\u0369\n/\3/\3/\3/\7/\u036e\n/\f/\16/\u0371")
        buf.write("\13/\3/\3/\3/\7/\u0376\n/\f/\16/\u0379\13/\3/\3/\5/\u037d")
        buf.write("\n/\3/\3/\5/\u0381\n/\3/\7/\u0384\n/\f/\16/\u0387\13/")
        buf.write("\3/\3/\3/\7/\u038c\n/\f/\16/\u038f\13/\3/\3/\5/\u0393")
        buf.write("\n/\3/\3/\5/\u0397\n/\3\60\3\60\3\60\5\60\u039c\n\60\3")
        buf.write("\60\5\60\u039f\n\60\3\60\3\60\3\61\3\61\3\61\5\61\u03a6")
        buf.write("\n\61\3\61\5\61\u03a9\n\61\3\61\3\61\3\62\3\62\6\62\u03af")
        buf.write("\n\62\r\62\16\62\u03b0\3\62\3\62\3\62\3\62\7\62\u03b7")
        buf.write("\n\62\f\62\16\62\u03ba\13\62\3\62\3\62\5\62\u03be\n\62")
        buf.write("\3\63\3\63\6\63\u03c2\n\63\r\63\16\63\u03c3\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\7\63\u03cd\n\63\f\63\16\63\u03d0")
        buf.write("\13\63\3\63\3\63\5\63\u03d4\n\63\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u03da\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\5\65\u03e5\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5")
        buf.write("\66\u03ed\n\66\3\67\3\67\3\67\5\67\u03f2\n\67\3\67\7\67")
        buf.write("\u03f5\n\67\f\67\16\67\u03f8\13\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\5\67\u03ff\n\67\3\67\7\67\u0402\n\67\f\67\16\67")
        buf.write("\u0405\13\67\3\67\3\67\5\67\u0409\n\67\38\38\58\u040d")
        buf.write("\n8\38\38\78\u0411\n8\f8\168\u0414\138\38\58\u0417\n8")
        buf.write("\38\38\39\39\39\39\3:\3:\3:\5:\u0422\n:\3;\3;\5;\u0426")
        buf.write("\n;\3;\3;\7;\u042a\n;\f;\16;\u042d\13;\3;\5;\u0430\n;")
        buf.write("\3;\3;\3<\3<\3<\5<\u0437\n<\3=\3=\5=\u043b\n=\3=\5=\u043e")
        buf.write("\n=\3>\3>\3>\3?\3?\3@\3@\3A\3A\3A\3A\5A\u044b\nA\3B\3")
        buf.write("B\3C\3C\3D\3D\3D\5D\u0454\nD\3E\3E\5E\u0458\nE\3E\3E\5")
        buf.write("E\u045c\nE\3F\3F\3G\3G\3H\3H\3I\3I\3J\3J\3K\3K\3K\5K\u046b")
        buf.write("\nK\3L\3L\3M\3M\3N\3N\3N\2\4\32&O\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\2\31\4\2\r\rWW\4\2\24\24\30\30\4\2\26\27\31\31\4\2\24")
        buf.write("\24\26\31\4\2\20\20\36\36\3\2\34\35\3\2<=\4\2$$\'\'\4")
        buf.write("\2\23\23**\4\2BBGG\3\2BC\3\2RU\3\2@A\6\2@Agg\177\u0080")
        buf.write("\u008b\u008b\6\2ggjj}}\177\177\5\2HI``dd\5\2ii{|\u0080")
        buf.write("\u0080\4\2vx~~\4\2abef\3\2{|\4\2\21\21\u008a\u008a\7\2")
        buf.write("\20\20lnpprruu\7\2``ddggqqyy\2\u0505\2\u009f\3\2\2\2\4")
        buf.write("\u00d5\3\2\2\2\6\u00d9\3\2\2\2\b\u00db\3\2\2\2\n\u00f4")
        buf.write("\3\2\2\2\f\u0103\3\2\2\2\16\u0105\3\2\2\2\20\u0108\3\2")
        buf.write("\2\2\22\u010b\3\2\2\2\24\u0128\3\2\2\2\26\u013b\3\2\2")
        buf.write("\2\30\u013d\3\2\2\2\32\u0154\3\2\2\2\34\u0197\3\2\2\2")
        buf.write("\36\u0199\3\2\2\2 \u01aa\3\2\2\2\"\u01ac\3\2\2\2$\u01bc")
        buf.write("\3\2\2\2&\u01e0\3\2\2\2(\u01ed\3\2\2\2*\u0210\3\2\2\2")
        buf.write(",\u0222\3\2\2\2.\u0237\3\2\2\2\60\u0250\3\2\2\2\62\u0252")
        buf.write("\3\2\2\2\64\u0268\3\2\2\2\66\u026e\3\2\2\28\u0273\3\2")
        buf.write("\2\2:\u0283\3\2\2\2<\u0285\3\2\2\2>\u02a9\3\2\2\2@\u02af")
        buf.write("\3\2\2\2B\u02b1\3\2\2\2D\u02b9\3\2\2\2F\u02d0\3\2\2\2")
        buf.write("H\u02e2\3\2\2\2J\u02e4\3\2\2\2L\u02ea\3\2\2\2N\u02f1\3")
        buf.write("\2\2\2P\u030a\3\2\2\2R\u0316\3\2\2\2T\u0318\3\2\2\2V\u032d")
        buf.write("\3\2\2\2X\u033f\3\2\2\2Z\u0353\3\2\2\2\\\u0396\3\2\2\2")
        buf.write("^\u0398\3\2\2\2`\u03a2\3\2\2\2b\u03bd\3\2\2\2d\u03d3\3")
        buf.write("\2\2\2f\u03d9\3\2\2\2h\u03e4\3\2\2\2j\u03ec\3\2\2\2l\u0408")
        buf.write("\3\2\2\2n\u040a\3\2\2\2p\u041a\3\2\2\2r\u0421\3\2\2\2")
        buf.write("t\u0423\3\2\2\2v\u0436\3\2\2\2x\u043a\3\2\2\2z\u043f\3")
        buf.write("\2\2\2|\u0442\3\2\2\2~\u0444\3\2\2\2\u0080\u044a\3\2\2")
        buf.write("\2\u0082\u044c\3\2\2\2\u0084\u044e\3\2\2\2\u0086\u0453")
        buf.write("\3\2\2\2\u0088\u045b\3\2\2\2\u008a\u045d\3\2\2\2\u008c")
        buf.write("\u045f\3\2\2\2\u008e\u0461\3\2\2\2\u0090\u0463\3\2\2\2")
        buf.write("\u0092\u0465\3\2\2\2\u0094\u046a\3\2\2\2\u0096\u046c\3")
        buf.write("\2\2\2\u0098\u046e\3\2\2\2\u009a\u0470\3\2\2\2\u009c\u009e")
        buf.write("\5\4\3\2\u009d\u009c\3\2\2\2\u009e\u00a1\3\2\2\2\u009f")
        buf.write("\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a2\3\2\2\2")
        buf.write("\u00a1\u009f\3\2\2\2\u00a2\u00a3\7\2\2\3\u00a3\3\3\2\2")
        buf.write("\2\u00a4\u00d6\5\6\4\2\u00a5\u00a7\5\n\6\2\u00a6\u00a8")
        buf.write("\5\b\5\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8")
        buf.write("\u00d6\3\2\2\2\u00a9\u00ab\5$\23\2\u00aa\u00ac\5\b\5\2")
        buf.write("\u00ab\u00aa\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00d6\3")
        buf.write("\2\2\2\u00ad\u00af\5*\26\2\u00ae\u00b0\5\b\5\2\u00af\u00ae")
        buf.write("\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00d6\3\2\2\2\u00b1")
        buf.write("\u00b5\5D#\2\u00b2\u00b5\58\35\2\u00b3\u00b5\5J&\2\u00b4")
        buf.write("\u00b1\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4\u00b3\3\2\2\2")
        buf.write("\u00b5\u00b7\3\2\2\2\u00b6\u00b8\5\b\5\2\u00b7\u00b6\3")
        buf.write("\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00d6\3\2\2\2\u00b9\u00bb")
        buf.write("\5V,\2\u00ba\u00bc\5\b\5\2\u00bb\u00ba\3\2\2\2\u00bb\u00bc")
        buf.write("\3\2\2\2\u00bc\u00d6\3\2\2\2\u00bd\u00bf\5P)\2\u00be\u00c0")
        buf.write("\5\b\5\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0")
        buf.write("\u00d6\3\2\2\2\u00c1\u00c3\5^\60\2\u00c2\u00c4\5\b\5\2")
        buf.write("\u00c3\u00c2\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00d6\3")
        buf.write("\2\2\2\u00c5\u00c7\5`\61\2\u00c6\u00c8\5\b\5\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00d6\3\2\2\2\u00c9")
        buf.write("\u00cb\5\32\16\2\u00ca\u00cc\5\b\5\2\u00cb\u00ca\3\2\2")
        buf.write("\2\u00cb\u00cc\3\2\2\2\u00cc\u00d6\3\2\2\2\u00cd\u00cf")
        buf.write("\5X-\2\u00ce\u00d0\5\b\5\2\u00cf\u00ce\3\2\2\2\u00cf\u00d0")
        buf.write("\3\2\2\2\u00d0\u00d6\3\2\2\2\u00d1\u00d3\5h\65\2\u00d2")
        buf.write("\u00d4\5\b\5\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00d6\3\2\2\2\u00d5\u00a4\3\2\2\2\u00d5\u00a5\3")
        buf.write("\2\2\2\u00d5\u00a9\3\2\2\2\u00d5\u00ad\3\2\2\2\u00d5\u00b4")
        buf.write("\3\2\2\2\u00d5\u00b9\3\2\2\2\u00d5\u00bd\3\2\2\2\u00d5")
        buf.write("\u00c1\3\2\2\2\u00d5\u00c5\3\2\2\2\u00d5\u00c9\3\2\2\2")
        buf.write("\u00d5\u00cd\3\2\2\2\u00d5\u00d1\3\2\2\2\u00d6\5\3\2\2")
        buf.write("\2\u00d7\u00da\5\b\5\2\u00d8\u00da\7\n\2\2\u00d9\u00d7")
        buf.write("\3\2\2\2\u00d9\u00d8\3\2\2\2\u00da\7\3\2\2\2\u00db\u00dc")
        buf.write("\7\13\2\2\u00dc\t\3\2\2\2\u00dd\u00de\7\16\2\2\u00de\u00f5")
        buf.write("\5\f\7\2\u00df\u00e0\7\16\2\2\u00e0\u00e1\5\f\7\2\u00e1")
        buf.write("\u00e2\7\f\2\2\u00e2\u00e3\5\u0086D\2\u00e3\u00f5\3\2")
        buf.write("\2\2\u00e4\u00e5\7\16\2\2\u00e5\u00e7\5\f\7\2\u00e6\u00e8")
        buf.write("\7\r\2\2\u00e7\u00e6\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00ea\5\u0086D\2\u00ea\u00f5\3\2")
        buf.write("\2\2\u00eb\u00ec\7\16\2\2\u00ec\u00ee\5\f\7\2\u00ed\u00ef")
        buf.write("\t\2\2\2\u00ee\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef")
        buf.write("\u00f0\3\2\2\2\u00f0\u00f1\5\22\n\2\u00f1\u00f5\3\2\2")
        buf.write("\2\u00f2\u00f3\7\16\2\2\u00f3\u00f5\5n8\2\u00f4\u00dd")
        buf.write("\3\2\2\2\u00f4\u00df\3\2\2\2\u00f4\u00e4\3\2\2\2\u00f4")
        buf.write("\u00eb\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\13\3\2\2\2\u00f6")
        buf.write("\u0104\5\u0080A\2\u00f7\u0104\5\u0086D\2\u00f8\u00f9\5")
        buf.write("\u0086D\2\u00f9\u00fa\7W\2\2\u00fa\u00fb\5\u0086D\2\u00fb")
        buf.write("\u0104\3\2\2\2\u00fc\u00fe\5\16\b\2\u00fd\u00ff\5\20\t")
        buf.write("\2\u00fe\u00fd\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0104")
        buf.write("\3\2\2\2\u0100\u0102\5\20\t\2\u0101\u0100\3\2\2\2\u0101")
        buf.write("\u0102\3\2\2\2\u0102\u0104\3\2\2\2\u0103\u00f6\3\2\2\2")
        buf.write("\u0103\u00f7\3\2\2\2\u0103\u00f8\3\2\2\2\u0103\u00fc\3")
        buf.write("\2\2\2\u0103\u0101\3\2\2\2\u0104\r\3\2\2\2\u0105\u0106")
        buf.write("\7>\2\2\u0106\u0107\5\u0086D\2\u0107\17\3\2\2\2\u0108")
        buf.write("\u0109\7?\2\2\u0109\u010a\5\u0086D\2\u010a\21\3\2\2\2")
        buf.write("\u010b\u010c\7\3\2\2\u010c\u0111\5\66\34\2\u010d\u010e")
        buf.write("\7\32\2\2\u010e\u0110\5\66\34\2\u010f\u010d\3\2\2\2\u0110")
        buf.write("\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2")
        buf.write("\u0112\u0114\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115\7")
        buf.write("\4\2\2\u0115\23\3\2\2\2\u0116\u011a\7\3\2\2\u0117\u0119")
        buf.write("\5\4\3\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a")
        buf.write("\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d\3\2\2\2")
        buf.write("\u011c\u011a\3\2\2\2\u011d\u0129\7\4\2\2\u011e\u011f\7")
        buf.write("\23\2\2\u011f\u0129\5\32\16\2\u0120\u0124\7\23\2\2\u0121")
        buf.write("\u0123\5\4\3\2\u0122\u0121\3\2\2\2\u0123\u0126\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0127\3")
        buf.write("\2\2\2\u0126\u0124\3\2\2\2\u0127\u0129\7\22\2\2\u0128")
        buf.write("\u0116\3\2\2\2\u0128\u011e\3\2\2\2\u0128\u0120\3\2\2\2")
        buf.write("\u0129\25\3\2\2\2\u012a\u012e\7\3\2\2\u012b\u012d\5\4")
        buf.write("\3\2\u012c\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c")
        buf.write("\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130")
        buf.write("\u012e\3\2\2\2\u0131\u013c\7\4\2\2\u0132\u0134\7\23\2")
        buf.write("\2\u0133\u0132\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0138")
        buf.write("\3\2\2\2\u0135\u0137\5\4\3\2\u0136\u0135\3\2\2\2\u0137")
        buf.write("\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139\3\2\2\2")
        buf.write("\u0139\u013c\3\2\2\2\u013a\u0138\3\2\2\2\u013b\u012a\3")
        buf.write("\2\2\2\u013b\u0133\3\2\2\2\u013c\27\3\2\2\2\u013d\u0142")
        buf.write("\5\32\16\2\u013e\u013f\7\32\2\2\u013f\u0141\5\32\16\2")
        buf.write("\u0140\u013e\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0140\3")
        buf.write("\2\2\2\u0142\u0143\3\2\2\2\u0143\31\3\2\2\2\u0144\u0142")
        buf.write("\3\2\2\2\u0145\u0146\b\16\1\2\u0146\u0155\5\36\20\2\u0147")
        buf.write("\u0155\5*\26\2\u0148\u0149\5\u0086D\2\u0149\u014a\5\u0080")
        buf.write("A\2\u014a\u0155\3\2\2\2\u014b\u014c\5\u008cG\2\u014c\u014d")
        buf.write("\5\32\16\17\u014d\u0155\3\2\2\2\u014e\u0155\5h\65\2\u014f")
        buf.write("\u0150\7\5\2\2\u0150\u0151\5\32\16\2\u0151\u0152\7\6\2")
        buf.write("\2\u0152\u0155\3\2\2\2\u0153\u0155\5\34\17\2\u0154\u0145")
        buf.write("\3\2\2\2\u0154\u0147\3\2\2\2\u0154\u0148\3\2\2\2\u0154")
        buf.write("\u014b\3\2\2\2\u0154\u014e\3\2\2\2\u0154\u014f\3\2\2\2")
        buf.write("\u0154\u0153\3\2\2\2\u0155\u0183\3\2\2\2\u0156\u0157\f")
        buf.write("\r\2\2\u0157\u0158\5\u0090I\2\u0158\u0159\5\32\16\16\u0159")
        buf.write("\u0182\3\2\2\2\u015a\u015b\f\f\2\2\u015b\u015c\5\u0092")
        buf.write("J\2\u015c\u015d\5\32\16\r\u015d\u0182\3\2\2\2\u015e\u015f")
        buf.write("\f\13\2\2\u015f\u0160\5\u0094K\2\u0160\u0161\5\32\16\f")
        buf.write("\u0161\u0182\3\2\2\2\u0162\u0163\f\n\2\2\u0163\u0164\5")
        buf.write("\u0096L\2\u0164\u0165\5\32\16\n\u0165\u0182\3\2\2\2\u0166")
        buf.write("\u0167\f\t\2\2\u0167\u0168\5\u0098M\2\u0168\u0169\5\32")
        buf.write("\16\n\u0169\u0182\3\2\2\2\u016a\u016b\f\b\2\2\u016b\u016c")
        buf.write("\5\u008aF\2\u016c\u016d\5\32\16\t\u016d\u0182\3\2\2\2")
        buf.write("\u016e\u016f\f\7\2\2\u016f\u0170\5\u009aN\2\u0170\u0171")
        buf.write("\5\32\16\b\u0171\u0182\3\2\2\2\u0172\u0173\f\25\2\2\u0173")
        buf.write("\u0174\7W\2\2\u0174\u0182\5\u0086D\2\u0175\u0176\f\24")
        buf.write("\2\2\u0176\u0177\7W\2\2\u0177\u0182\5\36\20\2\u0178\u0179")
        buf.write("\f\23\2\2\u0179\u0182\5l\67\2\u017a\u017b\f\20\2\2\u017b")
        buf.write("\u017c\7\f\2\2\u017c\u0182\5&\24\2\u017d\u017e\f\16\2")
        buf.write("\2\u017e\u0182\5\u008eH\2\u017f\u0180\f\3\2\2\u0180\u0182")
        buf.write("\7\35\2\2\u0181\u0156\3\2\2\2\u0181\u015a\3\2\2\2\u0181")
        buf.write("\u015e\3\2\2\2\u0181\u0162\3\2\2\2\u0181\u0166\3\2\2\2")
        buf.write("\u0181\u016a\3\2\2\2\u0181\u016e\3\2\2\2\u0181\u0172\3")
        buf.write("\2\2\2\u0181\u0175\3\2\2\2\u0181\u0178\3\2\2\2\u0181\u017a")
        buf.write("\3\2\2\2\u0181\u017d\3\2\2\2\u0181\u017f\3\2\2\2\u0182")
        buf.write("\u0185\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184\3\2\2\2")
        buf.write("\u0184\33\3\2\2\2\u0185\u0183\3\2\2\2\u0186\u0189\t\3")
        buf.write("\2\2\u0187\u0188\7\5\2\2\u0188\u018a\7\6\2\2\u0189\u0187")
        buf.write("\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u0198\3\2\2\2\u018b")
        buf.write("\u018c\t\4\2\2\u018c\u0198\5\32\16\2\u018d\u018e\7\25")
        buf.write("\2\2\u018e\u0198\5\30\r\2\u018f\u0190\7\25\2\2\u0190\u0191")
        buf.write("\7\5\2\2\u0191\u0193\5\30\r\2\u0192\u0194\7\32\2\2\u0193")
        buf.write("\u0192\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u0195\3\2\2\2")
        buf.write("\u0195\u0196\7\6\2\2\u0196\u0198\3\2\2\2\u0197\u0186\3")
        buf.write("\2\2\2\u0197\u018b\3\2\2\2\u0197\u018d\3\2\2\2\u0197\u018f")
        buf.write("\3\2\2\2\u0198\35\3\2\2\2\u0199\u019a\5\66\34\2\u019a")
        buf.write("\u01a3\7\5\2\2\u019b\u01a0\5 \21\2\u019c\u019d\7\32\2")
        buf.write("\2\u019d\u019f\5 \21\2\u019e\u019c\3\2\2\2\u019f\u01a2")
        buf.write("\3\2\2\2\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u01a4\3\2\2\2\u01a2\u01a0\3\2\2\2\u01a3\u019b\3\2\2\2")
        buf.write("\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\7")
        buf.write("\6\2\2\u01a6\37\3\2\2\2\u01a7\u01ab\5\32\16\2\u01a8\u01ab")
        buf.write("\5\36\20\2\u01a9\u01ab\5h\65\2\u01aa\u01a7\3\2\2\2\u01aa")
        buf.write("\u01a8\3\2\2\2\u01aa\u01a9\3\2\2\2\u01ab!\3\2\2\2\u01ac")
        buf.write("\u01ad\t\5\2\2\u01ad#\3\2\2\2\u01ae\u01af\7\33\2\2\u01af")
        buf.write("\u01b0\5\u0086D\2\u01b0\u01b1\7\23\2\2\u01b1\u01b3\5&")
        buf.write("\24\2\u01b2\u01b4\7\22\2\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01bd\3\2\2\2\u01b5\u01b6\7\33\2\2\u01b6")
        buf.write("\u01b7\5\u0086D\2\u01b7\u01b8\7\3\2\2\u01b8\u01ba\5&\24")
        buf.write("\2\u01b9\u01bb\7\4\2\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ae\3\2\2\2\u01bc")
        buf.write("\u01b5\3\2\2\2\u01bd%\3\2\2\2\u01be\u01bf\b\24\1\2\u01bf")
        buf.write("\u01c0\5\u0086D\2\u01c0\u01c9\7\5\2\2\u01c1\u01c6\5&\24")
        buf.write("\2\u01c2\u01c3\7\32\2\2\u01c3\u01c5\5&\24\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6")
        buf.write("\u01c7\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2")
        buf.write("\u01c9\u01c1\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\3")
        buf.write("\2\2\2\u01cb\u01cc\7\6\2\2\u01cc\u01e1\3\2\2\2\u01cd\u01ce")
        buf.write("\5\u0086D\2\u01ce\u01d7\7b\2\2\u01cf\u01d4\5&\24\2\u01d0")
        buf.write("\u01d1\7\32\2\2\u01d1\u01d3\5&\24\2\u01d2\u01d0\3\2\2")
        buf.write("\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01d8\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d7")
        buf.write("\u01cf\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\3\2\2\2")
        buf.write("\u01d9\u01da\7f\2\2\u01da\u01e1\3\2\2\2\u01db\u01dd\5")
        buf.write("\u0086D\2\u01dc\u01de\t\6\2\2\u01dd\u01dc\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01e1\5~@\2\u01e0")
        buf.write("\u01be\3\2\2\2\u01e0\u01cd\3\2\2\2\u01e0\u01db\3\2\2\2")
        buf.write("\u01e0\u01df\3\2\2\2\u01e1\u01ea\3\2\2\2\u01e2\u01e3\f")
        buf.write("\6\2\2\u01e3\u01e4\t\7\2\2\u01e4\u01e9\5&\24\7\u01e5\u01e6")
        buf.write("\f\5\2\2\u01e6\u01e7\7\7\2\2\u01e7\u01e9\7\b\2\2\u01e8")
        buf.write("\u01e2\3\2\2\2\u01e8\u01e5\3\2\2\2\u01e9\u01ec\3\2\2\2")
        buf.write("\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\'\3\2\2")
        buf.write("\2\u01ec\u01ea\3\2\2\2\u01ed\u01ee\t\b\2\2\u01ee\u01ef")
        buf.write("\5&\24\2\u01ef)\3\2\2\2\u01f0\u01f1\7!\2\2\u01f1\u01f2")
        buf.write("\5,\27\2\u01f2\u01f3\5\24\13\2\u01f3\u0211\3\2\2\2\u01f4")
        buf.write("\u01f5\7\"\2\2\u01f5\u01f6\5,\27\2\u01f6\u01f7\5\24\13")
        buf.write("\2\u01f7\u0211\3\2\2\2\u01f8\u01f9\7#\2\2\u01f9\u01fa")
        buf.write("\5,\27\2\u01fa\u01fb\5\24\13\2\u01fb\u0211\3\2\2\2\u01fc")
        buf.write("\u01fd\7#\2\2\u01fd\u01fe\5\62\32\2\u01fe\u01ff\5\24\13")
        buf.write("\2\u01ff\u0211\3\2\2\2\u0200\u0201\5\62\32\2\u0201\u0202")
        buf.write("\t\t\2\2\u0202\u0203\5.\30\2\u0203\u0211\3\2\2\2\u0204")
        buf.write("\u0205\5,\27\2\u0205\u0206\7$\2\2\u0206\u0207\5.\30\2")
        buf.write("\u0207\u0211\3\2\2\2\u0208\u0209\5,\27\2\u0209\u020a\7")
        buf.write("%\2\2\u020a\u020b\5.\30\2\u020b\u0211\3\2\2\2\u020c\u020d")
        buf.write("\5,\27\2\u020d\u020e\7\'\2\2\u020e\u020f\5.\30\2\u020f")
        buf.write("\u0211\3\2\2\2\u0210\u01f0\3\2\2\2\u0210\u01f4\3\2\2\2")
        buf.write("\u0210\u01f8\3\2\2\2\u0210\u01fc\3\2\2\2\u0210\u0200\3")
        buf.write("\2\2\2\u0210\u0204\3\2\2\2\u0210\u0208\3\2\2\2\u0210\u020c")
        buf.write("\3\2\2\2\u0211+\3\2\2\2\u0212\u0214\5\u0086D\2\u0213\u0215")
        buf.write("\5(\25\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write("\u0223\3\2\2\2\u0216\u021b\5\64\33\2\u0217\u0218\7\32")
        buf.write("\2\2\u0218\u021a\5\64\33\2\u0219\u0217\3\2\2\2\u021a\u021d")
        buf.write("\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c")
        buf.write("\u0223\3\2\2\2\u021d\u021b\3\2\2\2\u021e\u0223\5\66\34")
        buf.write("\2\u021f\u0220\5\66\34\2\u0220\u0221\5l\67\2\u0221\u0223")
        buf.write("\3\2\2\2\u0222\u0212\3\2\2\2\u0222\u0216\3\2\2\2\u0222")
        buf.write("\u021e\3\2\2\2\u0222\u021f\3\2\2\2\u0223-\3\2\2\2\u0224")
        buf.write("\u0238\5\32\16\2\u0225\u0238\5\30\r\2\u0226\u0238\5\4")
        buf.write("\3\2\u0227\u022b\7\3\2\2\u0228\u022a\5\4\3\2\u0229\u0228")
        buf.write("\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229\3\2\2\2\u022b")
        buf.write("\u022c\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022e\u0238\7\4\2\2\u022f\u0233\7\23\2\2\u0230\u0232")
        buf.write("\5\4\3\2\u0231\u0230\3\2\2\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0236\3\2\2\2")
        buf.write("\u0235\u0233\3\2\2\2\u0236\u0238\7\22\2\2\u0237\u0224")
        buf.write("\3\2\2\2\u0237\u0225\3\2\2\2\u0237\u0226\3\2\2\2\u0237")
        buf.write("\u0227\3\2\2\2\u0237\u022f\3\2\2\2\u0238/\3\2\2\2\u0239")
        buf.write("\u023b\5&\24\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\u023c\3\2\2\2\u023c\u0251\5\u0086D\2\u023d\u023f")
        buf.write("\5&\24\2\u023e\u023d\3\2\2\2\u023e\u023f\3\2\2\2\u023f")
        buf.write("\u0240\3\2\2\2\u0240\u0241\5\u0086D\2\u0241\u0242\7\20")
        buf.write("\2\2\u0242\u0251\3\2\2\2\u0243\u0245\5&\24\2\u0244\u0243")
        buf.write("\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write("\u0247\5\u0086D\2\u0247\u0248\7\37\2\2\u0248\u0251\3\2")
        buf.write("\2\2\u0249\u024b\5&\24\2\u024a\u0249\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\5\u0086D\2\u024d")
        buf.write("\u024e\7\36\2\2\u024e\u024f\5\u0086D\2\u024f\u0251\3\2")
        buf.write("\2\2\u0250\u023a\3\2\2\2\u0250\u023e\3\2\2\2\u0250\u0244")
        buf.write("\3\2\2\2\u0250\u024a\3\2\2\2\u0251\61\3\2\2\2\u0252\u0253")
        buf.write("\5\u0086D\2\u0253\u0254\7\5\2\2\u0254\u0259\5\60\31\2")
        buf.write("\u0255\u0256\7\32\2\2\u0256\u0258\5\60\31\2\u0257\u0255")
        buf.write("\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2\u0259")
        buf.write("\u025a\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2")
        buf.write("\u025c\u025e\7\32\2\2\u025d\u025c\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0261\7\6\2\2\u0260")
        buf.write("\u0262\5(\25\2\u0261\u0260\3\2\2\2\u0261\u0262\3\2\2\2")
        buf.write("\u0262\63\3\2\2\2\u0263\u0265\5\66\34\2\u0264\u0266\5")
        buf.write("(\25\2\u0265\u0264\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u0269")
        buf.write("\3\2\2\2\u0267\u0269\7>\2\2\u0268\u0263\3\2\2\2\u0268")
        buf.write("\u0267\3\2\2\2\u0269\65\3\2\2\2\u026a\u026f\7O\2\2\u026b")
        buf.write("\u026c\7P\2\2\u026c\u026d\7W\2\2\u026d\u026f\5\u0086D")
        buf.write("\2\u026e\u026a\3\2\2\2\u026e\u026b\3\2\2\2\u026f\67\3")
        buf.write("\2\2\2\u0270\u0274\5:\36\2\u0271\u0274\5<\37\2\u0272\u0274")
        buf.write("\5> \2\u0273\u0270\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0272")
        buf.write("\3\2\2\2\u02749\3\2\2\2\u0275\u0276\7(\2\2\u0276\u0278")
        buf.write("\5N(\2\u0277\u0279\t\n\2\2\u0278\u0277\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\5\32\16\2\u027b")
        buf.write("\u0284\3\2\2\2\u027c\u027d\7(\2\2\u027d\u027f\5N(\2\u027e")
        buf.write("\u0280\t\n\2\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2")
        buf.write("\u0280\u0281\3\2\2\2\u0281\u0282\5\24\13\2\u0282\u0284")
        buf.write("\3\2\2\2\u0283\u0275\3\2\2\2\u0283\u027c\3\2\2\2\u0284")
        buf.write(";\3\2\2\2\u0285\u0286\7(\2\2\u0286\u0288\5N(\2\u0287\u0289")
        buf.write("\t\n\2\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028b\5\26\f\2\u028b\u028c\5@!\2")
        buf.write("\u028c=\3\2\2\2\u028d\u028e\7(\2\2\u028e\u0290\5N(\2\u028f")
        buf.write("\u0291\t\n\2\2\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2")
        buf.write("\u0291\u0292\3\2\2\2\u0292\u0294\5\26\f\2\u0293\u0295")
        buf.write("\5B\"\2\u0294\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u0299\5@!\2\u0299\u02aa\3\2\2\2\u029a\u029b\7(")
        buf.write("\2\2\u029b\u029d\5N(\2\u029c\u029e\t\n\2\2\u029d\u029c")
        buf.write("\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a3\5\26\f\2\u02a0\u02a2\5B\"\2\u02a1\u02a0\3\2\2\2")
        buf.write("\u02a2\u02a5\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3\u02a4\3")
        buf.write("\2\2\2\u02a4\u02a6\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a6\u02a7")
        buf.write("\7)\2\2\u02a7\u02a8\5:\36\2\u02a8\u02aa\3\2\2\2\u02a9")
        buf.write("\u028d\3\2\2\2\u02a9\u029a\3\2\2\2\u02aa?\3\2\2\2\u02ab")
        buf.write("\u02ac\7)\2\2\u02ac\u02b0\5\32\16\2\u02ad\u02ae\7)\2\2")
        buf.write("\u02ae\u02b0\5\24\13\2\u02af\u02ab\3\2\2\2\u02af\u02ad")
        buf.write("\3\2\2\2\u02b0A\3\2\2\2\u02b1\u02b2\7)\2\2\u02b2\u02b3")
        buf.write("\7(\2\2\u02b3\u02b5\5N(\2\u02b4\u02b6\t\n\2\2\u02b5\u02b4")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b8\5\26\f\2\u02b8C\3\2\2\2\u02b9\u02ba\7+\2\2\u02ba")
        buf.write("\u02bb\5N(\2\u02bb\u02bc\5H%\2\u02bcE\3\2\2\2\u02bd\u02be")
        buf.write("\7,\2\2\u02be\u02bf\5\32\16\2\u02bf\u02c0\7\23\2\2\u02c0")
        buf.write("\u02c1\5\26\f\2\u02c1\u02d1\3\2\2\2\u02c2\u02c3\5\32\16")
        buf.write("\2\u02c3\u02c4\7/\2\2\u02c4\u02c5\5\26\f\2\u02c5\u02d1")
        buf.write("\3\2\2\2\u02c6\u02c7\7-\2\2\u02c7\u02c8\7\23\2\2\u02c8")
        buf.write("\u02d1\5\26\f\2\u02c9\u02ca\7,\2\2\u02ca\u02cb\7\20\2")
        buf.write("\2\u02cb\u02cc\7\23\2\2\u02cc\u02d1\5\26\f\2\u02cd\u02ce")
        buf.write("\7\20\2\2\u02ce\u02cf\7/\2\2\u02cf\u02d1\5\26\f\2\u02d0")
        buf.write("\u02bd\3\2\2\2\u02d0\u02c2\3\2\2\2\u02d0\u02c6\3\2\2\2")
        buf.write("\u02d0\u02c9\3\2\2\2\u02d0\u02cd\3\2\2\2\u02d1G\3\2\2")
        buf.write("\2\u02d2\u02d6\7\3\2\2\u02d3\u02d5\5F$\2\u02d4\u02d3\3")
        buf.write("\2\2\2\u02d5\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7")
        buf.write("\3\2\2\2\u02d7\u02d9\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9")
        buf.write("\u02e3\7\4\2\2\u02da\u02de\7\23\2\2\u02db\u02dd\5F$\2")
        buf.write("\u02dc\u02db\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02dc\3")
        buf.write("\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e1\3\2\2\2\u02e0\u02de")
        buf.write("\3\2\2\2\u02e1\u02e3\7\22\2\2\u02e2\u02d2\3\2\2\2\u02e2")
        buf.write("\u02da\3\2\2\2\u02e3I\3\2\2\2\u02e4\u02e5\7.\2\2\u02e5")
        buf.write("\u02e6\5N(\2\u02e6\u02e7\5L\'\2\u02e7K\3\2\2\2\u02e8\u02eb")
        buf.write("\5\32\16\2\u02e9\u02eb\5\24\13\2\u02ea\u02e8\3\2\2\2\u02ea")
        buf.write("\u02e9\3\2\2\2\u02ebM\3\2\2\2\u02ec\u02f2\5\32\16\2\u02ed")
        buf.write("\u02ee\7\5\2\2\u02ee\u02ef\5\32\16\2\u02ef\u02f0\7\6\2")
        buf.write("\2\u02f0\u02f2\3\2\2\2\u02f1\u02ec\3\2\2\2\u02f1\u02ed")
        buf.write("\3\2\2\2\u02f2O\3\2\2\2\u02f3\u02f4\7\60\2\2\u02f4\u02f6")
        buf.write("\5\26\f\2\u02f5\u02f7\5R*\2\u02f6\u02f5\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa\u02fb\5T+\2\u02fb\u030b\3\2")
        buf.write("\2\2\u02fc\u02fd\7\60\2\2\u02fd\u02fe\5\26\f\2\u02fe\u02ff")
        buf.write("\7\61\2\2\u02ff\u0300\5\u0086D\2\u0300\u0301\5\26\f\2")
        buf.write("\u0301\u030b\3\2\2\2\u0302\u0303\7\60\2\2\u0303\u0304")
        buf.write("\5\26\f\2\u0304\u0305\7\61\2\2\u0305\u0306\7\5\2\2\u0306")
        buf.write("\u0307\5\u0086D\2\u0307\u0308\7\6\2\2\u0308\u0309\5\26")
        buf.write("\f\2\u0309\u030b\3\2\2\2\u030a\u02f3\3\2\2\2\u030a\u02fc")
        buf.write("\3\2\2\2\u030a\u0302\3\2\2\2\u030bQ\3\2\2\2\u030c\u030d")
        buf.write("\7\61\2\2\u030d\u030e\5\u0086D\2\u030e\u030f\5\26\f\2")
        buf.write("\u030f\u0317\3\2\2\2\u0310\u0311\7\61\2\2\u0311\u0312")
        buf.write("\7\5\2\2\u0312\u0313\5\u0086D\2\u0313\u0314\7\6\2\2\u0314")
        buf.write("\u0315\5\26\f\2\u0315\u0317\3\2\2\2\u0316\u030c\3\2\2")
        buf.write("\2\u0316\u0310\3\2\2\2\u0317S\3\2\2\2\u0318\u0319\7\62")
        buf.write("\2\2\u0319\u031a\5\24\13\2\u031aU\3\2\2\2\u031b\u031c")
        buf.write("\7\64\2\2\u031c\u031d\7\5\2\2\u031d\u031e\5\30\r\2\u031e")
        buf.write("\u031f\7\6\2\2\u031f\u0320\5\24\13\2\u0320\u032e\3\2\2")
        buf.write("\2\u0321\u0322\7\64\2\2\u0322\u0323\5\u0086D\2\u0323\u0324")
        buf.write("\7\63\2\2\u0324\u0325\5\32\16\2\u0325\u0326\5\24\13\2")
        buf.write("\u0326\u032e\3\2\2\2\u0327\u0328\7\65\2\2\u0328\u0329")
        buf.write("\5N(\2\u0329\u032a\5\24\13\2\u032a\u032e\3\2\2\2\u032b")
        buf.write("\u032c\7\66\2\2\u032c\u032e\5\24\13\2\u032d\u031b\3\2")
        buf.write("\2\2\u032d\u0321\3\2\2\2\u032d\u0327\3\2\2\2\u032d\u032b")
        buf.write("\3\2\2\2\u032eW\3\2\2\2\u032f\u0333\78\2\2\u0330\u0332")
        buf.write("\5\u0086D\2\u0331\u0330\3\2\2\2\u0332\u0335\3\2\2\2\u0333")
        buf.write("\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2")
        buf.write("\u0335\u0333\3\2\2\2\u0336\u0340\5\4\3\2\u0337\u033b\7")
        buf.write("8\2\2\u0338\u033a\5\u0086D\2\u0339\u0338\3\2\2\2\u033a")
        buf.write("\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2")
        buf.write("\u033c\u033e\3\2\2\2\u033d\u033b\3\2\2\2\u033e\u0340\5")
        buf.write("\24\13\2\u033f\u032f\3\2\2\2\u033f\u0337\3\2\2\2\u0340")
        buf.write("Y\3\2\2\2\u0341\u0345\7\3\2\2\u0342\u0344\5\\/\2\u0343")
        buf.write("\u0342\3\2\2\2\u0344\u0347\3\2\2\2\u0345\u0343\3\2\2\2")
        buf.write("\u0345\u0346\3\2\2\2\u0346\u0348\3\2\2\2\u0347\u0345\3")
        buf.write("\2\2\2\u0348\u0354\7\4\2\2\u0349\u034d\7\23\2\2\u034a")
        buf.write("\u034c\5\\/\2\u034b\u034a\3\2\2\2\u034c\u034f\3\2\2\2")
        buf.write("\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0350\3")
        buf.write("\2\2\2\u034f\u034d\3\2\2\2\u0350\u0354\7\22\2\2\u0351")
        buf.write("\u0352\7\23\2\2\u0352\u0354\5\\/\2\u0353\u0341\3\2\2\2")
        buf.write("\u0353\u0349\3\2\2\2\u0353\u0351\3\2\2\2\u0354[\3\2\2")
        buf.write("\2\u0355\u0397\5\6\4\2\u0356\u0358\5f\64\2\u0357\u0356")
        buf.write("\3\2\2\2\u0358\u035b\3\2\2\2\u0359\u0357\3\2\2\2\u0359")
        buf.write("\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b\u0359\3\2\2\2")
        buf.write("\u035c\u035e\5\u0086D\2\u035d\u035f\5(\25\2\u035e\u035d")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0397\3\2\2\2\u0360")
        buf.write("\u0362\5f\64\2\u0361\u0360\3\2\2\2\u0362\u0365\3\2\2\2")
        buf.write("\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0366\3")
        buf.write("\2\2\2\u0365\u0363\3\2\2\2\u0366\u0368\5\u0086D\2\u0367")
        buf.write("\u0369\5(\25\2\u0368\u0367\3\2\2\2\u0368\u0369\3\2\2\2")
        buf.write("\u0369\u036a\3\2\2\2\u036a\u036b\5\24\13\2\u036b\u0397")
        buf.write("\3\2\2\2\u036c\u036e\5f\64\2\u036d\u036c\3\2\2\2\u036e")
        buf.write("\u0371\3\2\2\2\u036f\u036d\3\2\2\2\u036f\u0370\3\2\2\2")
        buf.write("\u0370\u0372\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0373\5")
        buf.write("\u0086D\2\u0373\u0377\7\5\2\2\u0374\u0376\5\60\31\2\u0375")
        buf.write("\u0374\3\2\2\2\u0376\u0379\3\2\2\2\u0377\u0375\3\2\2\2")
        buf.write("\u0377\u0378\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u0377\3")
        buf.write("\2\2\2\u037a\u037c\7\6\2\2\u037b\u037d\5(\25\2\u037c\u037b")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u0380\3\2\2\2\u037e")
        buf.write("\u037f\7\23\2\2\u037f\u0381\7\24\2\2\u0380\u037e\3\2\2")
        buf.write("\2\u0380\u0381\3\2\2\2\u0381\u0397\3\2\2\2\u0382\u0384")
        buf.write("\5f\64\2\u0383\u0382\3\2\2\2\u0384\u0387\3\2\2\2\u0385")
        buf.write("\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2")
        buf.write("\u0387\u0385\3\2\2\2\u0388\u0389\5\u0086D\2\u0389\u038d")
        buf.write("\7\5\2\2\u038a\u038c\5\60\31\2\u038b\u038a\3\2\2\2\u038c")
        buf.write("\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\u0390\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0392\7")
        buf.write("\6\2\2\u0391\u0393\5(\25\2\u0392\u0391\3\2\2\2\u0392\u0393")
        buf.write("\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395\5\24\13\2\u0395")
        buf.write("\u0397\3\2\2\2\u0396\u0355\3\2\2\2\u0396\u0359\3\2\2\2")
        buf.write("\u0396\u0363\3\2\2\2\u0396\u036f\3\2\2\2\u0396\u0385\3")
        buf.write("\2\2\2\u0397]\3\2\2\2\u0398\u0399\79\2\2\u0399\u039b\5")
        buf.write("\u0086D\2\u039a\u039c\5b\62\2\u039b\u039a\3\2\2\2\u039b")
        buf.write("\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d\u039f\5d\63\2")
        buf.write("\u039e\u039d\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3")
        buf.write("\2\2\2\u03a0\u03a1\5Z.\2\u03a1_\3\2\2\2\u03a2\u03a3\7")
        buf.write(":\2\2\u03a3\u03a5\5\u0086D\2\u03a4\u03a6\5b\62\2\u03a5")
        buf.write("\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2")
        buf.write("\u03a7\u03a9\5d\63\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3")
        buf.write("\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab\5Z.\2\u03aba\3")
        buf.write("\2\2\2\u03ac\u03ae\7;\2\2\u03ad\u03af\5\u0086D\2\u03ae")
        buf.write("\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03ae\3\2\2\2")
        buf.write("\u03b0\u03b1\3\2\2\2\u03b1\u03be\3\2\2\2\u03b2\u03b3\7")
        buf.write("\5\2\2\u03b3\u03b8\5\u0086D\2\u03b4\u03b5\7\32\2\2\u03b5")
        buf.write("\u03b7\5\u0086D\2\u03b6\u03b4\3\2\2\2\u03b7\u03ba\3\2")
        buf.write("\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb")
        buf.write("\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc\7\6\2\2\u03bc")
        buf.write("\u03be\3\2\2\2\u03bd\u03ac\3\2\2\2\u03bd\u03b2\3\2\2\2")
        buf.write("\u03bec\3\2\2\2\u03bf\u03c1\7<\2\2\u03c0\u03c2\5\u0086")
        buf.write("D\2\u03c1\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c1")
        buf.write("\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03d4\3\2\2\2\u03c5")
        buf.write("\u03c6\7=\2\2\u03c6\u03d4\5\u0086D\2\u03c7\u03c8\7=\2")
        buf.write("\2\u03c8\u03c9\7\5\2\2\u03c9\u03ce\5\u0086D\2\u03ca\u03cb")
        buf.write("\7\32\2\2\u03cb\u03cd\5\u0086D\2\u03cc\u03ca\3\2\2\2\u03cd")
        buf.write("\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03d1\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03d2\7")
        buf.write("\6\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03bf\3\2\2\2\u03d3\u03c5")
        buf.write("\3\2\2\2\u03d3\u03c7\3\2\2\2\u03d4e\3\2\2\2\u03d5\u03da")
        buf.write("\5\u0086D\2\u03d6\u03da\7!\2\2\u03d7\u03da\7\"\2\2\u03d8")
        buf.write("\u03da\7#\2\2\u03d9\u03d5\3\2\2\2\u03d9\u03d6\3\2\2\2")
        buf.write("\u03d9\u03d7\3\2\2\2\u03d9\u03d8\3\2\2\2\u03dag\3\2\2")
        buf.write("\2\u03db\u03e5\5j\66\2\u03dc\u03e5\5\u0080A\2\u03dd\u03e5")
        buf.write("\5\u0084C\2\u03de\u03e5\5\u0086D\2\u03df\u03e5\5\66\34")
        buf.write("\2\u03e0\u03e5\5t;\2\u03e1\u03e5\5n8\2\u03e2\u03e5\5l")
        buf.write("\67\2\u03e3\u03e5\5\u0088E\2\u03e4\u03db\3\2\2\2\u03e4")
        buf.write("\u03dc\3\2\2\2\u03e4\u03dd\3\2\2\2\u03e4\u03de\3\2\2\2")
        buf.write("\u03e4\u03df\3\2\2\2\u03e4\u03e0\3\2\2\2\u03e4\u03e1\3")
        buf.write("\2\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e3\3\2\2\2\u03e5i")
        buf.write("\3\2\2\2\u03e6\u03ed\5z>\2\u03e7\u03ed\5|?\2\u03e8\u03ed")
        buf.write("\5~@\2\u03e9\u03ed\7D\2\2\u03ea\u03ed\7E\2\2\u03eb\u03ed")
        buf.write("\7F\2\2\u03ec\u03e6\3\2\2\2\u03ec\u03e7\3\2\2\2\u03ec")
        buf.write("\u03e8\3\2\2\2\u03ec\u03e9\3\2\2\2\u03ec\u03ea\3\2\2\2")
        buf.write("\u03ec\u03eb\3\2\2\2\u03edk\3\2\2\2\u03ee\u03ef\7\7\2")
        buf.write("\2\u03ef\u03f6\5x=\2\u03f0\u03f2\7\32\2\2\u03f1\u03f0")
        buf.write("\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3")
        buf.write("\u03f5\5x=\2\u03f4\u03f1\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6")
        buf.write("\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\3\2\2\2")
        buf.write("\u03f8\u03f6\3\2\2\2\u03f9\u03fa\7\b\2\2\u03fa\u0409\3")
        buf.write("\2\2\2\u03fb\u03fc\7\t\2\2\u03fc\u0403\5x=\2\u03fd\u03ff")
        buf.write("\7\32\2\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff")
        buf.write("\u0400\3\2\2\2\u0400\u0402\5x=\2\u0401\u03fe\3\2\2\2\u0402")
        buf.write("\u0405\3\2\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0406\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u0407\7")
        buf.write("\t\2\2\u0407\u0409\3\2\2\2\u0408\u03ee\3\2\2\2\u0408\u03fb")
        buf.write("\3\2\2\2\u0409m\3\2\2\2\u040a\u040c\7\3\2\2\u040b\u040d")
        buf.write("\5p9\2\u040c\u040b\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u0412")
        buf.write("\3\2\2\2\u040e\u040f\7\32\2\2\u040f\u0411\5p9\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0412\u0413\3\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412\3")
        buf.write("\2\2\2\u0415\u0417\7\32\2\2\u0416\u0415\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u0419\7\4\2\2")
        buf.write("\u0419o\3\2\2\2\u041a\u041b\5r:\2\u041b\u041c\7\23\2\2")
        buf.write("\u041c\u041d\5v<\2\u041dq\3\2\2\2\u041e\u0422\5~@\2\u041f")
        buf.write("\u0422\5\u0086D\2\u0420\u0422\5\u0080A\2\u0421\u041e\3")
        buf.write("\2\2\2\u0421\u041f\3\2\2\2\u0421\u0420\3\2\2\2\u0422s")
        buf.write("\3\2\2\2\u0423\u0425\7\7\2\2\u0424\u0426\5v<\2\u0425\u0424")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u042b\3\2\2\2\u0427")
        buf.write("\u0428\7\32\2\2\u0428\u042a\5v<\2\u0429\u0427\3\2\2\2")
        buf.write("\u042a\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c\3")
        buf.write("\2\2\2\u042c\u042f\3\2\2\2\u042d\u042b\3\2\2\2\u042e\u0430")
        buf.write("\7\32\2\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u0432\7\b\2\2\u0432u\3\2\2\2\u0433")
        buf.write("\u0437\5h\65\2\u0434\u0437\5\32\16\2\u0435\u0437\5\4\3")
        buf.write("\2\u0436\u0433\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0435")
        buf.write("\3\2\2\2\u0437w\3\2\2\2\u0438\u043b\5\u0086D\2\u0439\u043b")
        buf.write("\5~@\2\u043a\u0438\3\2\2\2\u043a\u0439\3\2\2\2\u043b\u043d")
        buf.write("\3\2\2\2\u043c\u043e\7\23\2\2\u043d\u043c\3\2\2\2\u043d")
        buf.write("\u043e\3\2\2\2\u043ey\3\2\2\2\u043f\u0440\t\13\2\2\u0440")
        buf.write("\u0441\5\u0086D\2\u0441{\3\2\2\2\u0442\u0443\t\f\2\2\u0443")
        buf.write("}\3\2\2\2\u0444\u0445\7G\2\2\u0445\177\3\2\2\2\u0446\u044b")
        buf.write("\7J\2\2\u0447\u044b\7K\2\2\u0448\u044b\7L\2\2\u0449\u044b")
        buf.write("\7M\2\2\u044a\u0446\3\2\2\2\u044a\u0447\3\2\2\2\u044a")
        buf.write("\u0448\3\2\2\2\u044a\u0449\3\2\2\2\u044b\u0081\3\2\2\2")
        buf.write("\u044c\u044d\5\"\22\2\u044d\u0083\3\2\2\2\u044e\u044f")
        buf.write("\t\r\2\2\u044f\u0085\3\2\2\2\u0450\u0454\5\u0082B\2\u0451")
        buf.write("\u0454\7Q\2\2\u0452\u0454\7P\2\2\u0453\u0450\3\2\2\2\u0453")
        buf.write("\u0451\3\2\2\2\u0453\u0452\3\2\2\2\u0454\u0087\3\2\2\2")
        buf.write("\u0455\u0457\7V\2\2\u0456\u0458\7G\2\2\u0457\u0456\3\2")
        buf.write("\2\2\u0457\u0458\3\2\2\2\u0458\u045c\3\2\2\2\u0459\u045a")
        buf.write("\7V\2\2\u045a\u045c\5\u0086D\2\u045b\u0455\3\2\2\2\u045b")
        buf.write("\u0459\3\2\2\2\u045c\u0089\3\2\2\2\u045d\u045e\t\16\2")
        buf.write("\2\u045e\u008b\3\2\2\2\u045f\u0460\t\17\2\2\u0460\u008d")
        buf.write("\3\2\2\2\u0461\u0462\t\20\2\2\u0462\u008f\3\2\2\2\u0463")
        buf.write("\u0464\t\21\2\2\u0464\u0091\3\2\2\2\u0465\u0466\t\22\2")
        buf.write("\2\u0466\u0093\3\2\2\2\u0467\u046b\t\23\2\2\u0468\u046b")
        buf.write("\t\24\2\2\u0469\u046b\t\25\2\2\u046a\u0467\3\2\2\2\u046a")
        buf.write("\u0468\3\2\2\2\u046a\u0469\3\2\2\2\u046b\u0095\3\2\2\2")
        buf.write("\u046c\u046d\t\26\2\2\u046d\u0097\3\2\2\2\u046e\u046f")
        buf.write("\t\27\2\2\u046f\u0099\3\2\2\2\u0470\u0471\t\30\2\2\u0471")
        buf.write("\u009b\3\2\2\2\u008f\u009f\u00a7\u00ab\u00af\u00b4\u00b7")
        buf.write("\u00bb\u00bf\u00c3\u00c7\u00cb\u00cf\u00d3\u00d5\u00d9")
        buf.write("\u00e7\u00ee\u00f4\u00fe\u0101\u0103\u0111\u011a\u0124")
        buf.write("\u0128\u012e\u0133\u0138\u013b\u0142\u0154\u0181\u0183")
        buf.write("\u0189\u0193\u0197\u01a0\u01a3\u01aa\u01b3\u01ba\u01bc")
        buf.write("\u01c6\u01c9\u01d4\u01d7\u01dd\u01e0\u01e8\u01ea\u0210")
        buf.write("\u0214\u021b\u0222\u022b\u0233\u0237\u023a\u023e\u0244")
        buf.write("\u024a\u0250\u0259\u025d\u0261\u0265\u0268\u026e\u0273")
        buf.write("\u0278\u027f\u0283\u0288\u0290\u0296\u029d\u02a3\u02a9")
        buf.write("\u02af\u02b5\u02d0\u02d6\u02de\u02e2\u02ea\u02f1\u02f8")
        buf.write("\u030a\u0316\u032d\u0333\u033b\u033f\u0345\u034d\u0353")
        buf.write("\u0359\u035e\u0363\u0368\u036f\u0377\u037c\u0380\u0385")
        buf.write("\u038d\u0392\u0396\u039b\u039e\u03a5\u03a8\u03b0\u03b8")
        buf.write("\u03bd\u03c3\u03ce\u03d3\u03d9\u03e4\u03ec\u03f1\u03f6")
        buf.write("\u03fe\u0403\u0408\u040c\u0412\u0416\u0421\u0425\u042b")
        buf.write("\u042f\u0436\u043a\u043d\u044a\u0453\u0457\u045b\u046a")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'with'", 
                     "'using'", "'instance'", "'*'", "'^'", "'end'", "<INVALID>", 
                     "'pass'", "'return'", "'yield'", "'await'", "'break'", 
                     "'throw'", "<INVALID>", "'type'", "'|'", "'&'", "'?'", 
                     "'**'", "'^^'", "'val'", "'var'", "'def'", "'='", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'if'", "'else'", "'then'", 
                     "'switch'", "'case'", "'default'", "'match'", "<INVALID>", 
                     "'try'", "'catch'", "'final'", "'in'", "'for'", "'while'", 
                     "'do'", "'macro'", "'let'", "'trait'", "'class'", "'extend'", 
                     "'act'", "'~'", "'$'", "'@'", "'+'", "'-'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*^'", "'/^'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'true'", "'false'", "'null'", "'nothing'", 
                     "'#'", "'.'", "'_'", "'#!'", "'%%%'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<='", "'<'", "<INVALID>", "<INVALID>", 
                     "'>='", "'>'", "'++'", "'+='", "'\u2295'", "'--'", 
                     "'-='", "'\u00D7'", "'\u2297'", "'\u2299'", "'//@'", 
                     "'//'", "'/@'", "'/'", "'\u00F7'", "'%%'", "'%'", "'==='", 
                     "'=!='", "'=='", "'~~'", "'~='", "<INVALID>", "<INVALID>", 
                     "'!!'", "<INVALID>", "<INVALID>", "<INVALID>", "':?'", 
                     "'@@@'", "'@@'", "'@='", "'`'", "'\u00B4'", "'''", 
                     "'...'", "'\u22C5'", "'\u221A'", "'\u215F'", "'\u00B0'", 
                     "'\u1D40'", "'\u1D34'", "'\u00A7'", "'\u00B6'", "'\u00A4'", 
                     "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "With", "Using", "Instance", 
                      "Times", "Power", "End", "Colon", "Pass", "Return", 
                      "Yield", "Await", "Break", "Throw", "Comma", "Type", 
                      "BitOr", "BitAnd", "Nullable", "Keyword", "BaseInput", 
                      "Val", "Var", "Def", "Set", "Flexible", "Name", "Delay", 
                      "If", "Else", "Then", "Switch", "Case", "Default", 
                      "Match", "Rule", "Try", "Catch", "Final", "In", "For", 
                      "While", "Do", "Macro", "Let", "Trait", "Class", "Extend", 
                      "Act", "Tilde", "Suffix", "Prefix", "Plus", "Minus", 
                      "Decimal", "DecimalBad", "Binary", "Octal", "Hexadecimal", 
                      "Integer", "Exponent", "Base", "StringEscapeBlock", 
                      "StringEscapeSingle", "StringLiteral", "StringEmpty", 
                      "Escape", "Symbols", "TrueName", "Symbol", "True", 
                      "False", "Null", "Nothing", "Sharp", "Dot", "Underline", 
                      "Shebang", "Comment", "LineComment", "PartComment", 
                      "NewLine", "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "PlusTo", "LogicXor", "Decrease", "MinusFrom", 
                      "Multiply", "Kronecker", "TensorProduct", "MapAll", 
                      "Remainder", "Map", "Divide", "Quotient", "Output", 
                      "Mod", "Equivalent", "NotEquivalent", "Equal", "Concat", 
                      "Destruct", "LogicOr", "LogicAnd", "DoubleBang", "NotEqual", 
                      "BitNot", "LogicNot", "Elvis", "Curry", "Apply", "LetAssign", 
                      "Quote", "Acute", "Quotation", "Ellipsis", "DOT", 
                      "Surd", "Reciprocal", "Degree", "Transpose", "Hermitian", 
                      "Section", "Pilcrow", "Currency", "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_idTuples = 8
    RULE_blockStatement = 9
    RULE_blockNonEnd = 10
    RULE_expressionStatement = 11
    RULE_expression = 12
    RULE_controlFlow = 13
    RULE_functionCall = 14
    RULE_arguments = 15
    RULE_flowController = 16
    RULE_typeStatement = 17
    RULE_typeExpression = 18
    RULE_typeSuffix = 19
    RULE_assignStatment = 20
    RULE_assignLHS = 21
    RULE_assignRHS = 22
    RULE_parameter = 23
    RULE_functionPattern = 24
    RULE_maybeSymbol = 25
    RULE_symbols = 26
    RULE_ifStatment = 27
    RULE_ifShort = 28
    RULE_ifSingle = 29
    RULE_ifNested = 30
    RULE_else = 31
    RULE_elseIf = 32
    RULE_switchStatment = 33
    RULE_caseBody = 34
    RULE_switchBody = 35
    RULE_matchStatment = 36
    RULE_matchBody = 37
    RULE_condition = 38
    RULE_tryStatement = 39
    RULE_tryCatch = 40
    RULE_tryFinal = 41
    RULE_loopStatement = 42
    RULE_letStatment = 43
    RULE_classBody = 44
    RULE_classExpression = 45
    RULE_traitStatement = 46
    RULE_classStatement = 47
    RULE_classExtend = 48
    RULE_classTrait = 49
    RULE_classController = 50
    RULE_data = 51
    RULE_number = 52
    RULE_index = 53
    RULE_dict = 54
    RULE_keyValue = 55
    RULE_keyValid = 56
    RULE_list = 57
    RULE_element = 58
    RULE_indexValid = 59
    RULE_complex = 60
    RULE_decimal = 61
    RULE_integer = 62
    RULE_string = 63
    RULE_controller = 64
    RULE_special = 65
    RULE_symbol = 66
    RULE_solt = 67
    RULE_add_ops = 68
    RULE_pre_ops = 69
    RULE_pst_ops = 70
    RULE_bit_ops = 71
    RULE_lgk_ops = 72
    RULE_cpr_ops = 73
    RULE_pow_ops = 74
    RULE_mul_ops = 75
    RULE_list_ops = 76

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "idTuples", 
                   "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "controlFlow", "functionCall", "arguments", 
                   "flowController", "typeStatement", "typeExpression", 
                   "typeSuffix", "assignStatment", "assignLHS", "assignRHS", 
                   "parameter", "functionPattern", "maybeSymbol", "symbols", 
                   "ifStatment", "ifShort", "ifSingle", "ifNested", "else", 
                   "elseIf", "switchStatment", "caseBody", "switchBody", 
                   "matchStatment", "matchBody", "condition", "tryStatement", 
                   "tryCatch", "tryFinal", "loopStatement", "letStatment", 
                   "classBody", "classExpression", "traitStatement", "classStatement", 
                   "classExtend", "classTrait", "classController", "data", 
                   "number", "index", "dict", "keyValue", "keyValid", "list", 
                   "element", "indexValid", "complex", "decimal", "integer", 
                   "string", "controller", "special", "symbol", "solt", 
                   "add_ops", "pre_ops", "pst_ops", "bit_ops", "lgk_ops", 
                   "cpr_ops", "pow_ops", "mul_ops", "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    With=11
    Using=12
    Instance=13
    Times=14
    Power=15
    End=16
    Colon=17
    Pass=18
    Return=19
    Yield=20
    Await=21
    Break=22
    Throw=23
    Comma=24
    Type=25
    BitOr=26
    BitAnd=27
    Nullable=28
    Keyword=29
    BaseInput=30
    Val=31
    Var=32
    Def=33
    Set=34
    Flexible=35
    Name=36
    Delay=37
    If=38
    Else=39
    Then=40
    Switch=41
    Case=42
    Default=43
    Match=44
    Rule=45
    Try=46
    Catch=47
    Final=48
    In=49
    For=50
    While=51
    Do=52
    Macro=53
    Let=54
    Trait=55
    Class=56
    Extend=57
    Act=58
    Tilde=59
    Suffix=60
    Prefix=61
    Plus=62
    Minus=63
    Decimal=64
    DecimalBad=65
    Binary=66
    Octal=67
    Hexadecimal=68
    Integer=69
    Exponent=70
    Base=71
    StringEscapeBlock=72
    StringEscapeSingle=73
    StringLiteral=74
    StringEmpty=75
    Escape=76
    Symbols=77
    TrueName=78
    Symbol=79
    True=80
    False=81
    Null=82
    Nothing=83
    Sharp=84
    Dot=85
    Underline=86
    Shebang=87
    Comment=88
    LineComment=89
    PartComment=90
    NewLine=91
    WhiteSpace=92
    Import=93
    LeftShift=94
    LessEqual=95
    Less=96
    Export=97
    RightShift=98
    GraterEqual=99
    Grater=100
    Increase=101
    PlusTo=102
    LogicXor=103
    Decrease=104
    MinusFrom=105
    Multiply=106
    Kronecker=107
    TensorProduct=108
    MapAll=109
    Remainder=110
    Map=111
    Divide=112
    Quotient=113
    Output=114
    Mod=115
    Equivalent=116
    NotEquivalent=117
    Equal=118
    Concat=119
    Destruct=120
    LogicOr=121
    LogicAnd=122
    DoubleBang=123
    NotEqual=124
    BitNot=125
    LogicNot=126
    Elvis=127
    Curry=128
    Apply=129
    LetAssign=130
    Quote=131
    Acute=132
    Quotation=133
    Ellipsis=134
    DOT=135
    Surd=136
    Reciprocal=137
    Degree=138
    Transpose=139
    Hermitian=140
    Section=141
    Pilcrow=142
    Currency=143
    Element=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 154
                self.statement()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 160
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def switchStatment(self):
            return self.getTypedRuleContext(NyarParser.SwitchStatmentContext,0)


        def ifStatment(self):
            return self.getTypedRuleContext(NyarParser.IfStatmentContext,0)


        def matchStatment(self):
            return self.getTypedRuleContext(NyarParser.MatchStatmentContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(NyarParser.LoopStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def letStatment(self):
            return self.getTypedRuleContext(NyarParser.LetStatmentContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 163
                self.importStatement()
                self.state = 165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 167
                self.typeStatement()
                self.state = 169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 168
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 171
                self.assignStatment()
                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [NyarParser.Switch]:
                    self.state = 175
                    self.switchStatment()
                    pass
                elif token in [NyarParser.If]:
                    self.state = 176
                    self.ifStatment()
                    pass
                elif token in [NyarParser.Match]:
                    self.state = 177
                    self.matchStatment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 183
                self.loopStatement()
                self.state = 185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 184
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 187
                self.tryStatement()
                self.state = 189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 191
                self.traitStatement()
                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 195
                self.classStatement()
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 196
                    self.eos()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 199
                self.expression(0)
                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.eos()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 203
                self.letStatment()
                self.state = 205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 204
                    self.eos()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 207
                self.data()
                self.state = 209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleIncludeContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleInclude" ):
                listener.enterModuleInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleInclude" ):
                listener.exitModuleInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleInclude" ):
                return visitor.visitModuleInclude(self)
            else:
                return visitor.visitChildren(self)


    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.alias = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.name = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 242
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 219
                self.match(NyarParser.Using)
                self.state = 220
                localctx.module = self.moduleName()
                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.match(NyarParser.Using)
                self.state = 222
                localctx.module = self.moduleName()
                self.state = 223
                self.match(NyarParser.As)
                self.state = 224
                localctx.alias = self.symbol()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(NyarParser.Using)
                self.state = 227
                localctx.source = self.moduleName()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 228
                    self.match(NyarParser.With)


                self.state = 231
                localctx.name = self.symbol()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 233
                self.match(NyarParser.Using)
                self.state = 234
                localctx.source = self.moduleName()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With or _la==NyarParser.Dot:
                    self.state = 235
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.With or _la==NyarParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 238
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 240
                self.match(NyarParser.Using)
                self.state = 241
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.symbol()

                self.state = 247
                self.match(NyarParser.Dot)
                self.state = 248
                self.symbol()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 250
                self.moduleLanguage()
                self.state = 252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 251
                    self.moduleScope()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 255
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 254
                    self.moduleScope()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(NyarParser.Suffix)
            self.state = 260
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(NyarParser.Prefix)
            self.state = 263
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolsContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(NyarParser.T__0)
            self.state = 266
            self.symbols()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 267
                self.match(NyarParser.Comma)
                self.state = 268
                self.symbols()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.match(NyarParser.T__0)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 277
                    self.statement()
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 283
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 284
                self.match(NyarParser.Colon)
                self.state = 285
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.match(NyarParser.Colon)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 287
                    self.statement()
                    self.state = 292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 293
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.match(NyarParser.T__0)
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 297
                    self.statement()
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 304
                    self.match(NyarParser.Colon)


                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.statement() 
                    self.state = 312
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.expression(0)
            self.state = 320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 316
                    self.match(NyarParser.Comma)
                    self.state = 317
                    self.expression(0) 
                self.state = 322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # SymbolContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 324
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 325
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 326
                localctx.left = self.symbol()
                self.state = 327
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 329
                localctx.op = self.pre_ops()
                self.state = 330
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 332
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 333
                self.match(NyarParser.T__2)
                self.state = 334
                self.expression(0)
                self.state = 335
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 337
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 383
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 340
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 341
                        localctx.op = self.bit_ops()
                        self.state = 342
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 344
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 345
                        localctx.op = self.lgk_ops()
                        self.state = 346
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 348
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 349
                        localctx.op = self.cpr_ops()
                        self.state = 350
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 352
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 353
                        localctx.op = self.pow_ops()
                        self.state = 354
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 356
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 357
                        localctx.op = self.mul_ops()
                        self.state = 358
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 360
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 361
                        localctx.op = self.add_ops()
                        self.state = 362
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 364
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 365
                        localctx.op = self.list_ops()
                        self.state = 366
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 368
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 369
                        self.match(NyarParser.Dot)
                        self.state = 370
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 371
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 372
                        self.match(NyarParser.Dot)
                        self.state = 373
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 374
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 375
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 376
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 377
                        self.match(NyarParser.As)
                        self.state = 378
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 379
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 380
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 381
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 382
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.match(NyarParser.T__2)
                    self.state = 390
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 394
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 395
                localctx.state = self.match(NyarParser.Return)
                self.state = 396
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 397
                localctx.state = self.match(NyarParser.Return)
                self.state = 398
                self.match(NyarParser.T__2)
                self.state = 399
                self.expressionStatement()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 400
                    self.match(NyarParser.Comma)


                self.state = 403
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.symbols()
            self.state = 408
            self.match(NyarParser.T__2)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 409
                self.arguments()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 410
                    self.match(NyarParser.Comma)
                    self.state = 411
                    self.arguments()
                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 419
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arguments)
        try:
            self.state = 424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 423
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeStatement)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 428
                self.match(NyarParser.Type)
                self.state = 429
                self.symbol()
                self.state = 430
                self.match(NyarParser.Colon)
                self.state = 431
                self.typeExpression(0)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.match(NyarParser.Type)
                self.state = 436
                self.symbol()
                self.state = 437
                self.match(NyarParser.T__0)
                self.state = 438
                self.typeExpression(0)
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 445
                self.symbol()
                self.state = 446
                self.match(NyarParser.T__2)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 447
                    self.typeExpression(0)
                    self.state = 452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 448
                        self.match(NyarParser.Comma)
                        self.state = 449
                        self.typeExpression(0)
                        self.state = 454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 457
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 459
                self.symbol()
                self.state = 460
                self.match(NyarParser.Less)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 461
                    self.typeExpression(0)
                    self.state = 466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 462
                        self.match(NyarParser.Comma)
                        self.state = 463
                        self.typeExpression(0)
                        self.state = 468
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 471
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 473
                self.symbol()
                self.state = 475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 474
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 477
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 488
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 486
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 480
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 481
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 482
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 483
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 484
                        self.match(NyarParser.T__4)
                        self.state = 485
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 490
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            _la = self._input.LA(1)
            if not(_la==NyarParser.Act or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 492
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def functionPattern(self):
            return self.getTypedRuleContext(NyarParser.FunctionPatternContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(NyarParser.Val)
                self.state = 495
                self.assignLHS()
                self.state = 496
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(NyarParser.Var)
                self.state = 499
                self.assignLHS()
                self.state = 500
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 502
                self.match(NyarParser.Def)
                self.state = 503
                self.assignLHS()
                self.state = 504
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 506
                self.match(NyarParser.Def)
                self.state = 507
                self.functionPattern()
                self.state = 508
                self.blockStatement()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 510
                self.functionPattern()
                self.state = 511
                _la = self._input.LA(1)
                if not(_la==NyarParser.Set or _la==NyarParser.Delay):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 512
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 514
                self.assignLHS()
                self.state = 515
                self.match(NyarParser.Set)
                self.state = 516
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 518
                self.assignLHS()
                self.state = 519
                self.match(NyarParser.Flexible)
                self.state = 520
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 522
                self.assignLHS()
                self.state = 523
                self.match(NyarParser.Delay)
                self.state = 524
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.symbol()
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 529
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.maybeSymbol()
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 533
                    self.match(NyarParser.Comma)
                    self.state = 534
                    self.maybeSymbol()
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 540
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 541
                self.symbols()
                self.state = 542
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignRHS" ):
                listener.enterAssignRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignRHS" ):
                listener.exitAssignRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignRHS" ):
                return visitor.visitAssignRHS(self)
            else:
                return visitor.visitChildren(self)




    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.expressionStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                self.match(NyarParser.T__0)
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 550
                    self.statement()
                    self.state = 555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 556
                self.match(NyarParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 557
                self.match(NyarParser.Colon)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 558
                    self.statement()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keyword(self):
            return self.getToken(NyarParser.Keyword, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_parameter)
        try:
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 567
                    self.typeExpression(0)


                self.state = 570
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 571
                    self.typeExpression(0)


                self.state = 574
                self.symbol()
                self.state = 575
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 577
                    self.typeExpression(0)


                self.state = 580
                self.symbol()
                self.state = 581
                self.match(NyarParser.Keyword)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 583
                    self.typeExpression(0)


                self.state = 586
                self.symbol()
                self.state = 587
                self.match(NyarParser.Nullable)
                self.state = 588
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_functionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPattern" ):
                listener.enterFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPattern" ):
                listener.exitFunctionPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionPattern" ):
                return visitor.visitFunctionPattern(self)
            else:
                return visitor.visitChildren(self)




    def functionPattern(self):

        localctx = NyarParser.FunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.symbol()
            self.state = 593
            self.match(NyarParser.T__2)
            self.state = 594
            self.parameter()
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self.match(NyarParser.Comma)
                    self.state = 596
                    self.parameter() 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 602
                self.match(NyarParser.Comma)


            self.state = 605
            self.match(NyarParser.T__3)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 606
                self.typeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_maybeSymbol)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols, NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.symbols()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 610
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Suffix]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(NyarParser.Suffix)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_symbols

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MaybeMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Symbols(self):
            return self.getToken(NyarParser.Symbols, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeMethod" ):
                listener.enterMaybeMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeMethod" ):
                listener.exitMaybeMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeMethod" ):
                return visitor.visitMaybeMethod(self)
            else:
                return visitor.visitChildren(self)


    class MustMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMustMethod" ):
                listener.enterMustMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMustMethod" ):
                listener.exitMustMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMustMethod" ):
                return visitor.visitMustMethod(self)
            else:
                return visitor.visitChildren(self)



    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_symbols)
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols]:
                localctx = NyarParser.MaybeMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 616
                self.match(NyarParser.Symbols)
                pass
            elif token in [NyarParser.TrueName]:
                localctx = NyarParser.MustMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 617
                self.match(NyarParser.TrueName)
                self.state = 618
                self.match(NyarParser.Dot)
                self.state = 619
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def ifSingle(self):
            return self.getTypedRuleContext(NyarParser.IfSingleContext,0)


        def ifNested(self):
            return self.getTypedRuleContext(NyarParser.IfNestedContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatment" ):
                listener.enterIfStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatment" ):
                listener.exitIfStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatment" ):
                return visitor.visitIfStatment(self)
            else:
                return visitor.visitChildren(self)




    def ifStatment(self):

        localctx = NyarParser.IfStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_ifStatment)
        try:
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.ifShort()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.ifSingle()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self.ifNested()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfShortContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifShort

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfShort" ):
                listener.enterIfShort(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfShort" ):
                listener.exitIfShort(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfShort" ):
                return visitor.visitIfShort(self)
            else:
                return visitor.visitChildren(self)




    def ifShort(self):

        localctx = NyarParser.IfShortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ifShort)
        self._la = 0 # Token type
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.match(NyarParser.If)
                self.state = 628
                self.condition()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Colon or _la==NyarParser.Then:
                    self.state = 629
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 632
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(NyarParser.If)
                self.state = 635
                self.condition()
                self.state = 637
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 636
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 639
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfSingleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_ifSingle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)




    def ifSingle(self):

        localctx = NyarParser.IfSingleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ifSingle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(NyarParser.If)
            self.state = 644
            self.condition()
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 645
                _la = self._input.LA(1)
                if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 648
            self.blockNonEnd()
            self.state = 649
            self.else()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNestedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)


        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def ifShort(self):
            return self.getTypedRuleContext(NyarParser.IfShortContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_ifNested

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)




    def ifNested(self):

        localctx = NyarParser.IfNestedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifNested)
        self._la = 0 # Token type
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(NyarParser.If)
                self.state = 652
                self.condition()
                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 653
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 656
                self.blockNonEnd()
                self.state = 658 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 657
                        self.elseIf()

                    else:
                        raise NoViableAltException(self)
                    self.state = 660 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 662
                self.else()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.match(NyarParser.If)
                self.state = 665
                self.condition()
                self.state = 667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 666
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 669
                self.blockNonEnd()
                self.state = 673
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 670
                        self.elseIf() 
                    self.state = 675
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 676
                self.match(NyarParser.Else)
                self.state = 677
                self.ifShort()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse" ):
                listener.enterElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse" ):
                listener.exitElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse" ):
                return visitor.visitElse(self)
            else:
                return visitor.visitChildren(self)




    def else(self):

        localctx = NyarParser.ElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_else)
        try:
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.match(NyarParser.Else)
                self.state = 682
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.match(NyarParser.Else)
                self.state = 684
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elseIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(NyarParser.Else)
            self.state = 688
            self.match(NyarParser.If)
            self.state = 689
            self.condition()
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 690
                _la = self._input.LA(1)
                if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 693
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_switchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatment" ):
                listener.enterSwitchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatment" ):
                listener.exitSwitchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatment" ):
                return visitor.visitSwitchStatment(self)
            else:
                return visitor.visitChildren(self)




    def switchStatment(self):

        localctx = NyarParser.SwitchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_switchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(NyarParser.Switch)
            self.state = 696
            self.condition()
            self.state = 697
            self.switchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_caseBody)
        try:
            self.state = 718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.match(NyarParser.Case)
                self.state = 700
                self.expression(0)
                self.state = 701
                self.match(NyarParser.Colon)
                self.state = 702
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.expression(0)
                self.state = 705
                self.match(NyarParser.Rule)
                self.state = 706
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.match(NyarParser.Default)
                self.state = 709
                self.match(NyarParser.Colon)
                self.state = 710
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 711
                self.match(NyarParser.Case)
                self.state = 712
                self.match(NyarParser.Times)
                self.state = 713
                self.match(NyarParser.Colon)
                self.state = 714
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 715
                self.match(NyarParser.Times)
                self.state = 716
                self.match(NyarParser.Rule)
                self.state = 717
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.match(NyarParser.T__0)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 721
                    self.caseBody()
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 727
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(NyarParser.Colon)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 729
                    self.caseBody()
                    self.state = 734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 735
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match(self):
            return self.getToken(NyarParser.Match, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatment" ):
                listener.enterMatchStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatment" ):
                listener.exitMatchStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatment" ):
                return visitor.visitMatchStatment(self)
            else:
                return visitor.visitChildren(self)




    def matchStatment(self):

        localctx = NyarParser.MatchStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_matchStatment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(NyarParser.Match)
            self.state = 739
            self.condition()
            self.state = 740
            self.matchBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_matchBody)
        try:
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_condition)
        try:
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(NyarParser.T__2)
                self.state = 748
                self.expression(0)
                self.state = 749
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockNonEnd(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.BlockNonEndContext)
            else:
                return self.getTypedRuleContext(NyarParser.BlockNonEndContext,i)


        def tryFinal(self):
            return self.getTypedRuleContext(NyarParser.TryFinalContext,0)


        def tryCatch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TryCatchContext)
            else:
                return self.getTypedRuleContext(NyarParser.TryCatchContext,i)


        def Catch(self):
            return self.getToken(NyarParser.Catch, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.match(NyarParser.Try)
                self.state = 754
                self.blockNonEnd()
                self.state = 756 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 755
                    self.tryCatch()
                    self.state = 758 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Catch):
                        break

                self.state = 760
                self.tryFinal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 762
                self.match(NyarParser.Try)
                self.state = 763
                self.blockNonEnd()
                self.state = 764
                self.match(NyarParser.Catch)
                self.state = 765
                self.symbol()
                self.state = 766
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.match(NyarParser.Try)
                self.state = 769
                self.blockNonEnd()
                self.state = 770
                self.match(NyarParser.Catch)
                self.state = 771
                self.match(NyarParser.T__2)
                self.state = 772
                self.symbol()
                self.state = 773
                self.match(NyarParser.T__3)
                self.state = 774
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(NyarParser.Catch, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatch" ):
                return visitor.visitTryCatch(self)
            else:
                return visitor.visitChildren(self)




    def tryCatch(self):

        localctx = NyarParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryCatch)
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(NyarParser.Catch)
                self.state = 779
                self.symbol()
                self.state = 780
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(NyarParser.Catch)
                self.state = 783
                self.match(NyarParser.T__2)
                self.state = 784
                self.symbol()
                self.state = 785
                self.match(NyarParser.T__3)
                self.state = 786
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryFinalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryFinal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryFinal" ):
                listener.enterTryFinal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryFinal" ):
                listener.exitTryFinal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryFinal" ):
                return visitor.visitTryFinal(self)
            else:
                return visitor.visitChildren(self)




    def tryFinal(self):

        localctx = NyarParser.TryFinalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tryFinal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(NyarParser.Final)
            self.state = 791
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_loopStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)


    class DoLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(NyarParser.Do, 0)
        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoop" ):
                listener.enterDoLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoop" ):
                listener.exitDoLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoLoop" ):
                return visitor.visitDoLoop(self)
            else:
                return visitor.visitChildren(self)


    class WhileLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(NyarParser.While, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileLoop" ):
                return visitor.visitWhileLoop(self)
            else:
                return visitor.visitChildren(self)



    def loopStatement(self):

        localctx = NyarParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_loopStatement)
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(NyarParser.For)
                self.state = 794
                self.match(NyarParser.T__2)
                self.state = 795
                self.expressionStatement()
                self.state = 796
                self.match(NyarParser.T__3)
                self.state = 797
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.match(NyarParser.For)
                self.state = 800
                self.symbol()
                self.state = 801
                self.match(NyarParser.In)
                self.state = 802
                self.expression(0)
                self.state = 803
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.WhileLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.match(NyarParser.While)
                self.state = 806
                self.condition()
                self.state = 807
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.DoLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 809
                self.match(NyarParser.Do)
                self.state = 810
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_letStatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStatment" ):
                listener.enterLetStatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStatment" ):
                listener.exitLetStatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStatment" ):
                return visitor.visitLetStatment(self)
            else:
                return visitor.visitChildren(self)




    def letStatment(self):

        localctx = NyarParser.LetStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_letStatment)
        self._la = 0 # Token type
        try:
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.match(NyarParser.Let)
                self.state = 817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 814
                        self.symbol() 
                    self.state = 819
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 820
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.match(NyarParser.Let)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 822
                    self.symbol()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 828
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = NyarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.match(NyarParser.T__0)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 832
                    self.classExpression()
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 838
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(NyarParser.Colon)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 840
                    self.classExpression()
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 846
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.match(NyarParser.Colon)
                self.state = 848
                self.classExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classController(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassControllerContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassControllerContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 852
                        self.classController() 
                    self.state = 857
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 858
                self.symbol()
                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.typeSuffix()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 865
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 862
                        self.classController() 
                    self.state = 867
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                self.state = 868
                self.symbol()
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 869
                    self.typeSuffix()


                self.state = 872
                self.blockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 874
                        self.classController() 
                    self.state = 879
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 880
                self.symbol()
                self.state = 881
                self.match(NyarParser.T__2)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 882
                    self.parameter()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 888
                self.match(NyarParser.T__3)
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.typeSuffix()


                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 892
                    self.match(NyarParser.Colon)
                    self.state = 893
                    self.match(NyarParser.Pass)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 896
                        self.classController() 
                    self.state = 901
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 902
                self.symbol()
                self.state = 903
                self.match(NyarParser.T__2)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 904
                    self.parameter()
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 910
                self.match(NyarParser.T__3)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 911
                    self.typeSuffix()


                self.state = 914
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(NyarParser.Trait)
            self.state = 919
            self.symbol()
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 920
                self.classExtend()


            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 923
                self.classTrait()


            self.state = 926
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(NyarParser.Class)
            self.state = 929
            self.symbol()
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 930
                self.classExtend()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 933
                self.classTrait()


            self.state = 936
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extend(self):
            return self.getToken(NyarParser.Extend, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtend" ):
                listener.enterClassExtend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtend" ):
                listener.exitClassExtend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtend" ):
                return visitor.visitClassExtend(self)
            else:
                return visitor.visitChildren(self)




    def classExtend(self):

        localctx = NyarParser.ClassExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classExtend)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extend]:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(NyarParser.Extend)
                self.state = 940 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 939
                    self.symbol()
                    self.state = 942 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.match(NyarParser.T__2)
                self.state = 945
                self.symbol()
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 946
                    self.match(NyarParser.Comma)
                    self.state = 947
                    self.symbol()
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 953
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTraitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classTrait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTrait" ):
                listener.enterClassTrait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTrait" ):
                listener.exitClassTrait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTrait" ):
                return visitor.visitClassTrait(self)
            else:
                return visitor.visitChildren(self)




    def classTrait(self):

        localctx = NyarParser.ClassTraitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classTrait)
        self._la = 0 # Token type
        try:
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.match(NyarParser.Act)
                self.state = 959 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 958
                    self.symbol()
                    self.state = 961 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.match(NyarParser.Tilde)
                self.state = 964
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.match(NyarParser.Tilde)
                self.state = 966
                self.match(NyarParser.T__2)
                self.state = 967
                self.symbol()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 968
                    self.match(NyarParser.Comma)
                    self.state = 969
                    self.symbol()
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 975
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassController" ):
                listener.enterClassController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassController" ):
                listener.exitClassController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassController" ):
                return visitor.visitClassController(self)
            else:
                return visitor.visitChildren(self)




    def classController(self):

        localctx = NyarParser.ClassControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classController)
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.symbol()
                pass
            elif token in [NyarParser.Val]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.match(NyarParser.Val)
                pass
            elif token in [NyarParser.Var]:
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.match(NyarParser.Var)
                pass
            elif token in [NyarParser.Def]:
                self.enterOuterAlt(localctx, 4)
                self.state = 982
                self.match(NyarParser.Def)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_data)
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.symbol()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 989
                self.symbols()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 990
                self.list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 991
                self.dict()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 992
                self.index()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 993
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 999
                self.match(NyarParser.Binary)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1000
                self.match(NyarParser.Octal)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1001
                self.match(NyarParser.Hexadecimal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.match(NyarParser.T__4)
                self.state = 1005
                self.indexValid()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 1007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1006
                        self.match(NyarParser.Comma)


                    self.state = 1009
                    self.indexValid()
                    self.state = 1014
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1015
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.match(NyarParser.T__6)
                self.state = 1018
                self.indexValid()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 1019
                        self.match(NyarParser.Comma)


                    self.state = 1022
                    self.indexValid()
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1028
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(NyarParser.T__0)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.StringEscapeBlock - 18)) | (1 << (NyarParser.StringEscapeSingle - 18)) | (1 << (NyarParser.StringLiteral - 18)) | (1 << (NyarParser.StringEmpty - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                self.state = 1033
                self.keyValue()


            self.state = 1040
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1036
                    self.match(NyarParser.Comma)
                    self.state = 1037
                    self.keyValue() 
                self.state = 1042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1043
                self.match(NyarParser.Comma)


            self.state = 1046
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            localctx.key = self.keyValid()
            self.state = 1049
            self.match(NyarParser.Colon)
            self.state = 1050
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_keyValid)
        try:
            self.state = 1055
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteral, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(NyarParser.T__4)
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Let) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Suffix) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 1058
                self.element()


            self.state = 1065
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1061
                    self.match(NyarParser.Comma)
                    self.state = 1062
                    self.element() 
                self.state = 1067
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 1068
                self.match(NyarParser.Comma)


            self.state = 1071
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_element)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1073
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1074
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1075
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexValid" ):
                listener.enterIndexValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexValid" ):
                listener.exitIndexValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexValid" ):
                return visitor.visitIndexValid(self)
            else:
                return visitor.visitChildren(self)




    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_indexValid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.TrueName, NyarParser.Symbol]:
                self.state = 1078
                self.symbol()
                pass
            elif token in [NyarParser.Integer]:
                self.state = 1079
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Colon:
                self.state = 1082
                self.match(NyarParser.Colon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1086
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteral(self):
            return self.getToken(NyarParser.StringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_string)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteral]:
                localctx = NyarParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.match(NyarParser.StringLiteral)
                pass
            elif token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1095
                self.match(NyarParser.StringEmpty)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_controller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterController" ):
                listener.enterController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitController" ):
                listener.exitController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitController" ):
                return visitor.visitController(self)
            else:
                return visitor.visitChildren(self)




    def controller(self):

        localctx = NyarParser.ControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_controller)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.flowController()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & ((1 << (NyarParser.True - 80)) | (1 << (NyarParser.False - 80)) | (1 << (NyarParser.Null - 80)) | (1 << (NyarParser.Nothing - 80)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controller(self):
            return self.getTypedRuleContext(NyarParser.ControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_symbol)
        try:
            self.state = 1105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.controller()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1104
                self.match(NyarParser.TrueName)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # SymbolContext

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_solt)
        try:
            self.state = 1113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1107
                self.match(NyarParser.Sharp)
                self.state = 1109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1108
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(NyarParser.Sharp)
                self.state = 1112
                localctx.id = self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (NyarParser.Increase - 101)) | (1 << (NyarParser.BitNot - 101)) | (1 << (NyarParser.LogicNot - 101)) | (1 << (NyarParser.Reciprocal - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (NyarParser.Increase - 101)) | (1 << (NyarParser.Decrease - 101)) | (1 << (NyarParser.DoubleBang - 101)) | (1 << (NyarParser.BitNot - 101)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (NyarParser.Exponent - 70)) | (1 << (NyarParser.Base - 70)) | (1 << (NyarParser.LeftShift - 70)) | (1 << (NyarParser.RightShift - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (NyarParser.LogicXor - 103)) | (1 << (NyarParser.LogicOr - 103)) | (1 << (NyarParser.LogicAnd - 103)) | (1 << (NyarParser.LogicNot - 103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                _la = self._input.LA(1)
                if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (NyarParser.Equivalent - 116)) | (1 << (NyarParser.NotEquivalent - 116)) | (1 << (NyarParser.Equal - 116)) | (1 << (NyarParser.NotEqual - 116)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                _la = self._input.LA(1)
                if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (NyarParser.LessEqual - 95)) | (1 << (NyarParser.Less - 95)) | (1 << (NyarParser.GraterEqual - 95)) | (1 << (NyarParser.Grater - 95)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (NyarParser.Multiply - 106)) | (1 << (NyarParser.Kronecker - 106)) | (1 << (NyarParser.TensorProduct - 106)) | (1 << (NyarParser.Remainder - 106)) | (1 << (NyarParser.Divide - 106)) | (1 << (NyarParser.Mod - 106)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            _la = self._input.LA(1)
            if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (NyarParser.LeftShift - 94)) | (1 << (NyarParser.RightShift - 94)) | (1 << (NyarParser.Increase - 94)) | (1 << (NyarParser.Map - 94)) | (1 << (NyarParser.Concat - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.expression_sempred
        self._predicates[18] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




