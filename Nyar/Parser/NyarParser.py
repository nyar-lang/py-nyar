# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0093")
        buf.write("\u0471\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\3\2")
        buf.write("\7\2\u009a\n\2\f\2\16\2\u009d\13\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\5\3\u00a4\n\3\3\3\3\3\5\3\u00a8\n\3\3\3\3\3\5\3\u00ac")
        buf.write("\n\3\3\3\3\3\5\3\u00b0\n\3\3\3\3\3\5\3\u00b4\n\3\3\3\3")
        buf.write("\3\5\3\u00b8\n\3\3\3\3\3\5\3\u00bc\n\3\3\3\3\3\5\3\u00c0")
        buf.write("\n\3\3\3\3\3\5\3\u00c4\n\3\3\3\3\3\5\3\u00c8\n\3\3\3\3")
        buf.write("\3\5\3\u00cc\n\3\5\3\u00ce\n\3\3\4\3\4\5\4\u00d2\n\4\3")
        buf.write("\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e0")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e7\n\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\5\6\u00f2\n\6\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u00fc\n\7\3\7\5\7\u00ff\n\7\5\7\u0101")
        buf.write("\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\n\7\n\u010d")
        buf.write("\n\n\f\n\16\n\u0110\13\n\3\n\3\n\3\13\3\13\7\13\u0116")
        buf.write("\n\13\f\13\16\13\u0119\13\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\7\13\u0120\n\13\f\13\16\13\u0123\13\13\3\13\5\13\u0126")
        buf.write("\n\13\3\f\3\f\7\f\u012a\n\f\f\f\16\f\u012d\13\f\3\f\3")
        buf.write("\f\7\f\u0131\n\f\f\f\16\f\u0134\13\f\5\f\u0136\n\f\3\r")
        buf.write("\3\r\3\r\7\r\u013b\n\r\f\r\16\r\u013e\13\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\5\16\u014f\n\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\7\16\u017c\n\16\f\16\16\16\u017f")
        buf.write("\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\5\17\u018d\n\17\3\20\3\20\3\20\5\20\u0192")
        buf.write("\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u019c")
        buf.write("\n\20\3\20\3\20\5\20\u01a0\n\20\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u01a7\n\21\3\22\3\22\3\22\3\22\3\22\7\22\u01ae")
        buf.write("\n\22\f\22\16\22\u01b1\13\22\5\22\u01b3\n\22\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\24\5\24\u01bc\n\24\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u01c3\n\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u01ca\n\25\5\25\u01cc\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\7\26\u01d4\n\26\f\26\16\26\u01d7\13\26\5\26\u01d9")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u01e2\n")
        buf.write("\26\f\26\16\26\u01e5\13\26\5\26\u01e7\n\26\3\26\3\26\3")
        buf.write("\26\3\26\5\26\u01ed\n\26\3\26\5\26\u01f0\n\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\7\26\u01f8\n\26\f\26\16\26\u01fb")
        buf.write("\13\26\3\27\3\27\3\27\3\30\5\30\u0201\n\30\3\30\3\30\5")
        buf.write("\30\u0205\n\30\3\30\3\30\3\30\3\30\5\30\u020b\n\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u0211\n\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u0217\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u022b\n\31\f\31\16\31\u022e\13\31\3\31\3\31\5\31\u0232")
        buf.write("\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u023b\n")
        buf.write("\31\f\31\16\31\u023e\13\31\3\31\3\31\5\31\u0242\n\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0253\n\31\3\32\3\32\5\32\u0257")
        buf.write("\n\32\3\32\3\32\3\32\7\32\u025c\n\32\f\32\16\32\u025f")
        buf.write("\13\32\3\32\3\32\3\32\3\32\5\32\u0265\n\32\3\33\3\33\3")
        buf.write("\33\3\33\3\33\7\33\u026c\n\33\f\33\16\33\u026f\13\33\3")
        buf.write("\33\3\33\3\33\7\33\u0274\n\33\f\33\16\33\u0277\13\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0280\n\33\3\34")
        buf.write("\3\34\5\34\u0284\n\34\3\34\5\34\u0287\n\34\3\35\3\35\5")
        buf.write("\35\u028b\n\35\3\35\3\35\7\35\u028f\n\35\f\35\16\35\u0292")
        buf.write("\13\35\3\36\3\36\3\36\7\36\u0297\n\36\f\36\16\36\u029a")
        buf.write("\13\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u02a4")
        buf.write("\n\37\3 \3 \3 \3 \3 \3 \5 \u02ac\n \3!\3!\3!\5!\u02b1")
        buf.write("\n!\3!\7!\u02b4\n!\f!\16!\u02b7\13!\3!\3!\3!\3!\3!\5!")
        buf.write("\u02be\n!\3!\7!\u02c1\n!\f!\16!\u02c4\13!\3!\3!\5!\u02c8")
        buf.write("\n!\3\"\3\"\5\"\u02cc\n\"\3\"\3\"\7\"\u02d0\n\"\f\"\16")
        buf.write("\"\u02d3\13\"\3\"\5\"\u02d6\n\"\3\"\3\"\3#\3#\3#\3#\3")
        buf.write("$\3$\3$\5$\u02e1\n$\3%\3%\5%\u02e5\n%\3%\3%\7%\u02e9\n")
        buf.write("%\f%\16%\u02ec\13%\3%\5%\u02ef\n%\3%\3%\3&\3&\3&\5&\u02f6")
        buf.write("\n&\3\'\3\'\5\'\u02fa\n\'\3\'\5\'\u02fd\n\'\3(\3(\3(\5")
        buf.write("(\u0302\n(\3(\3(\5(\u0306\n(\3(\3(\3(\5(\u030b\n(\3(\3")
        buf.write("(\7(\u030f\n(\f(\16(\u0312\13(\3(\5(\u0315\n(\3(\3(\3")
        buf.write("(\5(\u031a\n(\3(\3(\3(\3(\3(\3(\5(\u0322\n(\3)\3)\3)\3")
        buf.write(")\5)\u0328\n)\3*\3*\3*\3*\5*\u032e\n*\3*\3*\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0345")
        buf.write("\n+\3,\3,\7,\u0349\n,\f,\16,\u034c\13,\3,\3,\3,\7,\u0351")
        buf.write("\n,\f,\16,\u0354\13,\3,\5,\u0357\n,\3-\3-\3.\3.\5.\u035d")
        buf.write("\n.\3/\3/\3/\3/\3/\5/\u0364\n/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\5\60\u036e\n\60\5\60\u0370\n\60\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u037c")
        buf.write("\n\61\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\5\63\u0386")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u038f\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\5\63\u0396\n\63\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u039c\n\63\3\63\5\63\u039f\n\63\3\64\3")
        buf.write("\64\3\65\3\65\3\65\5\65\u03a6\n\65\3\65\5\65\u03a9\n\65")
        buf.write("\3\65\3\65\3\66\3\66\3\66\5\66\u03b0\n\66\3\66\5\66\u03b3")
        buf.write("\n\66\3\66\3\66\3\67\3\67\6\67\u03b9\n\67\r\67\16\67\u03ba")
        buf.write("\3\67\3\67\3\67\3\67\7\67\u03c1\n\67\f\67\16\67\u03c4")
        buf.write("\13\67\3\67\3\67\5\67\u03c8\n\67\38\38\68\u03cc\n8\r8")
        buf.write("\168\u03cd\38\38\38\38\38\38\38\78\u03d7\n8\f8\168\u03da")
        buf.write("\138\38\38\58\u03de\n8\39\39\79\u03e2\n9\f9\169\u03e5")
        buf.write("\139\39\39\39\79\u03ea\n9\f9\169\u03ed\139\39\39\39\5")
        buf.write("9\u03f2\n9\3:\3:\7:\u03f6\n:\f:\16:\u03f9\13:\3:\3:\5")
        buf.write(":\u03fd\n:\3:\7:\u0400\n:\f:\16:\u0403\13:\3:\3:\5:\u0407")
        buf.write("\n:\3:\3:\3:\7:\u040c\n:\f:\16:\u040f\13:\3:\3:\3:\7:")
        buf.write("\u0414\n:\f:\16:\u0417\13:\3:\3:\5:\u041b\n:\3:\3:\5:")
        buf.write("\u041f\n:\3:\7:\u0422\n:\f:\16:\u0425\13:\3:\3:\3:\7:")
        buf.write("\u042a\n:\f:\16:\u042d\13:\3:\3:\5:\u0431\n:\3:\3:\5:")
        buf.write("\u0435\n:\3;\3;\3;\3<\3<\3=\3=\3>\3>\3>\3>\5>\u0442\n")
        buf.write(">\3?\3?\3?\5?\u0447\n?\3@\3@\3A\3A\5A\u044d\nA\3B\3B\3")
        buf.write("B\5B\u0452\nB\3C\3C\5C\u0456\nC\3C\3C\5C\u045a\nC\3D\3")
        buf.write("D\3E\3E\3F\3F\3G\3G\3H\3H\3I\3I\3I\5I\u0469\nI\3J\3J\3")
        buf.write("K\3K\3L\3L\3L\2\4\32*M\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\2\31\4\2\24\24\30\30\4")
        buf.write("\2\26\27\31\31\4\2\24\24\26\31\4\2\20\20\36\36\3\2\34")
        buf.write("\35\3\2@A\4\2\23\23--\4\2\24\25\30\30\3\2\66\67\4\2DD")
        buf.write("II\3\2DE\3\2SV\3\2)*\6\2)*hh\u0080\u0081\u008c\u008c\6")
        buf.write("\2hhkk~~\u0080\u0080\5\2JKaaee\5\2jj|}\u0081\u0081\4\2")
        buf.write("wy\177\177\4\2bcfg\3\2|}\4\2\21\21\u008b\u008b\7\2\20")
        buf.write("\20moqqssvv\7\2aaeehhrrzz\2\u0507\2\u009b\3\2\2\2\4\u00cd")
        buf.write("\3\2\2\2\6\u00d1\3\2\2\2\b\u00d3\3\2\2\2\n\u00f1\3\2\2")
        buf.write("\2\f\u0100\3\2\2\2\16\u0102\3\2\2\2\20\u0105\3\2\2\2\22")
        buf.write("\u0108\3\2\2\2\24\u0125\3\2\2\2\26\u0135\3\2\2\2\30\u0137")
        buf.write("\3\2\2\2\32\u014e\3\2\2\2\34\u018c\3\2\2\2\36\u019f\3")
        buf.write("\2\2\2 \u01a6\3\2\2\2\"\u01a8\3\2\2\2$\u01b6\3\2\2\2&")
        buf.write("\u01bb\3\2\2\2(\u01cb\3\2\2\2*\u01ef\3\2\2\2,\u01fc\3")
        buf.write("\2\2\2.\u0216\3\2\2\2\60\u0252\3\2\2\2\62\u0264\3\2\2")
        buf.write("\2\64\u027f\3\2\2\2\66\u0286\3\2\2\28\u028a\3\2\2\2:\u0293")
        buf.write("\3\2\2\2<\u02a3\3\2\2\2>\u02ab\3\2\2\2@\u02c7\3\2\2\2")
        buf.write("B\u02c9\3\2\2\2D\u02d9\3\2\2\2F\u02e0\3\2\2\2H\u02e2\3")
        buf.write("\2\2\2J\u02f5\3\2\2\2L\u02f9\3\2\2\2N\u0321\3\2\2\2P\u0327")
        buf.write("\3\2\2\2R\u0329\3\2\2\2T\u0344\3\2\2\2V\u0356\3\2\2\2")
        buf.write("X\u0358\3\2\2\2Z\u035c\3\2\2\2\\\u0363\3\2\2\2^\u036f")
        buf.write("\3\2\2\2`\u037b\3\2\2\2b\u037d\3\2\2\2d\u039e\3\2\2\2")
        buf.write("f\u03a0\3\2\2\2h\u03a2\3\2\2\2j\u03ac\3\2\2\2l\u03c7\3")
        buf.write("\2\2\2n\u03dd\3\2\2\2p\u03f1\3\2\2\2r\u0434\3\2\2\2t\u0436")
        buf.write("\3\2\2\2v\u0439\3\2\2\2x\u043b\3\2\2\2z\u0441\3\2\2\2")
        buf.write("|\u0446\3\2\2\2~\u0448\3\2\2\2\u0080\u044c\3\2\2\2\u0082")
        buf.write("\u0451\3\2\2\2\u0084\u0459\3\2\2\2\u0086\u045b\3\2\2\2")
        buf.write("\u0088\u045d\3\2\2\2\u008a\u045f\3\2\2\2\u008c\u0461\3")
        buf.write("\2\2\2\u008e\u0463\3\2\2\2\u0090\u0468\3\2\2\2\u0092\u046a")
        buf.write("\3\2\2\2\u0094\u046c\3\2\2\2\u0096\u046e\3\2\2\2\u0098")
        buf.write("\u009a\5\4\3\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2")
        buf.write("\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u009e\3")
        buf.write("\2\2\2\u009d\u009b\3\2\2\2\u009e\u009f\7\2\2\3\u009f\3")
        buf.write("\3\2\2\2\u00a0\u00ce\5\6\4\2\u00a1\u00a3\5\n\6\2\u00a2")
        buf.write("\u00a4\5\b\5\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4\3\2\2\2")
        buf.write("\u00a4\u00ce\3\2\2\2\u00a5\u00a7\5(\25\2\u00a6\u00a8\5")
        buf.write("\b\5\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00ce")
        buf.write("\3\2\2\2\u00a9\u00ab\5\60\31\2\u00aa\u00ac\5\b\5\2\u00ab")
        buf.write("\u00aa\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ce\3\2\2\2")
        buf.write("\u00ad\u00af\5N(\2\u00ae\u00b0\5\b\5\2\u00af\u00ae\3\2")
        buf.write("\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ce\3\2\2\2\u00b1\u00b3")
        buf.write("\5d\63\2\u00b2\u00b4\5\b\5\2\u00b3\u00b2\3\2\2\2\u00b3")
        buf.write("\u00b4\3\2\2\2\u00b4\u00ce\3\2\2\2\u00b5\u00b7\5^\60\2")
        buf.write("\u00b6\u00b8\5\b\5\2\u00b7\u00b6\3\2\2\2\u00b7\u00b8\3")
        buf.write("\2\2\2\u00b8\u00ce\3\2\2\2\u00b9\u00bb\5h\65\2\u00ba\u00bc")
        buf.write("\5\b\5\2\u00bb\u00ba\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc")
        buf.write("\u00ce\3\2\2\2\u00bd\u00bf\5j\66\2\u00be\u00c0\5\b\5\2")
        buf.write("\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00ce\3")
        buf.write("\2\2\2\u00c1\u00c3\5\32\16\2\u00c2\u00c4\5\b\5\2\u00c3")
        buf.write("\u00c2\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00ce\3\2\2\2")
        buf.write("\u00c5\u00c7\5\34\17\2\u00c6\u00c8\5\b\5\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ce\3\2\2\2\u00c9")
        buf.write("\u00cb\5<\37\2\u00ca\u00cc\5\b\5\2\u00cb\u00ca\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00a0\3")
        buf.write("\2\2\2\u00cd\u00a1\3\2\2\2\u00cd\u00a5\3\2\2\2\u00cd\u00a9")
        buf.write("\3\2\2\2\u00cd\u00ad\3\2\2\2\u00cd\u00b1\3\2\2\2\u00cd")
        buf.write("\u00b5\3\2\2\2\u00cd\u00b9\3\2\2\2\u00cd\u00bd\3\2\2\2")
        buf.write("\u00cd\u00c1\3\2\2\2\u00cd\u00c5\3\2\2\2\u00cd\u00c9\3")
        buf.write("\2\2\2\u00ce\5\3\2\2\2\u00cf\u00d2\5\b\5\2\u00d0\u00d2")
        buf.write("\7\n\2\2\u00d1\u00cf\3\2\2\2\u00d1\u00d0\3\2\2\2\u00d2")
        buf.write("\7\3\2\2\2\u00d3\u00d4\7\13\2\2\u00d4\t\3\2\2\2\u00d5")
        buf.write("\u00d6\7\16\2\2\u00d6\u00f2\5\f\7\2\u00d7\u00d8\7\16\2")
        buf.write("\2\u00d8\u00d9\5\f\7\2\u00d9\u00da\7\f\2\2\u00da\u00db")
        buf.write("\5\u0080A\2\u00db\u00f2\3\2\2\2\u00dc\u00dd\7\16\2\2\u00dd")
        buf.write("\u00df\5\f\7\2\u00de\u00e0\7\r\2\2\u00df\u00de\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\5")
        buf.write("\u0080A\2\u00e2\u00f2\3\2\2\2\u00e3\u00e4\7\16\2\2\u00e4")
        buf.write("\u00e6\5\f\7\2\u00e5\u00e7\7\r\2\2\u00e6\u00e5\3\2\2\2")
        buf.write("\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\5")
        buf.write("\22\n\2\u00e9\u00f2\3\2\2\2\u00ea\u00eb\7\16\2\2\u00eb")
        buf.write("\u00ec\5\f\7\2\u00ec\u00ed\7X\2\2\u00ed\u00ee\5\22\n\2")
        buf.write("\u00ee\u00f2\3\2\2\2\u00ef\u00f0\7\16\2\2\u00f0\u00f2")
        buf.write("\5B\"\2\u00f1\u00d5\3\2\2\2\u00f1\u00d7\3\2\2\2\u00f1")
        buf.write("\u00dc\3\2\2\2\u00f1\u00e3\3\2\2\2\u00f1\u00ea\3\2\2\2")
        buf.write("\u00f1\u00ef\3\2\2\2\u00f2\13\3\2\2\2\u00f3\u0101\5z>")
        buf.write("\2\u00f4\u0101\5\u0082B\2\u00f5\u00f6\5\u0082B\2\u00f6")
        buf.write("\u00f7\7X\2\2\u00f7\u00f8\5\u0082B\2\u00f8\u0101\3\2\2")
        buf.write("\2\u00f9\u00fb\5\16\b\2\u00fa\u00fc\5\20\t\2\u00fb\u00fa")
        buf.write("\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u0101\3\2\2\2\u00fd")
        buf.write("\u00ff\5\20\t\2\u00fe\u00fd\3\2\2\2\u00fe\u00ff\3\2\2")
        buf.write("\2\u00ff\u0101\3\2\2\2\u0100\u00f3\3\2\2\2\u0100\u00f4")
        buf.write("\3\2\2\2\u0100\u00f5\3\2\2\2\u0100\u00f9\3\2\2\2\u0100")
        buf.write("\u00fe\3\2\2\2\u0101\r\3\2\2\2\u0102\u0103\7B\2\2\u0103")
        buf.write("\u0104\5\u0082B\2\u0104\17\3\2\2\2\u0105\u0106\7C\2\2")
        buf.write("\u0106\u0107\5\u0082B\2\u0107\21\3\2\2\2\u0108\u0109\7")
        buf.write("\3\2\2\u0109\u010e\5\u0080A\2\u010a\u010b\7\32\2\2\u010b")
        buf.write("\u010d\5\u0080A\2\u010c\u010a\3\2\2\2\u010d\u0110\3\2")
        buf.write("\2\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0111")
        buf.write("\3\2\2\2\u0110\u010e\3\2\2\2\u0111\u0112\7\4\2\2\u0112")
        buf.write("\23\3\2\2\2\u0113\u0117\7\3\2\2\u0114\u0116\5\4\3\2\u0115")
        buf.write("\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0117\3")
        buf.write("\2\2\2\u011a\u0126\7\4\2\2\u011b\u011c\7\23\2\2\u011c")
        buf.write("\u0126\5\32\16\2\u011d\u0121\7\23\2\2\u011e\u0120\5\4")
        buf.write("\3\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\3\2\2\2\u0123")
        buf.write("\u0121\3\2\2\2\u0124\u0126\7\22\2\2\u0125\u0113\3\2\2")
        buf.write("\2\u0125\u011b\3\2\2\2\u0125\u011d\3\2\2\2\u0126\25\3")
        buf.write("\2\2\2\u0127\u012b\7\3\2\2\u0128\u012a\5\4\3\2\u0129\u0128")
        buf.write("\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2\2\u012b")
        buf.write("\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012b\3\2\2\2")
        buf.write("\u012e\u0136\7\4\2\2\u012f\u0131\5\4\3\2\u0130\u012f\3")
        buf.write("\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133")
        buf.write("\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132\3\2\2\2\u0135")
        buf.write("\u0127\3\2\2\2\u0135\u0132\3\2\2\2\u0136\27\3\2\2\2\u0137")
        buf.write("\u013c\5\32\16\2\u0138\u0139\7\32\2\2\u0139\u013b\5\32")
        buf.write("\16\2\u013a\u0138\3\2\2\2\u013b\u013e\3\2\2\2\u013c\u013a")
        buf.write("\3\2\2\2\u013c\u013d\3\2\2\2\u013d\31\3\2\2\2\u013e\u013c")
        buf.write("\3\2\2\2\u013f\u0140\b\16\1\2\u0140\u014f\5\"\22\2\u0141")
        buf.write("\u014f\5\60\31\2\u0142\u0143\5\u0080A\2\u0143\u0144\5")
        buf.write("z>\2\u0144\u014f\3\2\2\2\u0145\u0146\5\u0088E\2\u0146")
        buf.write("\u0147\5\32\16\17\u0147\u014f\3\2\2\2\u0148\u014f\5<\37")
        buf.write("\2\u0149\u014a\7\5\2\2\u014a\u014b\5\32\16\2\u014b\u014c")
        buf.write("\7\6\2\2\u014c\u014f\3\2\2\2\u014d\u014f\5\36\20\2\u014e")
        buf.write("\u013f\3\2\2\2\u014e\u0141\3\2\2\2\u014e\u0142\3\2\2\2")
        buf.write("\u014e\u0145\3\2\2\2\u014e\u0148\3\2\2\2\u014e\u0149\3")
        buf.write("\2\2\2\u014e\u014d\3\2\2\2\u014f\u017d\3\2\2\2\u0150\u0151")
        buf.write("\f\r\2\2\u0151\u0152\5\u008cG\2\u0152\u0153\5\32\16\16")
        buf.write("\u0153\u017c\3\2\2\2\u0154\u0155\f\f\2\2\u0155\u0156\5")
        buf.write("\u008eH\2\u0156\u0157\5\32\16\r\u0157\u017c\3\2\2\2\u0158")
        buf.write("\u0159\f\13\2\2\u0159\u015a\5\u0090I\2\u015a\u015b\5\32")
        buf.write("\16\f\u015b\u017c\3\2\2\2\u015c\u015d\f\n\2\2\u015d\u015e")
        buf.write("\5\u0092J\2\u015e\u015f\5\32\16\n\u015f\u017c\3\2\2\2")
        buf.write("\u0160\u0161\f\t\2\2\u0161\u0162\5\u0094K\2\u0162\u0163")
        buf.write("\5\32\16\n\u0163\u017c\3\2\2\2\u0164\u0165\f\b\2\2\u0165")
        buf.write("\u0166\5\u0086D\2\u0166\u0167\5\32\16\t\u0167\u017c\3")
        buf.write("\2\2\2\u0168\u0169\f\7\2\2\u0169\u016a\5\u0096L\2\u016a")
        buf.write("\u016b\5\32\16\b\u016b\u017c\3\2\2\2\u016c\u016d\f\25")
        buf.write("\2\2\u016d\u016e\7X\2\2\u016e\u017c\5\u0082B\2\u016f\u0170")
        buf.write("\f\24\2\2\u0170\u0171\7X\2\2\u0171\u017c\5\"\22\2\u0172")
        buf.write("\u0173\f\23\2\2\u0173\u017c\5@!\2\u0174\u0175\f\20\2\2")
        buf.write("\u0175\u0176\7\f\2\2\u0176\u017c\5*\26\2\u0177\u0178\f")
        buf.write("\16\2\2\u0178\u017c\5\u008aF\2\u0179\u017a\f\3\2\2\u017a")
        buf.write("\u017c\7\35\2\2\u017b\u0150\3\2\2\2\u017b\u0154\3\2\2")
        buf.write("\2\u017b\u0158\3\2\2\2\u017b\u015c\3\2\2\2\u017b\u0160")
        buf.write("\3\2\2\2\u017b\u0164\3\2\2\2\u017b\u0168\3\2\2\2\u017b")
        buf.write("\u016c\3\2\2\2\u017b\u016f\3\2\2\2\u017b\u0172\3\2\2\2")
        buf.write("\u017b\u0174\3\2\2\2\u017b\u0177\3\2\2\2\u017b\u0179\3")
        buf.write("\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e")
        buf.write("\3\2\2\2\u017e\33\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0181")
        buf.write("\5 \21\2\u0181\u0182\7\36\2\2\u0182\u0183\5 \21\2\u0183")
        buf.write("\u0184\7\23\2\2\u0184\u0185\5 \21\2\u0185\u018d\3\2\2")
        buf.write("\2\u0186\u0187\5 \21\2\u0187\u0188\7+\2\2\u0188\u0189")
        buf.write("\5 \21\2\u0189\u018a\7,\2\2\u018a\u018b\5 \21\2\u018b")
        buf.write("\u018d\3\2\2\2\u018c\u0180\3\2\2\2\u018c\u0186\3\2\2\2")
        buf.write("\u018d\35\3\2\2\2\u018e\u0191\t\2\2\2\u018f\u0190\7\5")
        buf.write("\2\2\u0190\u0192\7\6\2\2\u0191\u018f\3\2\2\2\u0191\u0192")
        buf.write("\3\2\2\2\u0192\u01a0\3\2\2\2\u0193\u0194\t\3\2\2\u0194")
        buf.write("\u01a0\5\32\16\2\u0195\u0196\7\25\2\2\u0196\u01a0\5\30")
        buf.write("\r\2\u0197\u0198\7\25\2\2\u0198\u0199\7\5\2\2\u0199\u019b")
        buf.write("\5\30\r\2\u019a\u019c\7\32\2\2\u019b\u019a\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c\u019d\3\2\2\2\u019d\u019e\7\6\2\2")
        buf.write("\u019e\u01a0\3\2\2\2\u019f\u018e\3\2\2\2\u019f\u0193\3")
        buf.write("\2\2\2\u019f\u0195\3\2\2\2\u019f\u0197\3\2\2\2\u01a0\37")
        buf.write("\3\2\2\2\u01a1\u01a7\5\32\16\2\u01a2\u01a3\7\5\2\2\u01a3")
        buf.write("\u01a4\5\34\17\2\u01a4\u01a5\7\6\2\2\u01a5\u01a7\3\2\2")
        buf.write("\2\u01a6\u01a1\3\2\2\2\u01a6\u01a2\3\2\2\2\u01a7!\3\2")
        buf.write("\2\2\u01a8\u01a9\58\35\2\u01a9\u01b2\7\5\2\2\u01aa\u01af")
        buf.write("\5&\24\2\u01ab\u01ac\7\32\2\2\u01ac\u01ae\5&\24\2\u01ad")
        buf.write("\u01ab\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2")
        buf.write("\u01af\u01b0\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3")
        buf.write("\2\2\2\u01b2\u01aa\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01b5\7\6\2\2\u01b5#\3\2\2\2\u01b6\u01b7")
        buf.write("\t\4\2\2\u01b7%\3\2\2\2\u01b8\u01bc\5\32\16\2\u01b9\u01bc")
        buf.write("\5\"\22\2\u01ba\u01bc\5<\37\2\u01bb\u01b8\3\2\2\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bb\u01ba\3\2\2\2\u01bc\'\3\2\2\2\u01bd")
        buf.write("\u01be\7\33\2\2\u01be\u01bf\5\u0082B\2\u01bf\u01c0\7\23")
        buf.write("\2\2\u01c0\u01c2\5*\26\2\u01c1\u01c3\7\22\2\2\u01c2\u01c1")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01cc\3\2\2\2\u01c4")
        buf.write("\u01c5\7\33\2\2\u01c5\u01c6\5\u0082B\2\u01c6\u01c7\7\3")
        buf.write("\2\2\u01c7\u01c9\5*\26\2\u01c8\u01ca\7\4\2\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc\3\2\2\2\u01cb")
        buf.write("\u01bd\3\2\2\2\u01cb\u01c4\3\2\2\2\u01cc)\3\2\2\2\u01cd")
        buf.write("\u01ce\b\26\1\2\u01ce\u01cf\58\35\2\u01cf\u01d8\7\5\2")
        buf.write("\2\u01d0\u01d5\5*\26\2\u01d1\u01d2\7\32\2\2\u01d2\u01d4")
        buf.write("\5*\26\2\u01d3\u01d1\3\2\2\2\u01d4\u01d7\3\2\2\2\u01d5")
        buf.write("\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d9\3\2\2\2")
        buf.write("\u01d7\u01d5\3\2\2\2\u01d8\u01d0\3\2\2\2\u01d8\u01d9\3")
        buf.write("\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01db\7\6\2\2\u01db\u01f0")
        buf.write("\3\2\2\2\u01dc\u01dd\58\35\2\u01dd\u01e6\7c\2\2\u01de")
        buf.write("\u01e3\5*\26\2\u01df\u01e0\7\32\2\2\u01e0\u01e2\5*\26")
        buf.write("\2\u01e1\u01df\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3\u01e1")
        buf.write("\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5")
        buf.write("\u01e3\3\2\2\2\u01e6\u01de\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01e9\7g\2\2\u01e9\u01f0\3")
        buf.write("\2\2\2\u01ea\u01ec\58\35\2\u01eb\u01ed\t\5\2\2\u01ec\u01eb")
        buf.write("\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee")
        buf.write("\u01f0\5x=\2\u01ef\u01cd\3\2\2\2\u01ef\u01dc\3\2\2\2\u01ef")
        buf.write("\u01ea\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0\u01f9\3\2\2\2")
        buf.write("\u01f1\u01f2\f\6\2\2\u01f2\u01f3\t\6\2\2\u01f3\u01f8\5")
        buf.write("*\26\7\u01f4\u01f5\f\5\2\2\u01f5\u01f6\7\7\2\2\u01f6\u01f8")
        buf.write("\7\b\2\2\u01f7\u01f1\3\2\2\2\u01f7\u01f4\3\2\2\2\u01f8")
        buf.write("\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2")
        buf.write("\u01fa+\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fd\t\7\2")
        buf.write("\2\u01fd\u01fe\5*\26\2\u01fe-\3\2\2\2\u01ff\u0201\5*\26")
        buf.write("\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202")
        buf.write("\3\2\2\2\u0202\u0217\5\u0082B\2\u0203\u0205\5*\26\2\u0204")
        buf.write("\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2")
        buf.write("\u0206\u0207\5\u0082B\2\u0207\u0208\7\20\2\2\u0208\u0217")
        buf.write("\3\2\2\2\u0209\u020b\5*\26\2\u020a\u0209\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020d\5\u0082")
        buf.write("B\2\u020d\u020e\7\37\2\2\u020e\u0217\3\2\2\2\u020f\u0211")
        buf.write("\5*\26\2\u0210\u020f\3\2\2\2\u0210\u0211\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0213\5\u0082B\2\u0213\u0214\7\36")
        buf.write("\2\2\u0214\u0215\5\u0082B\2\u0215\u0217\3\2\2\2\u0216")
        buf.write("\u0200\3\2\2\2\u0216\u0204\3\2\2\2\u0216\u020a\3\2\2\2")
        buf.write("\u0216\u0210\3\2\2\2\u0217/\3\2\2\2\u0218\u0219\7!\2\2")
        buf.write("\u0219\u021a\5\62\32\2\u021a\u021b\5\64\33\2\u021b\u0253")
        buf.write("\3\2\2\2\u021c\u021d\7\"\2\2\u021d\u021e\5\62\32\2\u021e")
        buf.write("\u021f\5\64\33\2\u021f\u0253\3\2\2\2\u0220\u0221\7$\2")
        buf.write("\2\u0221\u0222\5\62\32\2\u0222\u0223\5\64\33\2\u0223\u0253")
        buf.write("\3\2\2\2\u0224\u0225\7$\2\2\u0225\u0226\5\u0082B\2\u0226")
        buf.write("\u0227\7\5\2\2\u0227\u022c\5.\30\2\u0228\u0229\7\32\2")
        buf.write("\2\u0229\u022b\5.\30\2\u022a\u0228\3\2\2\2\u022b\u022e")
        buf.write("\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022f\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0231\7\6\2\2")
        buf.write("\u0230\u0232\5,\27\2\u0231\u0230\3\2\2\2\u0231\u0232\3")
        buf.write("\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\5\64\33\2\u0234")
        buf.write("\u0253\3\2\2\2\u0235\u0236\5\u0082B\2\u0236\u0237\7\5")
        buf.write("\2\2\u0237\u023c\5.\30\2\u0238\u0239\7\32\2\2\u0239\u023b")
        buf.write("\5.\30\2\u023a\u0238\3\2\2\2\u023b\u023e\3\2\2\2\u023c")
        buf.write("\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u023f\3\2\2\2")
        buf.write("\u023e\u023c\3\2\2\2\u023f\u0241\7\6\2\2\u0240\u0242\5")
        buf.write(",\27\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243")
        buf.write("\3\2\2\2\u0243\u0244\7%\2\2\u0244\u0245\5\64\33\2\u0245")
        buf.write("\u0253\3\2\2\2\u0246\u0247\5\62\32\2\u0247\u0248\7%\2")
        buf.write("\2\u0248\u0249\5\64\33\2\u0249\u0253\3\2\2\2\u024a\u024b")
        buf.write("\5\62\32\2\u024b\u024c\7&\2\2\u024c\u024d\5\64\33\2\u024d")
        buf.write("\u0253\3\2\2\2\u024e\u024f\5\62\32\2\u024f\u0250\7(\2")
        buf.write("\2\u0250\u0251\5\64\33\2\u0251\u0253\3\2\2\2\u0252\u0218")
        buf.write("\3\2\2\2\u0252\u021c\3\2\2\2\u0252\u0220\3\2\2\2\u0252")
        buf.write("\u0224\3\2\2\2\u0252\u0235\3\2\2\2\u0252\u0246\3\2\2\2")
        buf.write("\u0252\u024a\3\2\2\2\u0252\u024e\3\2\2\2\u0253\61\3\2")
        buf.write("\2\2\u0254\u0256\5\u0082B\2\u0255\u0257\5,\27\2\u0256")
        buf.write("\u0255\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0265\3\2\2\2")
        buf.write("\u0258\u025d\5\66\34\2\u0259\u025a\7\32\2\2\u025a\u025c")
        buf.write("\5\66\34\2\u025b\u0259\3\2\2\2\u025c\u025f\3\2\2\2\u025d")
        buf.write("\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0265\3\2\2\2")
        buf.write("\u025f\u025d\3\2\2\2\u0260\u0265\58\35\2\u0261\u0262\5")
        buf.write("8\35\2\u0262\u0263\5@!\2\u0263\u0265\3\2\2\2\u0264\u0254")
        buf.write("\3\2\2\2\u0264\u0258\3\2\2\2\u0264\u0260\3\2\2\2\u0264")
        buf.write("\u0261\3\2\2\2\u0265\63\3\2\2\2\u0266\u0280\5\32\16\2")
        buf.write("\u0267\u0268\7\23\2\2\u0268\u0280\5\32\16\2\u0269\u026d")
        buf.write("\7\3\2\2\u026a\u026c\5\4\3\2\u026b\u026a\3\2\2\2\u026c")
        buf.write("\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3\2\2\2")
        buf.write("\u026e\u0270\3\2\2\2\u026f\u026d\3\2\2\2\u0270\u0280\7")
        buf.write("\4\2\2\u0271\u0275\7\23\2\2\u0272\u0274\5\4\3\2\u0273")
        buf.write("\u0272\3\2\2\2\u0274\u0277\3\2\2\2\u0275\u0273\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276\u0278\3\2\2\2\u0277\u0275\3")
        buf.write("\2\2\2\u0278\u0280\7\22\2\2\u0279\u0280\5\30\r\2\u027a")
        buf.write("\u027b\7\5\2\2\u027b\u027c\5\30\r\2\u027c\u027d\7\6\2")
        buf.write("\2\u027d\u0280\3\2\2\2\u027e\u0280\5\4\3\2\u027f\u0266")
        buf.write("\3\2\2\2\u027f\u0267\3\2\2\2\u027f\u0269\3\2\2\2\u027f")
        buf.write("\u0271\3\2\2\2\u027f\u0279\3\2\2\2\u027f\u027a\3\2\2\2")
        buf.write("\u027f\u027e\3\2\2\2\u0280\65\3\2\2\2\u0281\u0283\58\35")
        buf.write("\2\u0282\u0284\5,\27\2\u0283\u0282\3\2\2\2\u0283\u0284")
        buf.write("\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0287\7A\2\2\u0286")
        buf.write("\u0281\3\2\2\2\u0286\u0285\3\2\2\2\u0287\67\3\2\2\2\u0288")
        buf.write("\u028b\5\u0082B\2\u0289\u028b\5:\36\2\u028a\u0288\3\2")
        buf.write("\2\2\u028a\u0289\3\2\2\2\u028b\u0290\3\2\2\2\u028c\u028d")
        buf.write("\7X\2\2\u028d\u028f\5\u0082B\2\u028e\u028c\3\2\2\2\u028f")
        buf.write("\u0292\3\2\2\2\u0290\u028e\3\2\2\2\u0290\u0291\3\2\2\2")
        buf.write("\u02919\3\2\2\2\u0292\u0290\3\2\2\2\u0293\u0298\5\u0082")
        buf.write("B\2\u0294\u0295\7\'\2\2\u0295\u0297\5\u0082B\2\u0296\u0294")
        buf.write("\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298")
        buf.write("\u0299\3\2\2\2\u0299;\3\2\2\2\u029a\u0298\3\2\2\2\u029b")
        buf.write("\u02a4\5> \2\u029c\u02a4\5z>\2\u029d\u02a4\5~@\2\u029e")
        buf.write("\u02a4\58\35\2\u029f\u02a4\5H%\2\u02a0\u02a4\5B\"\2\u02a1")
        buf.write("\u02a4\5@!\2\u02a2\u02a4\5\u0084C\2\u02a3\u029b\3\2\2")
        buf.write("\2\u02a3\u029c\3\2\2\2\u02a3\u029d\3\2\2\2\u02a3\u029e")
        buf.write("\3\2\2\2\u02a3\u029f\3\2\2\2\u02a3\u02a0\3\2\2\2\u02a3")
        buf.write("\u02a1\3\2\2\2\u02a3\u02a2\3\2\2\2\u02a4=\3\2\2\2\u02a5")
        buf.write("\u02ac\5t;\2\u02a6\u02ac\5v<\2\u02a7\u02ac\5x=\2\u02a8")
        buf.write("\u02ac\7F\2\2\u02a9\u02ac\7G\2\2\u02aa\u02ac\7H\2\2\u02ab")
        buf.write("\u02a5\3\2\2\2\u02ab\u02a6\3\2\2\2\u02ab\u02a7\3\2\2\2")
        buf.write("\u02ab\u02a8\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02aa\3")
        buf.write("\2\2\2\u02ac?\3\2\2\2\u02ad\u02ae\7\7\2\2\u02ae\u02b5")
        buf.write("\5L\'\2\u02af\u02b1\7\32\2\2\u02b0\u02af\3\2\2\2\u02b0")
        buf.write("\u02b1\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\5L\'\2")
        buf.write("\u02b3\u02b0\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b8\u02b9\7\b\2\2\u02b9\u02c8\3\2\2\2\u02ba")
        buf.write("\u02bb\7\t\2\2\u02bb\u02c2\5L\'\2\u02bc\u02be\7\32\2\2")
        buf.write("\u02bd\u02bc\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\3")
        buf.write("\2\2\2\u02bf\u02c1\5L\'\2\u02c0\u02bd\3\2\2\2\u02c1\u02c4")
        buf.write("\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3")
        buf.write("\u02c5\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c5\u02c6\7\t\2\2")
        buf.write("\u02c6\u02c8\3\2\2\2\u02c7\u02ad\3\2\2\2\u02c7\u02ba\3")
        buf.write("\2\2\2\u02c8A\3\2\2\2\u02c9\u02cb\7\3\2\2\u02ca\u02cc")
        buf.write("\5D#\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02d1")
        buf.write("\3\2\2\2\u02cd\u02ce\7\32\2\2\u02ce\u02d0\5D#\2\u02cf")
        buf.write("\u02cd\3\2\2\2\u02d0\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2")
        buf.write("\u02d1\u02d2\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3")
        buf.write("\2\2\2\u02d4\u02d6\7\32\2\2\u02d5\u02d4\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\7\4\2\2")
        buf.write("\u02d8C\3\2\2\2\u02d9\u02da\5F$\2\u02da\u02db\7\23\2\2")
        buf.write("\u02db\u02dc\5J&\2\u02dcE\3\2\2\2\u02dd\u02e1\5x=\2\u02de")
        buf.write("\u02e1\5\u0082B\2\u02df\u02e1\5z>\2\u02e0\u02dd\3\2\2")
        buf.write("\2\u02e0\u02de\3\2\2\2\u02e0\u02df\3\2\2\2\u02e1G\3\2")
        buf.write("\2\2\u02e2\u02e4\7\7\2\2\u02e3\u02e5\5J&\2\u02e4\u02e3")
        buf.write("\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02ea\3\2\2\2\u02e6")
        buf.write("\u02e7\7\32\2\2\u02e7\u02e9\5J&\2\u02e8\u02e6\3\2\2\2")
        buf.write("\u02e9\u02ec\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02eb\3")
        buf.write("\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\u02ef")
        buf.write("\7\32\2\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02f1\7\b\2\2\u02f1I\3\2\2\2\u02f2")
        buf.write("\u02f6\5<\37\2\u02f3\u02f6\5\32\16\2\u02f4\u02f6\5\4\3")
        buf.write("\2\u02f5\u02f2\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f4")
        buf.write("\3\2\2\2\u02f6K\3\2\2\2\u02f7\u02fa\5\u0082B\2\u02f8\u02fa")
        buf.write("\5x=\2\u02f9\u02f7\3\2\2\2\u02f9\u02f8\3\2\2\2\u02fa\u02fc")
        buf.write("\3\2\2\2\u02fb\u02fd\7\23\2\2\u02fc\u02fb\3\2\2\2\u02fc")
        buf.write("\u02fd\3\2\2\2\u02fdM\3\2\2\2\u02fe\u02ff\7+\2\2\u02ff")
        buf.write("\u0301\5\\/\2\u0300\u0302\t\b\2\2\u0301\u0300\3\2\2\2")
        buf.write("\u0301\u0302\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\5")
        buf.write("\26\f\2\u0304\u0306\5P)\2\u0305\u0304\3\2\2\2\u0305\u0306")
        buf.write("\3\2\2\2\u0306\u0322\3\2\2\2\u0307\u0308\7+\2\2\u0308")
        buf.write("\u030a\5\\/\2\u0309\u030b\t\b\2\2\u030a\u0309\3\2\2\2")
        buf.write("\u030a\u030b\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u0310\5")
        buf.write("\26\f\2\u030d\u030f\5R*\2\u030e\u030d\3\2\2\2\u030f\u0312")
        buf.write("\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311")
        buf.write("\u0314\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0315\5P)\2\u0314")
        buf.write("\u0313\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0322\3\2\2\2")
        buf.write("\u0316\u0317\7.\2\2\u0317\u0319\5\\/\2\u0318\u031a\5X")
        buf.write("-\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b")
        buf.write("\3\2\2\2\u031b\u031c\5V,\2\u031c\u0322\3\2\2\2\u031d\u031e")
        buf.write("\7\61\2\2\u031e\u031f\5\\/\2\u031f\u0320\5Z.\2\u0320\u0322")
        buf.write("\3\2\2\2\u0321\u02fe\3\2\2\2\u0321\u0307\3\2\2\2\u0321")
        buf.write("\u0316\3\2\2\2\u0321\u031d\3\2\2\2\u0322O\3\2\2\2\u0323")
        buf.write("\u0324\7,\2\2\u0324\u0328\5\32\16\2\u0325\u0326\7,\2\2")
        buf.write("\u0326\u0328\5\24\13\2\u0327\u0323\3\2\2\2\u0327\u0325")
        buf.write("\3\2\2\2\u0328Q\3\2\2\2\u0329\u032a\7,\2\2\u032a\u032b")
        buf.write("\7+\2\2\u032b\u032d\5\\/\2\u032c\u032e\t\b\2\2\u032d\u032c")
        buf.write("\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f")
        buf.write("\u0330\5\26\f\2\u0330S\3\2\2\2\u0331\u0332\7/\2\2\u0332")
        buf.write("\u0333\5\32\16\2\u0333\u0334\7\23\2\2\u0334\u0335\5\26")
        buf.write("\f\2\u0335\u0345\3\2\2\2\u0336\u0337\5\32\16\2\u0337\u0338")
        buf.write("\7\62\2\2\u0338\u0339\5\26\f\2\u0339\u0345\3\2\2\2\u033a")
        buf.write("\u033b\7\60\2\2\u033b\u033c\7\23\2\2\u033c\u0345\5\26")
        buf.write("\f\2\u033d\u033e\7/\2\2\u033e\u033f\7\20\2\2\u033f\u0340")
        buf.write("\7\23\2\2\u0340\u0345\5\26\f\2\u0341\u0342\7\20\2\2\u0342")
        buf.write("\u0343\7\62\2\2\u0343\u0345\5\26\f\2\u0344\u0331\3\2\2")
        buf.write("\2\u0344\u0336\3\2\2\2\u0344\u033a\3\2\2\2\u0344\u033d")
        buf.write("\3\2\2\2\u0344\u0341\3\2\2\2\u0345U\3\2\2\2\u0346\u034a")
        buf.write("\7\3\2\2\u0347\u0349\5T+\2\u0348\u0347\3\2\2\2\u0349\u034c")
        buf.write("\3\2\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034d\3\2\2\2\u034c\u034a\3\2\2\2\u034d\u0357\7\4\2\2")
        buf.write("\u034e\u0352\7\23\2\2\u034f\u0351\5T+\2\u0350\u034f\3")
        buf.write("\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353")
        buf.write("\3\2\2\2\u0353\u0355\3\2\2\2\u0354\u0352\3\2\2\2\u0355")
        buf.write("\u0357\7\22\2\2\u0356\u0346\3\2\2\2\u0356\u034e\3\2\2")
        buf.write("\2\u0357W\3\2\2\2\u0358\u0359\t\t\2\2\u0359Y\3\2\2\2\u035a")
        buf.write("\u035d\5\32\16\2\u035b\u035d\5\24\13\2\u035c\u035a\3\2")
        buf.write("\2\2\u035c\u035b\3\2\2\2\u035d[\3\2\2\2\u035e\u0364\5")
        buf.write("\32\16\2\u035f\u0360\7\5\2\2\u0360\u0361\5\32\16\2\u0361")
        buf.write("\u0362\7\6\2\2\u0362\u0364\3\2\2\2\u0363\u035e\3\2\2\2")
        buf.write("\u0363\u035f\3\2\2\2\u0364]\3\2\2\2\u0365\u0366\7\63\2")
        buf.write("\2\u0366\u0367\5\24\13\2\u0367\u0368\5b\62\2\u0368\u0370")
        buf.write("\3\2\2\2\u0369\u036a\7\63\2\2\u036a\u036b\5\24\13\2\u036b")
        buf.write("\u036d\5`\61\2\u036c\u036e\5b\62\2\u036d\u036c\3\2\2\2")
        buf.write("\u036d\u036e\3\2\2\2\u036e\u0370\3\2\2\2\u036f\u0365\3")
        buf.write("\2\2\2\u036f\u0369\3\2\2\2\u0370_\3\2\2\2\u0371\u0372")
        buf.write("\7\64\2\2\u0372\u0373\5\u0082B\2\u0373\u0374\5\24\13\2")
        buf.write("\u0374\u037c\3\2\2\2\u0375\u0376\7\64\2\2\u0376\u0377")
        buf.write("\7\5\2\2\u0377\u0378\5\u0082B\2\u0378\u0379\7\6\2\2\u0379")
        buf.write("\u037a\5\24\13\2\u037a\u037c\3\2\2\2\u037b\u0371\3\2\2")
        buf.write("\2\u037b\u0375\3\2\2\2\u037ca\3\2\2\2\u037d\u037e\7\65")
        buf.write("\2\2\u037e\u037f\5\24\13\2\u037fc\3\2\2\2\u0380\u0381")
        buf.write("\79\2\2\u0381\u0382\7\5\2\2\u0382\u0383\5\30\r\2\u0383")
        buf.write("\u0385\7\6\2\2\u0384\u0386\5f\64\2\u0385\u0384\3\2\2\2")
        buf.write("\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\5")
        buf.write("\24\13\2\u0388\u039f\3\2\2\2\u0389\u038a\79\2\2\u038a")
        buf.write("\u038b\5\u0080A\2\u038b\u038c\78\2\2\u038c\u038e\5\32")
        buf.write("\16\2\u038d\u038f\5f\64\2\u038e\u038d\3\2\2\2\u038e\u038f")
        buf.write("\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\5\24\13\2\u0391")
        buf.write("\u039f\3\2\2\2\u0392\u0393\7:\2\2\u0393\u0395\5\\/\2\u0394")
        buf.write("\u0396\5f\64\2\u0395\u0394\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0397\3\2\2\2\u0397\u0398\5\24\13\2\u0398\u039f")
        buf.write("\3\2\2\2\u0399\u039b\7;\2\2\u039a\u039c\5f\64\2\u039b")
        buf.write("\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2")
        buf.write("\u039d\u039f\5\24\13\2\u039e\u0380\3\2\2\2\u039e\u0389")
        buf.write("\3\2\2\2\u039e\u0392\3\2\2\2\u039e\u0399\3\2\2\2\u039f")
        buf.write("e\3\2\2\2\u03a0\u03a1\t\n\2\2\u03a1g\3\2\2\2\u03a2\u03a3")
        buf.write("\7=\2\2\u03a3\u03a5\5\u0082B\2\u03a4\u03a6\5l\67\2\u03a5")
        buf.write("\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8\3\2\2\2")
        buf.write("\u03a7\u03a9\5n8\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2")
        buf.write("\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab\5p9\2\u03abi\3\2")
        buf.write("\2\2\u03ac\u03ad\7>\2\2\u03ad\u03af\5\u0082B\2\u03ae\u03b0")
        buf.write("\5l\67\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0")
        buf.write("\u03b2\3\2\2\2\u03b1\u03b3\5n8\2\u03b2\u03b1\3\2\2\2\u03b2")
        buf.write("\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b5\5p9\2\u03b5")
        buf.write("k\3\2\2\2\u03b6\u03b8\7?\2\2\u03b7\u03b9\5\u0082B\2\u03b8")
        buf.write("\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03b8\3\2\2\2")
        buf.write("\u03ba\u03bb\3\2\2\2\u03bb\u03c8\3\2\2\2\u03bc\u03bd\7")
        buf.write("\5\2\2\u03bd\u03c2\5\u0082B\2\u03be\u03bf\7\32\2\2\u03bf")
        buf.write("\u03c1\5\u0082B\2\u03c0\u03be\3\2\2\2\u03c1\u03c4\3\2")
        buf.write("\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c5")
        buf.write("\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03c6\7\6\2\2\u03c6")
        buf.write("\u03c8\3\2\2\2\u03c7\u03b6\3\2\2\2\u03c7\u03bc\3\2\2\2")
        buf.write("\u03c8m\3\2\2\2\u03c9\u03cb\7@\2\2\u03ca\u03cc\5\u0082")
        buf.write("B\2\u03cb\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03cb")
        buf.write("\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03de\3\2\2\2\u03cf")
        buf.write("\u03d0\7A\2\2\u03d0\u03de\5\u0082B\2\u03d1\u03d2\7A\2")
        buf.write("\2\u03d2\u03d3\7\5\2\2\u03d3\u03d8\5\u0082B\2\u03d4\u03d5")
        buf.write("\7\32\2\2\u03d5\u03d7\5\u0082B\2\u03d6\u03d4\3\2\2\2\u03d7")
        buf.write("\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3\2\2\2")
        buf.write("\u03d9\u03db\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03dc\7")
        buf.write("\6\2\2\u03dc\u03de\3\2\2\2\u03dd\u03c9\3\2\2\2\u03dd\u03cf")
        buf.write("\3\2\2\2\u03dd\u03d1\3\2\2\2\u03deo\3\2\2\2\u03df\u03e3")
        buf.write("\7\3\2\2\u03e0\u03e2\5r:\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03f2\7\4\2\2")
        buf.write("\u03e7\u03eb\7\23\2\2\u03e8\u03ea\5r:\2\u03e9\u03e8\3")
        buf.write("\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u03ee\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee")
        buf.write("\u03f2\7\22\2\2\u03ef\u03f0\7\23\2\2\u03f0\u03f2\5r:\2")
        buf.write("\u03f1\u03df\3\2\2\2\u03f1\u03e7\3\2\2\2\u03f1\u03ef\3")
        buf.write("\2\2\2\u03f2q\3\2\2\2\u03f3\u0435\5\6\4\2\u03f4\u03f6")
        buf.write("\5\u0080A\2\u03f5\u03f4\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03fa\u03fc\5\u0082B\2\u03fb\u03fd")
        buf.write("\5,\27\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u0435\3\2\2\2\u03fe\u0400\5\u0080A\2\u03ff\u03fe\3\2")
        buf.write("\2\2\u0400\u0403\3\2\2\2\u0401\u03ff\3\2\2\2\u0401\u0402")
        buf.write("\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u0401\3\2\2\2\u0404")
        buf.write("\u0406\5\u0082B\2\u0405\u0407\5,\27\2\u0406\u0405\3\2")
        buf.write("\2\2\u0406\u0407\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409")
        buf.write("\5\24\13\2\u0409\u0435\3\2\2\2\u040a\u040c\5\u0080A\2")
        buf.write("\u040b\u040a\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3")
        buf.write("\2\2\2\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d")
        buf.write("\3\2\2\2\u0410\u0411\5\u0082B\2\u0411\u0415\7\5\2\2\u0412")
        buf.write("\u0414\5.\30\2\u0413\u0412\3\2\2\2\u0414\u0417\3\2\2\2")
        buf.write("\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3")
        buf.write("\2\2\2\u0417\u0415\3\2\2\2\u0418\u041a\7\6\2\2\u0419\u041b")
        buf.write("\5,\27\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041d\7\23\2\2\u041d\u041f\7\24\2")
        buf.write("\2\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0435")
        buf.write("\3\2\2\2\u0420\u0422\5\u0080A\2\u0421\u0420\3\2\2\2\u0422")
        buf.write("\u0425\3\2\2\2\u0423\u0421\3\2\2\2\u0423\u0424\3\2\2\2")
        buf.write("\u0424\u0426\3\2\2\2\u0425\u0423\3\2\2\2\u0426\u0427\5")
        buf.write("\u0082B\2\u0427\u042b\7\5\2\2\u0428\u042a\5.\30\2\u0429")
        buf.write("\u0428\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429\3\2\2\2")
        buf.write("\u042b\u042c\3\2\2\2\u042c\u042e\3\2\2\2\u042d\u042b\3")
        buf.write("\2\2\2\u042e\u0430\7\6\2\2\u042f\u0431\5,\27\2\u0430\u042f")
        buf.write("\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0432\3\2\2\2\u0432")
        buf.write("\u0433\5\24\13\2\u0433\u0435\3\2\2\2\u0434\u03f3\3\2\2")
        buf.write("\2\u0434\u03f7\3\2\2\2\u0434\u0401\3\2\2\2\u0434\u040d")
        buf.write("\3\2\2\2\u0434\u0423\3\2\2\2\u0435s\3\2\2\2\u0436\u0437")
        buf.write("\t\13\2\2\u0437\u0438\5\u0080A\2\u0438u\3\2\2\2\u0439")
        buf.write("\u043a\t\f\2\2\u043aw\3\2\2\2\u043b\u043c\7I\2\2\u043c")
        buf.write("y\3\2\2\2\u043d\u0442\7L\2\2\u043e\u0442\7M\2\2\u043f")
        buf.write("\u0442\7N\2\2\u0440\u0442\7O\2\2\u0441\u043d\3\2\2\2\u0441")
        buf.write("\u043e\3\2\2\2\u0441\u043f\3\2\2\2\u0441\u0440\3\2\2\2")
        buf.write("\u0442{\3\2\2\2\u0443\u0447\5$\23\2\u0444\u0447\5X-\2")
        buf.write("\u0445\u0447\5f\64\2\u0446\u0443\3\2\2\2\u0446\u0444\3")
        buf.write("\2\2\2\u0446\u0445\3\2\2\2\u0447}\3\2\2\2\u0448\u0449")
        buf.write("\t\r\2\2\u0449\177\3\2\2\2\u044a\u044d\5|?\2\u044b\u044d")
        buf.write("\7Q\2\2\u044c\u044a\3\2\2\2\u044c\u044b\3\2\2\2\u044d")
        buf.write("\u0081\3\2\2\2\u044e\u0452\5|?\2\u044f\u0452\7R\2\2\u0450")
        buf.write("\u0452\7Q\2\2\u0451\u044e\3\2\2\2\u0451\u044f\3\2\2\2")
        buf.write("\u0451\u0450\3\2\2\2\u0452\u0083\3\2\2\2\u0453\u0455\7")
        buf.write("W\2\2\u0454\u0456\7I\2\2\u0455\u0454\3\2\2\2\u0455\u0456")
        buf.write("\3\2\2\2\u0456\u045a\3\2\2\2\u0457\u0458\7W\2\2\u0458")
        buf.write("\u045a\7Q\2\2\u0459\u0453\3\2\2\2\u0459\u0457\3\2\2\2")
        buf.write("\u045a\u0085\3\2\2\2\u045b\u045c\t\16\2\2\u045c\u0087")
        buf.write("\3\2\2\2\u045d\u045e\t\17\2\2\u045e\u0089\3\2\2\2\u045f")
        buf.write("\u0460\t\20\2\2\u0460\u008b\3\2\2\2\u0461\u0462\t\21\2")
        buf.write("\2\u0462\u008d\3\2\2\2\u0463\u0464\t\22\2\2\u0464\u008f")
        buf.write("\3\2\2\2\u0465\u0469\t\23\2\2\u0466\u0469\t\24\2\2\u0467")
        buf.write("\u0469\t\25\2\2\u0468\u0465\3\2\2\2\u0468\u0466\3\2\2")
        buf.write("\2\u0468\u0467\3\2\2\2\u0469\u0091\3\2\2\2\u046a\u046b")
        buf.write("\t\26\2\2\u046b\u0093\3\2\2\2\u046c\u046d\t\27\2\2\u046d")
        buf.write("\u0095\3\2\2\2\u046e\u046f\t\30\2\2\u046f\u0097\3\2\2")
        buf.write("\2\u0091\u009b\u00a3\u00a7\u00ab\u00af\u00b3\u00b7\u00bb")
        buf.write("\u00bf\u00c3\u00c7\u00cb\u00cd\u00d1\u00df\u00e6\u00f1")
        buf.write("\u00fb\u00fe\u0100\u010e\u0117\u0121\u0125\u012b\u0132")
        buf.write("\u0135\u013c\u014e\u017b\u017d\u018c\u0191\u019b\u019f")
        buf.write("\u01a6\u01af\u01b2\u01bb\u01c2\u01c9\u01cb\u01d5\u01d8")
        buf.write("\u01e3\u01e6\u01ec\u01ef\u01f7\u01f9\u0200\u0204\u020a")
        buf.write("\u0210\u0216\u022c\u0231\u023c\u0241\u0252\u0256\u025d")
        buf.write("\u0264\u026d\u0275\u027f\u0283\u0286\u028a\u0290\u0298")
        buf.write("\u02a3\u02ab\u02b0\u02b5\u02bd\u02c2\u02c7\u02cb\u02d1")
        buf.write("\u02d5\u02e0\u02e4\u02ea\u02ee\u02f5\u02f9\u02fc\u0301")
        buf.write("\u0305\u030a\u0310\u0314\u0319\u0321\u0327\u032d\u0344")
        buf.write("\u034a\u0352\u0356\u035c\u0363\u036d\u036f\u037b\u0385")
        buf.write("\u038e\u0395\u039b\u039e\u03a5\u03a8\u03af\u03b2\u03ba")
        buf.write("\u03c2\u03c7\u03cd\u03d8\u03dd\u03e3\u03eb\u03f1\u03f7")
        buf.write("\u03fc\u0401\u0406\u040d\u0415\u041a\u041e\u0423\u042b")
        buf.write("\u0430\u0434\u0441\u0446\u044c\u0451\u0455\u0459\u0468")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'with'", 
                     "'using'", "'instance'", "'*'", "'^'", "'end'", "<INVALID>", 
                     "'pass'", "'return'", "'yield'", "'await'", "'break'", 
                     "'throw'", "<INVALID>", "'type'", "'|'", "'&'", "'?'", 
                     "'**'", "'^^'", "'val'", "'var'", "'let'", "'def'", 
                     "'='", "<INVALID>", "<INVALID>", "<INVALID>", "'+'", 
                     "'-'", "'if'", "'else'", "'then'", "'switch'", "'case'", 
                     "'default'", "'match'", "<INVALID>", "'try'", "'catch'", 
                     "'final'", "'async'", "'lazy'", "'in'", "'for'", "'while'", 
                     "'do'", "'macro'", "'trait'", "'class'", "'extends'", 
                     "'meets'", "'~'", "'$'", "'@'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*^'", "'/^'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\'", "<INVALID>", "<INVALID>", "'true'", 
                     "'false'", "'null'", "'nothing'", "'#'", "'.'", "'_'", 
                     "'#!'", "'%%%'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<='", "'<'", 
                     "<INVALID>", "<INVALID>", "'>='", "'>'", "'++'", "'+='", 
                     "'\u2295'", "'--'", "'-='", "'\u00D7'", "'\u2297'", 
                     "'\u2299'", "'//@'", "'//'", "'/@'", "'/'", "'\u00F7'", 
                     "'%%'", "'%'", "'==='", "'=!='", "'=='", "'~~'", "'~='", 
                     "<INVALID>", "<INVALID>", "'!!'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':?'", "'@@@'", "'@@'", "'@='", "'`'", 
                     "'\u00B4'", "'''", "'...'", "'\u22C5'", "'\u221A'", 
                     "'\u215F'", "'\u00B0'", "'\u1D40'", "'\u1D34'", "'\u00A7'", 
                     "'\u00B6'", "'\u00A4'", "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "With", "Using", "Instance", 
                      "Times", "Power", "End", "Colon", "Pass", "Return", 
                      "Yield", "Await", "Break", "Throw", "Comma", "Type", 
                      "BitOr", "BitAnd", "Nullable", "Keywords", "BaseInput", 
                      "Val", "Var", "Let", "Def", "Set", "Flexible", "Name", 
                      "Delay", "Plus", "Minus", "If", "Else", "Then", "Switch", 
                      "Case", "Default", "Match", "Rule", "Try", "Catch", 
                      "Final", "Async", "Lazy", "In", "For", "While", "Do", 
                      "Macro", "Trait", "Class", "Extends", "Meets", "Tilde", 
                      "Suffix", "Prefix", "Decimal", "DecimalBad", "Binary", 
                      "Octal", "Hexadecimal", "Integer", "Exponent", "Base", 
                      "StringEscapeBlock", "StringEscapeSingle", "StringLiteral", 
                      "StringEmpty", "Escape", "Identifier", "Symbol", "True", 
                      "False", "Null", "Nothing", "Sharp", "Dot", "Underline", 
                      "Shebang", "Comment", "LineComment", "PartComment", 
                      "NewLine", "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "PlusTo", "LogicXor", "Decrease", "MinusFrom", 
                      "Multiply", "Kronecker", "TensorProduct", "MapAll", 
                      "Remainder", "Map", "Divide", "Quotient", "Output", 
                      "Mod", "Equivalent", "NotEquivalent", "Equal", "Concat", 
                      "Destruct", "LogicOr", "LogicAnd", "DoubleBang", "NotEqual", 
                      "BitNot", "LogicNot", "Elvis", "Curry", "Apply", "LetAssign", 
                      "Quote", "Acute", "Quotation", "Ellipsis", "DOT", 
                      "Surd", "Reciprocal", "Degree", "Transpose", "Hermitian", 
                      "Section", "Pilcrow", "Currency", "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_idTuples = 8
    RULE_blockStatement = 9
    RULE_blockNonEnd = 10
    RULE_expressionStatement = 11
    RULE_expression = 12
    RULE_trinocular = 13
    RULE_controlFlow = 14
    RULE_trinocularNest = 15
    RULE_functionCall = 16
    RULE_flowController = 17
    RULE_arguments = 18
    RULE_typeStatement = 19
    RULE_typeExpression = 20
    RULE_typeSuffix = 21
    RULE_parameter = 22
    RULE_assignStatment = 23
    RULE_assignLHS = 24
    RULE_assignRHS = 25
    RULE_maybeSymbol = 26
    RULE_symbols = 27
    RULE_symbolName = 28
    RULE_data = 29
    RULE_number = 30
    RULE_index = 31
    RULE_dict = 32
    RULE_keyValue = 33
    RULE_keyValid = 34
    RULE_list = 35
    RULE_element = 36
    RULE_indexValid = 37
    RULE_branchStatement = 38
    RULE_else = 39
    RULE_elseIf = 40
    RULE_caseBody = 41
    RULE_switchBody = 42
    RULE_switchController = 43
    RULE_matchBody = 44
    RULE_condition = 45
    RULE_tryStatement = 46
    RULE_catchProduction = 47
    RULE_finalProduction = 48
    RULE_loopStatement = 49
    RULE_loopController = 50
    RULE_traitStatement = 51
    RULE_classStatement = 52
    RULE_classExtends = 53
    RULE_classMeets = 54
    RULE_classBody = 55
    RULE_classExpression = 56
    RULE_complex = 57
    RULE_decimal = 58
    RULE_integer = 59
    RULE_string = 60
    RULE_controller = 61
    RULE_special = 62
    RULE_identifier = 63
    RULE_symbol = 64
    RULE_solt = 65
    RULE_add_ops = 66
    RULE_pre_ops = 67
    RULE_pst_ops = 68
    RULE_bit_ops = 69
    RULE_lgk_ops = 70
    RULE_cpr_ops = 71
    RULE_pow_ops = 72
    RULE_mul_ops = 73
    RULE_list_ops = 74

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "idTuples", 
                   "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "trinocular", "controlFlow", "trinocularNest", 
                   "functionCall", "flowController", "arguments", "typeStatement", 
                   "typeExpression", "typeSuffix", "parameter", "assignStatment", 
                   "assignLHS", "assignRHS", "maybeSymbol", "symbols", "symbolName", 
                   "data", "number", "index", "dict", "keyValue", "keyValid", 
                   "list", "element", "indexValid", "branchStatement", "else", 
                   "elseIf", "caseBody", "switchBody", "switchController", 
                   "matchBody", "condition", "tryStatement", "catchProduction", 
                   "finalProduction", "loopStatement", "loopController", 
                   "traitStatement", "classStatement", "classExtends", "classMeets", 
                   "classBody", "classExpression", "complex", "decimal", 
                   "integer", "string", "controller", "special", "identifier", 
                   "symbol", "solt", "add_ops", "pre_ops", "pst_ops", "bit_ops", 
                   "lgk_ops", "cpr_ops", "pow_ops", "mul_ops", "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    With=11
    Using=12
    Instance=13
    Times=14
    Power=15
    End=16
    Colon=17
    Pass=18
    Return=19
    Yield=20
    Await=21
    Break=22
    Throw=23
    Comma=24
    Type=25
    BitOr=26
    BitAnd=27
    Nullable=28
    Keywords=29
    BaseInput=30
    Val=31
    Var=32
    Let=33
    Def=34
    Set=35
    Flexible=36
    Name=37
    Delay=38
    Plus=39
    Minus=40
    If=41
    Else=42
    Then=43
    Switch=44
    Case=45
    Default=46
    Match=47
    Rule=48
    Try=49
    Catch=50
    Final=51
    Async=52
    Lazy=53
    In=54
    For=55
    While=56
    Do=57
    Macro=58
    Trait=59
    Class=60
    Extends=61
    Meets=62
    Tilde=63
    Suffix=64
    Prefix=65
    Decimal=66
    DecimalBad=67
    Binary=68
    Octal=69
    Hexadecimal=70
    Integer=71
    Exponent=72
    Base=73
    StringEscapeBlock=74
    StringEscapeSingle=75
    StringLiteral=76
    StringEmpty=77
    Escape=78
    Identifier=79
    Symbol=80
    True=81
    False=82
    Null=83
    Nothing=84
    Sharp=85
    Dot=86
    Underline=87
    Shebang=88
    Comment=89
    LineComment=90
    PartComment=91
    NewLine=92
    WhiteSpace=93
    Import=94
    LeftShift=95
    LessEqual=96
    Less=97
    Export=98
    RightShift=99
    GraterEqual=100
    Grater=101
    Increase=102
    PlusTo=103
    LogicXor=104
    Decrease=105
    MinusFrom=106
    Multiply=107
    Kronecker=108
    TensorProduct=109
    MapAll=110
    Remainder=111
    Map=112
    Divide=113
    Quotient=114
    Output=115
    Mod=116
    Equivalent=117
    NotEquivalent=118
    Equal=119
    Concat=120
    Destruct=121
    LogicOr=122
    LogicAnd=123
    DoubleBang=124
    NotEqual=125
    BitNot=126
    LogicNot=127
    Elvis=128
    Curry=129
    Apply=130
    LetAssign=131
    Quote=132
    Acute=133
    Quotation=134
    Ellipsis=135
    DOT=136
    Surd=137
    Reciprocal=138
    Degree=139
    Transpose=140
    Hermitian=141
    Section=142
    Pilcrow=143
    Currency=144
    Element=145

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 150
                self.statement()
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 156
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def branchStatement(self):
            return self.getTypedRuleContext(NyarParser.BranchStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(NyarParser.LoopStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.importStatement()
                self.state = 161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 160
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.typeStatement()
                self.state = 165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.assignStatment()
                self.state = 169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 168
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 171
                self.branchStatement()
                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 175
                self.loopStatement()
                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 176
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 179
                self.tryStatement()
                self.state = 181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 183
                self.traitStatement()
                self.state = 185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 184
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 187
                self.classStatement()
                self.state = 189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.eos()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 191
                self.expression(0)
                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.eos()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 195
                self.trinocular()
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 196
                    self.eos()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 199
                self.data()
                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleIncludeContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleInclude" ):
                listener.enterModuleInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleInclude" ):
                listener.exitModuleInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleInclude" ):
                return visitor.visitModuleInclude(self)
            else:
                return visitor.visitChildren(self)


    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(NyarParser.Using)
                self.state = 212
                localctx.module = self.moduleName()
                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.match(NyarParser.Using)
                self.state = 214
                localctx.module = self.moduleName()
                self.state = 215
                self.match(NyarParser.As)
                self.state = 216
                localctx.alias = self.identifier()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self.match(NyarParser.Using)
                self.state = 219
                localctx.source = self.moduleName()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 220
                    self.match(NyarParser.With)


                self.state = 223
                localctx.name = self.identifier()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 225
                self.match(NyarParser.Using)
                self.state = 226
                localctx.source = self.moduleName()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 227
                    self.match(NyarParser.With)


                self.state = 230
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 232
                self.match(NyarParser.Using)
                self.state = 233
                localctx.source = self.moduleName()
                self.state = 234
                self.match(NyarParser.Dot)
                self.state = 235
                self.idTuples()
                pass

            elif la_ == 6:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 237
                self.match(NyarParser.Using)
                self.state = 238
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        try:
            self.state = 254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 241
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 242
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 243
                self.symbol()

                self.state = 244
                self.match(NyarParser.Dot)
                self.state = 245
                self.symbol()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 247
                self.moduleLanguage()
                self.state = 249
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 248
                    self.moduleScope()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 252
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 251
                    self.moduleScope()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(NyarParser.Suffix)
            self.state = 257
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(NyarParser.Prefix)
            self.state = 260
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(NyarParser.IdentifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(NyarParser.T__0)
            self.state = 263
            self.identifier()
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 264
                self.match(NyarParser.Comma)
                self.state = 265
                self.identifier()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.match(NyarParser.T__0)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 274
                    self.statement()
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 280
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                self.match(NyarParser.Colon)
                self.state = 282
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 283
                self.match(NyarParser.Colon)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 284
                    self.statement()
                    self.state = 289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 290
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.match(NyarParser.T__0)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 294
                    self.statement()
                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 300
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 301
                        self.statement() 
                    self.state = 306
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.expression(0)
            self.state = 314
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 310
                    self.match(NyarParser.Comma)
                    self.state = 311
                    self.expression(0) 
                self.state = 316
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # IdentifierContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 318
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 319
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 320
                localctx.left = self.identifier()
                self.state = 321
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 323
                localctx.op = self.pre_ops()
                self.state = 324
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 326
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 327
                self.match(NyarParser.T__2)
                self.state = 328
                self.expression(0)
                self.state = 329
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 331
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 377
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 334
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 335
                        localctx.op = self.bit_ops()
                        self.state = 336
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 338
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 339
                        localctx.op = self.lgk_ops()
                        self.state = 340
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 342
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 343
                        localctx.op = self.cpr_ops()
                        self.state = 344
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 346
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 347
                        localctx.op = self.pow_ops()
                        self.state = 348
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 350
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 351
                        localctx.op = self.mul_ops()
                        self.state = 352
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 354
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 355
                        localctx.op = self.add_ops()
                        self.state = 356
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 358
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 359
                        localctx.op = self.list_ops()
                        self.state = 360
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 362
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 363
                        self.match(NyarParser.Dot)
                        self.state = 364
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 365
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 366
                        self.match(NyarParser.Dot)
                        self.state = 367
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 368
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 369
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 370
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 371
                        self.match(NyarParser.As)
                        self.state = 372
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 373
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 374
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 375
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 376
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TrinocularContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_trinocular

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfElseTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # TrinocularNestContext
            self.m = None # TrinocularNestContext
            self.r = None # TrinocularNestContext
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def Else(self):
            return self.getToken(NyarParser.Else, 0)
        def trinocularNest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TrinocularNestContext)
            else:
                return self.getTypedRuleContext(NyarParser.TrinocularNestContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseTrinocular" ):
                listener.enterIfElseTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseTrinocular" ):
                listener.exitIfElseTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElseTrinocular" ):
                return visitor.visitIfElseTrinocular(self)
            else:
                return visitor.visitChildren(self)


    class ConditionTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # TrinocularNestContext
            self.m = None # TrinocularNestContext
            self.r = None # TrinocularNestContext
            self.copyFrom(ctx)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)
        def trinocularNest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TrinocularNestContext)
            else:
                return self.getTypedRuleContext(NyarParser.TrinocularNestContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionTrinocular" ):
                listener.enterConditionTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionTrinocular" ):
                listener.exitConditionTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionTrinocular" ):
                return visitor.visitConditionTrinocular(self)
            else:
                return visitor.visitChildren(self)



    def trinocular(self):

        localctx = NyarParser.TrinocularContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_trinocular)
        try:
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ConditionTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 382
                localctx.l = self.trinocularNest()
                self.state = 383
                self.match(NyarParser.Nullable)
                self.state = 384
                localctx.m = self.trinocularNest()
                self.state = 385
                self.match(NyarParser.Colon)
                self.state = 386
                localctx.r = self.trinocularNest()
                pass

            elif la_ == 2:
                localctx = NyarParser.IfElseTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                localctx.l = self.trinocularNest()
                self.state = 389
                self.match(NyarParser.If)
                self.state = 390
                localctx.m = self.trinocularNest()
                self.state = 391
                self.match(NyarParser.Else)
                self.state = 392
                localctx.r = self.trinocularNest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self.match(NyarParser.T__2)
                    self.state = 398
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 402
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 403
                localctx.state = self.match(NyarParser.Return)
                self.state = 404
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 405
                localctx.state = self.match(NyarParser.Return)
                self.state = 406
                self.match(NyarParser.T__2)
                self.state = 407
                self.expressionStatement()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 408
                    self.match(NyarParser.Comma)


                self.state = 411
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrinocularNestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_trinocularNest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrinocularNest" ):
                listener.enterTrinocularNest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrinocularNest" ):
                listener.exitTrinocularNest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrinocularNest" ):
                return visitor.visitTrinocularNest(self)
            else:
                return visitor.visitChildren(self)




    def trinocularNest(self):

        localctx = NyarParser.TrinocularNestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_trinocularNest)
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.match(NyarParser.T__2)
                self.state = 417
                self.trinocular()
                self.state = 418
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.symbols()
            self.state = 423
            self.match(NyarParser.T__2)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 424
                self.arguments()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 425
                    self.match(NyarParser.Comma)
                    self.state = 426
                    self.arguments()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 434
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_arguments)
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 440
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeStatement)
        try:
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.match(NyarParser.Type)
                self.state = 444
                self.symbol()
                self.state = 445
                self.match(NyarParser.Colon)
                self.state = 446
                self.typeExpression(0)
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 450
                self.match(NyarParser.Type)
                self.state = 451
                self.symbol()
                self.state = 452
                self.match(NyarParser.T__0)
                self.state = 453
                self.typeExpression(0)
                self.state = 455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 454
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 460
                self.symbols()
                self.state = 461
                self.match(NyarParser.T__2)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 462
                    self.typeExpression(0)
                    self.state = 467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 463
                        self.match(NyarParser.Comma)
                        self.state = 464
                        self.typeExpression(0)
                        self.state = 469
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 472
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 474
                self.symbols()
                self.state = 475
                self.match(NyarParser.Less)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 476
                    self.typeExpression(0)
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 477
                        self.match(NyarParser.Comma)
                        self.state = 478
                        self.typeExpression(0)
                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 486
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 488
                self.symbols()
                self.state = 490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 489
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 492
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 503
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 501
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 495
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 496
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 497
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 498
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 499
                        self.match(NyarParser.T__4)
                        self.state = 500
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 505
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Meets(self):
            return self.getToken(NyarParser.Meets, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            _la = self._input.LA(1)
            if not(_la==NyarParser.Meets or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 507
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keywords(self):
            return self.getToken(NyarParser.Keywords, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_parameter)
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 509
                    self.typeExpression(0)


                self.state = 512
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 513
                    self.typeExpression(0)


                self.state = 516
                self.symbol()
                self.state = 517
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 519
                    self.typeExpression(0)


                self.state = 522
                self.symbol()
                self.state = 523
                self.match(NyarParser.Keywords)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.typeExpression(0)


                self.state = 528
                self.symbol()
                self.state = 529
                self.match(NyarParser.Nullable)
                self.state = 530
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)
        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.match(NyarParser.Val)
                self.state = 535
                self.assignLHS()
                self.state = 536
                self.assignRHS()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.match(NyarParser.Var)
                self.state = 539
                self.assignLHS()
                self.state = 540
                self.assignRHS()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.match(NyarParser.Def)
                self.state = 543
                self.assignLHS()
                self.state = 544
                self.assignRHS()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 546
                self.match(NyarParser.Def)
                self.state = 547
                self.symbol()
                self.state = 548
                self.match(NyarParser.T__2)
                self.state = 549
                self.parameter()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 550
                    self.match(NyarParser.Comma)
                    self.state = 551
                    self.parameter()
                    self.state = 556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 557
                self.match(NyarParser.T__3)
                self.state = 559
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 558
                    self.typeSuffix()


                self.state = 561
                self.assignRHS()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 563
                self.symbol()
                self.state = 564
                self.match(NyarParser.T__2)
                self.state = 565
                self.parameter()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 566
                    self.match(NyarParser.Comma)
                    self.state = 567
                    self.parameter()
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 573
                self.match(NyarParser.T__3)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Meets or _la==NyarParser.Tilde:
                    self.state = 574
                    self.typeSuffix()


                self.state = 577
                self.match(NyarParser.Set)
                self.state = 578
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 580
                self.assignLHS()
                self.state = 581
                self.match(NyarParser.Set)
                self.state = 582
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 584
                self.assignLHS()
                self.state = 585
                self.match(NyarParser.Flexible)
                self.state = 586
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 588
                self.assignLHS()
                self.state = 589
                self.match(NyarParser.Delay)
                self.state = 590
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.symbol()
                self.state = 596
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 595
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 598
                self.maybeSymbol()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 599
                    self.match(NyarParser.Comma)
                    self.state = 600
                    self.maybeSymbol()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 606
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 607
                self.symbols()
                self.state = 608
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RHSStatementContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)
        def End(self):
            return self.getToken(NyarParser.End, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSStatement" ):
                listener.enterRHSStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSStatement" ):
                listener.exitRHSStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSStatement" ):
                return visitor.visitRHSStatement(self)
            else:
                return visitor.visitChildren(self)


    class RHSTupleContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSTuple" ):
                listener.enterRHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSTuple" ):
                listener.exitRHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSTuple" ):
                return visitor.visitRHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class RHSExpressionContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSExpression" ):
                listener.enterRHSExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSExpression" ):
                listener.exitRHSExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSExpression" ):
                return visitor.visitRHSExpression(self)
            else:
                return visitor.visitChildren(self)



    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                localctx = NyarParser.RHSExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = NyarParser.RHSExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(NyarParser.Colon)
                self.state = 614
                self.expression(0)
                pass

            elif la_ == 3:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.match(NyarParser.T__0)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 616
                    self.statement()
                    self.state = 621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 622
                self.match(NyarParser.T__1)
                pass

            elif la_ == 4:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 623
                self.match(NyarParser.Colon)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 624
                    self.statement()
                    self.state = 629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 630
                self.match(NyarParser.End)
                pass

            elif la_ == 5:
                localctx = NyarParser.RHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 631
                self.expressionStatement()
                pass

            elif la_ == 6:
                localctx = NyarParser.RHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 632
                self.match(NyarParser.T__2)
                self.state = 633
                self.expressionStatement()
                self.state = 634
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 636
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.head = None # Token

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_maybeSymbol)
        try:
            self.state = 644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.Identifier, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.symbols()
                self.state = 641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 640
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Tilde]:
                self.enterOuterAlt(localctx, 2)
                self.state = 643
                localctx.head = self.match(NyarParser.Tilde)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def symbolName(self):
            return self.getTypedRuleContext(NyarParser.SymbolNameContext,0)


        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Dot)
            else:
                return self.getToken(NyarParser.Dot, i)

        def getRuleIndex(self):
            return NyarParser.RULE_symbols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbols" ):
                listener.enterSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbols" ):
                listener.exitSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbols" ):
                return visitor.visitSymbols(self)
            else:
                return visitor.visitChildren(self)




    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_symbols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 646
                self.symbol()
                pass

            elif la_ == 2:
                self.state = 647
                self.symbolName()
                pass


            self.state = 654
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 650
                    self.match(NyarParser.Dot)
                    self.state = 651
                    self.symbol() 
                self.state = 656
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Name)
            else:
                return self.getToken(NyarParser.Name, i)

        def getRuleIndex(self):
            return NyarParser.RULE_symbolName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolName" ):
                listener.enterSymbolName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolName" ):
                listener.exitSymbolName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolName" ):
                return visitor.visitSymbolName(self)
            else:
                return visitor.visitChildren(self)




    def symbolName(self):

        localctx = NyarParser.SymbolNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_symbolName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.symbol()
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 658
                    self.match(NyarParser.Name)
                    self.state = 659
                    self.symbol() 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_data)
        try:
            self.state = 673
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 667
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 668
                self.symbols()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 669
                self.list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 670
                self.dict()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 671
                self.index()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 672
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_number)
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 677
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.match(NyarParser.Binary)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 679
                self.match(NyarParser.Octal)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 680
                self.match(NyarParser.Hexadecimal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.match(NyarParser.T__4)
                self.state = 684
                self.indexValid()
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 685
                        self.match(NyarParser.Comma)


                    self.state = 688
                    self.indexValid()
                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 694
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.match(NyarParser.T__6)
                self.state = 697
                self.indexValid()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 698
                        self.match(NyarParser.Comma)


                    self.state = 701
                    self.indexValid()
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 707
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(NyarParser.T__0)
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.StringEscapeBlock - 18)) | (1 << (NyarParser.StringEscapeSingle - 18)) | (1 << (NyarParser.StringLiteral - 18)) | (1 << (NyarParser.StringEmpty - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                self.state = 712
                self.keyValue()


            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 715
                    self.match(NyarParser.Comma)
                    self.state = 716
                    self.keyValue() 
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 722
                self.match(NyarParser.Comma)


            self.state = 725
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            localctx.key = self.keyValid()
            self.state = 728
            self.match(NyarParser.Colon)
            self.state = 729
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_keyValid)
        try:
            self.state = 734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.Identifier, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteral, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 733
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(NyarParser.T__4)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 737
                self.element()


            self.state = 744
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 740
                    self.match(NyarParser.Comma)
                    self.state = 741
                    self.element() 
                self.state = 746
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 747
                self.match(NyarParser.Comma)


            self.state = 750
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_element)
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexValid" ):
                listener.enterIndexValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexValid" ):
                listener.exitIndexValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexValid" ):
                return visitor.visitIndexValid(self)
            else:
                return visitor.visitChildren(self)




    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexValid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.Identifier, NyarParser.Symbol]:
                self.state = 757
                self.symbol()
                pass
            elif token in [NyarParser.Integer]:
                self.state = 758
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Colon:
                self.state = 761
                self.match(NyarParser.Colon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_branchStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Match(self):
            return self.getToken(NyarParser.Match, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatement" ):
                listener.enterMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatement" ):
                listener.exitMatchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatement" ):
                return visitor.visitMatchStatement(self)
            else:
                return visitor.visitChildren(self)


    class SwitchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)

        def switchController(self):
            return self.getTypedRuleContext(NyarParser.SwitchControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)


    class IfNestedContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)

        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)

        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)

        def Then(self):
            return self.getToken(NyarParser.Then, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)


    class IfSingleContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)

        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)

        def Then(self):
            return self.getToken(NyarParser.Then, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)



    def branchStatement(self):

        localctx = NyarParser.BranchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_branchStatement)
        self._la = 0 # Token type
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                localctx = NyarParser.IfSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.match(NyarParser.If)
                self.state = 765
                self.condition()
                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 766
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 769
                self.blockNonEnd()
                self.state = 771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 770
                    self.else()


                pass

            elif la_ == 2:
                localctx = NyarParser.IfNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.match(NyarParser.If)
                self.state = 774
                self.condition()
                self.state = 776
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 775
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 778
                self.blockNonEnd()
                self.state = 782
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 779
                        self.elseIf() 
                    self.state = 784
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.else()


                pass

            elif la_ == 3:
                localctx = NyarParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.match(NyarParser.Switch)
                self.state = 789
                self.condition()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Break))) != 0):
                    self.state = 790
                    self.switchController()


                self.state = 793
                self.switchBody()
                pass

            elif la_ == 4:
                localctx = NyarParser.MatchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.match(NyarParser.Match)
                self.state = 796
                self.condition()
                self.state = 797
                self.matchBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse" ):
                listener.enterElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse" ):
                listener.exitElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse" ):
                return visitor.visitElse(self)
            else:
                return visitor.visitChildren(self)




    def else(self):

        localctx = NyarParser.ElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_else)
        try:
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.match(NyarParser.Else)
                self.state = 802
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(NyarParser.Else)
                self.state = 804
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_elseIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(NyarParser.Else)
            self.state = 808
            self.match(NyarParser.If)
            self.state = 809
            self.condition()
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 810
                _la = self._input.LA(1)
                if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 813
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_caseBody)
        try:
            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.match(NyarParser.Case)
                self.state = 816
                self.expression(0)
                self.state = 817
                self.match(NyarParser.Colon)
                self.state = 818
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.expression(0)
                self.state = 821
                self.match(NyarParser.Rule)
                self.state = 822
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(NyarParser.Default)
                self.state = 825
                self.match(NyarParser.Colon)
                self.state = 826
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 827
                self.match(NyarParser.Case)
                self.state = 828
                self.match(NyarParser.Times)
                self.state = 829
                self.match(NyarParser.Colon)
                self.state = 830
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 831
                self.match(NyarParser.Times)
                self.state = 832
                self.match(NyarParser.Rule)
                self.state = 833
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self.match(NyarParser.T__0)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 837
                    self.caseBody()
                    self.state = 842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 843
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 844
                self.match(NyarParser.Colon)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.Tilde))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Decimal - 66)) | (1 << (NyarParser.DecimalBad - 66)) | (1 << (NyarParser.Binary - 66)) | (1 << (NyarParser.Octal - 66)) | (1 << (NyarParser.Hexadecimal - 66)) | (1 << (NyarParser.Integer - 66)) | (1 << (NyarParser.StringEscapeBlock - 66)) | (1 << (NyarParser.StringEscapeSingle - 66)) | (1 << (NyarParser.StringLiteral - 66)) | (1 << (NyarParser.StringEmpty - 66)) | (1 << (NyarParser.Identifier - 66)) | (1 << (NyarParser.Symbol - 66)) | (1 << (NyarParser.True - 66)) | (1 << (NyarParser.False - 66)) | (1 << (NyarParser.Null - 66)) | (1 << (NyarParser.Nothing - 66)) | (1 << (NyarParser.Sharp - 66)) | (1 << (NyarParser.Increase - 66)) | (1 << (NyarParser.BitNot - 66)) | (1 << (NyarParser.LogicNot - 66)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 845
                    self.caseBody()
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 851
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchController" ):
                listener.enterSwitchController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchController" ):
                listener.exitSwitchController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchController" ):
                return visitor.visitSwitchController(self)
            else:
                return visitor.visitChildren(self)




    def switchController(self):

        localctx = NyarParser.SwitchControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_switchController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Break))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchBody)
        try:
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 857
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_condition)
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(NyarParser.T__2)
                self.state = 862
                self.expression(0)
                self.state = 863
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def finalProduction(self):
            return self.getTypedRuleContext(NyarParser.FinalProductionContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(NyarParser.CatchProductionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tryStatement)
        try:
            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                self.match(NyarParser.Try)
                self.state = 868
                self.blockStatement()
                self.state = 869
                self.finalProduction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(NyarParser.Try)
                self.state = 872
                self.blockStatement()

                self.state = 873
                self.catchProduction()
                self.state = 875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 874
                    self.finalProduction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(NyarParser.Catch, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchProduction" ):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)




    def catchProduction(self):

        localctx = NyarParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_catchProduction)
        try:
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.match(NyarParser.Catch)
                self.state = 880
                self.symbol()
                self.state = 881
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.match(NyarParser.Catch)
                self.state = 884
                self.match(NyarParser.T__2)
                self.state = 885
                self.symbol()
                self.state = 886
                self.match(NyarParser.T__3)
                self.state = 887
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_finalProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalProduction" ):
                listener.enterFinalProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalProduction" ):
                listener.exitFinalProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinalProduction" ):
                return visitor.visitFinalProduction(self)
            else:
                return visitor.visitChildren(self)




    def finalProduction(self):

        localctx = NyarParser.FinalProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_finalProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(NyarParser.Final)
            self.state = 892
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_loopStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)


    class DoLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(NyarParser.Do, 0)
        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoop" ):
                listener.enterDoLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoop" ):
                listener.exitDoLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoLoop" ):
                return visitor.visitDoLoop(self)
            else:
                return visitor.visitChildren(self)


    class WhileLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(NyarParser.While, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileLoop" ):
                return visitor.visitWhileLoop(self)
            else:
                return visitor.visitChildren(self)



    def loopStatement(self):

        localctx = NyarParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 894
                self.match(NyarParser.For)
                self.state = 895
                self.match(NyarParser.T__2)
                self.state = 896
                self.expressionStatement()
                self.state = 897
                self.match(NyarParser.T__3)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 898
                    self.loopController()


                self.state = 901
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.match(NyarParser.For)
                self.state = 904
                self.identifier()
                self.state = 905
                self.match(NyarParser.In)
                self.state = 906
                self.expression(0)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 907
                    self.loopController()


                self.state = 910
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.WhileLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(NyarParser.While)
                self.state = 913
                self.condition()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 914
                    self.loopController()


                self.state = 917
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.DoLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.match(NyarParser.Do)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 920
                    self.loopController()


                self.state = 923
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(NyarParser.Async, 0)

        def Lazy(self):
            return self.getToken(NyarParser.Lazy, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_loopController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopController" ):
                listener.enterLoopController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopController" ):
                listener.exitLoopController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopController" ):
                return visitor.visitLoopController(self)
            else:
                return visitor.visitChildren(self)




    def loopController(self):

        localctx = NyarParser.LoopControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_loopController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            _la = self._input.LA(1)
            if not(_la==NyarParser.Async or _la==NyarParser.Lazy):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtends(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendsContext,0)


        def classMeets(self):
            return self.getTypedRuleContext(NyarParser.ClassMeetsContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(NyarParser.Trait)
            self.state = 929
            self.symbol()
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extends:
                self.state = 930
                self.classExtends()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Meets or _la==NyarParser.Tilde:
                self.state = 933
                self.classMeets()


            self.state = 936
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtends(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendsContext,0)


        def classMeets(self):
            return self.getTypedRuleContext(NyarParser.ClassMeetsContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(NyarParser.Class)
            self.state = 939
            self.symbol()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extends:
                self.state = 940
                self.classExtends()


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Meets or _la==NyarParser.Tilde:
                self.state = 943
                self.classMeets()


            self.state = 946
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(NyarParser.Extends, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtends

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtends" ):
                listener.enterClassExtends(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtends" ):
                listener.exitClassExtends(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtends" ):
                return visitor.visitClassExtends(self)
            else:
                return visitor.visitChildren(self)




    def classExtends(self):

        localctx = NyarParser.ClassExtendsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_classExtends)
        self._la = 0 # Token type
        try:
            self.state = 965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extends]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.match(NyarParser.Extends)
                self.state = 950 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 949
                    self.symbol()
                    self.state = 952 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.match(NyarParser.T__2)
                self.state = 955
                self.symbol()
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 956
                    self.match(NyarParser.Comma)
                    self.state = 957
                    self.symbol()
                    self.state = 962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 963
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMeetsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Meets(self):
            return self.getToken(NyarParser.Meets, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classMeets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMeets" ):
                listener.enterClassMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMeets" ):
                listener.exitClassMeets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMeets" ):
                return visitor.visitClassMeets(self)
            else:
                return visitor.visitChildren(self)




    def classMeets(self):

        localctx = NyarParser.ClassMeetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_classMeets)
        self._la = 0 # Token type
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.match(NyarParser.Meets)
                self.state = 969 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 968
                    self.symbol()
                    self.state = 971 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.match(NyarParser.Tilde)
                self.state = 974
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 975
                self.match(NyarParser.Tilde)
                self.state = 976
                self.match(NyarParser.T__2)
                self.state = 977
                self.symbol()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 978
                    self.match(NyarParser.Comma)
                    self.state = 979
                    self.symbol()
                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 985
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = NyarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.match(NyarParser.T__0)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or _la==NyarParser.Identifier or _la==NyarParser.Symbol:
                    self.state = 990
                    self.classExpression()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 997
                self.match(NyarParser.Colon)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or _la==NyarParser.Identifier or _la==NyarParser.Symbol:
                    self.state = 998
                    self.classExpression()
                    self.state = 1003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1004
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1005
                self.match(NyarParser.Colon)
                self.state = 1006
                self.classExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(NyarParser.IdentifierContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1010
                        self.identifier() 
                    self.state = 1015
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 1016
                self.symbol()
                self.state = 1018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1017
                    self.typeSuffix()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1023
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1020
                        self.identifier() 
                    self.state = 1025
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                self.state = 1026
                self.symbol()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Meets or _la==NyarParser.Tilde:
                    self.state = 1027
                    self.typeSuffix()


                self.state = 1030
                self.blockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1035
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1032
                        self.identifier() 
                    self.state = 1037
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                self.state = 1038
                self.symbol()
                self.state = 1039
                self.match(NyarParser.T__2)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 1040
                    self.parameter()
                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1046
                self.match(NyarParser.T__3)
                self.state = 1048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1047
                    self.typeSuffix()


                self.state = 1052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1050
                    self.match(NyarParser.Colon)
                    self.state = 1051
                    self.match(NyarParser.Pass)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1057
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1054
                        self.identifier() 
                    self.state = 1059
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

                self.state = 1060
                self.symbol()
                self.state = 1061
                self.match(NyarParser.T__2)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.Identifier - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 1062
                    self.parameter()
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self.match(NyarParser.T__3)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Meets or _la==NyarParser.Tilde:
                    self.state = 1069
                    self.typeSuffix()


                self.state = 1072
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1077
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteral(self):
            return self.getToken(NyarParser.StringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_string)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1083
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1084
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteral]:
                localctx = NyarParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1085
                self.match(NyarParser.StringLiteral)
                pass
            elif token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1086
                self.match(NyarParser.StringEmpty)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def switchController(self):
            return self.getTypedRuleContext(NyarParser.SwitchControllerContext,0)


        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_controller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterController" ):
                listener.enterController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitController" ):
                listener.exitController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitController" ):
                return visitor.visitController(self)
            else:
                return visitor.visitChildren(self)




    def controller(self):

        localctx = NyarParser.ControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_controller)
        try:
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.flowController()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.switchController()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.loopController()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (NyarParser.True - 81)) | (1 << (NyarParser.False - 81)) | (1 << (NyarParser.Null - 81)) | (1 << (NyarParser.Nothing - 81)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controller(self):
            return self.getTypedRuleContext(NyarParser.ControllerContext,0)


        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = NyarParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_identifier)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.controller()
                pass
            elif token in [NyarParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.match(NyarParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controller(self):
            return self.getTypedRuleContext(NyarParser.ControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_symbol)
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.controller()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1102
                self.match(NyarParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # Token

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_solt)
        try:
            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.match(NyarParser.Sharp)
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1106
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.match(NyarParser.Sharp)
                self.state = 1110
                localctx.id = self.match(NyarParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (NyarParser.Increase - 102)) | (1 << (NyarParser.BitNot - 102)) | (1 << (NyarParser.LogicNot - 102)) | (1 << (NyarParser.Reciprocal - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            _la = self._input.LA(1)
            if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (NyarParser.Increase - 102)) | (1 << (NyarParser.Decrease - 102)) | (1 << (NyarParser.DoubleBang - 102)) | (1 << (NyarParser.BitNot - 102)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (NyarParser.Exponent - 72)) | (1 << (NyarParser.Base - 72)) | (1 << (NyarParser.LeftShift - 72)) | (1 << (NyarParser.RightShift - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (NyarParser.LogicXor - 104)) | (1 << (NyarParser.LogicOr - 104)) | (1 << (NyarParser.LogicAnd - 104)) | (1 << (NyarParser.LogicNot - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1126
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1123
                _la = self._input.LA(1)
                if not(((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (NyarParser.Equivalent - 117)) | (1 << (NyarParser.NotEquivalent - 117)) | (1 << (NyarParser.Equal - 117)) | (1 << (NyarParser.NotEqual - 117)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                _la = self._input.LA(1)
                if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (NyarParser.LessEqual - 96)) | (1 << (NyarParser.Less - 96)) | (1 << (NyarParser.GraterEqual - 96)) | (1 << (NyarParser.Grater - 96)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1125
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (NyarParser.Multiply - 107)) | (1 << (NyarParser.Kronecker - 107)) | (1 << (NyarParser.TensorProduct - 107)) | (1 << (NyarParser.Remainder - 107)) | (1 << (NyarParser.Divide - 107)) | (1 << (NyarParser.Mod - 107)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (NyarParser.LeftShift - 95)) | (1 << (NyarParser.RightShift - 95)) | (1 << (NyarParser.Increase - 95)) | (1 << (NyarParser.Map - 95)) | (1 << (NyarParser.Concat - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.expression_sempred
        self._predicates[20] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




