# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008f")
        buf.write("\u040e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\3\2\7\2\u0090\n\2\f\2\16\2\u0093\13")
        buf.write("\2\3\2\3\2\3\3\3\3\3\3\5\3\u009a\n\3\3\3\3\3\5\3\u009e")
        buf.write("\n\3\3\3\3\3\5\3\u00a2\n\3\3\3\3\3\5\3\u00a6\n\3\3\3\3")
        buf.write("\3\5\3\u00aa\n\3\3\3\3\3\5\3\u00ae\n\3\3\3\3\3\5\3\u00b2")
        buf.write("\n\3\3\3\3\3\5\3\u00b6\n\3\3\3\3\3\5\3\u00ba\n\3\3\3\3")
        buf.write("\3\5\3\u00be\n\3\3\3\3\3\5\3\u00c2\n\3\5\3\u00c4\n\3\3")
        buf.write("\4\3\4\5\4\u00c8\n\4\3\5\3\5\3\6\3\6\3\6\5\6\u00cf\n\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00d9\n\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\5\6\u00e0\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\5\6\u00eb\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u00f2\n")
        buf.write("\7\3\b\3\b\3\b\3\b\7\b\u00f8\n\b\f\b\16\b\u00fb\13\b\3")
        buf.write("\b\3\b\3\t\3\t\3\n\3\n\7\n\u0103\n\n\f\n\16\n\u0106\13")
        buf.write("\n\3\n\3\n\3\n\7\n\u010b\n\n\f\n\16\n\u010e\13\n\3\n\3")
        buf.write("\n\3\n\5\n\u0113\n\n\3\13\3\13\3\13\7\13\u0118\n\13\f")
        buf.write("\13\16\13\u011b\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u012c\n\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7")
        buf.write("\f\u0159\n\f\f\f\16\f\u015c\13\f\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u016a\n\r\3\16\3\16\3\16")
        buf.write("\5\16\u016f\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\5\16\u0179\n\16\3\16\3\16\5\16\u017d\n\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u0184\n\17\3\20\3\20\3\20\5\20\u0189")
        buf.write("\n\20\3\21\3\21\5\21\u018d\n\21\3\22\3\22\3\22\3\22\3")
        buf.write("\22\7\22\u0194\n\22\f\22\16\22\u0197\13\22\5\22\u0199")
        buf.write("\n\22\3\22\3\22\3\23\3\23\3\23\5\23\u01a0\n\23\3\24\3")
        buf.write("\24\3\24\3\24\3\24\5\24\u01a7\n\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u01ae\n\24\5\24\u01b0\n\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\7\25\u01b8\n\25\f\25\16\25\u01bb\13\25\5")
        buf.write("\25\u01bd\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u01c6\n\25\f\25\16\25\u01c9\13\25\5\25\u01cb\n\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u01d1\n\25\3\25\5\25\u01d4\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\7\25\u01dc\n\25\f\25\16\25")
        buf.write("\u01df\13\25\3\26\3\26\3\26\3\27\5\27\u01e5\n\27\3\27")
        buf.write("\3\27\5\27\u01e9\n\27\3\27\3\27\3\27\3\27\5\27\u01ef\n")
        buf.write("\27\3\27\3\27\3\27\3\27\5\27\u01f5\n\27\3\27\3\27\3\27")
        buf.write("\5\27\u01fa\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\7\30\u020e\n\30\f\30\16\30\u0211\13\30\3\30\3\30\5\30")
        buf.write("\u0215\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u021e")
        buf.write("\n\30\f\30\16\30\u0221\13\30\3\30\3\30\5\30\u0225\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u0236\n\30\3\31\3\31\5\31\u023a")
        buf.write("\n\31\3\31\3\31\3\31\7\31\u023f\n\31\f\31\16\31\u0242")
        buf.write("\13\31\3\31\3\31\3\31\3\31\5\31\u0248\n\31\3\32\3\32\3")
        buf.write("\32\3\32\7\32\u024e\n\32\f\32\16\32\u0251\13\32\3\32\3")
        buf.write("\32\3\32\7\32\u0256\n\32\f\32\16\32\u0259\13\32\3\32\3")
        buf.write("\32\3\32\5\32\u025e\n\32\3\33\3\33\5\33\u0262\n\33\3\33")
        buf.write("\5\33\u0265\n\33\3\34\3\34\5\34\u0269\n\34\3\34\3\34\7")
        buf.write("\34\u026d\n\34\f\34\16\34\u0270\13\34\3\35\3\35\3\35\7")
        buf.write("\35\u0275\n\35\f\35\16\35\u0278\13\35\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\5\36\u0282\n\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u028a\n\37\3 \3 \3 \5 \u028f\n \3")
        buf.write(" \7 \u0292\n \f \16 \u0295\13 \3 \3 \3 \3 \3 \5 \u029c")
        buf.write("\n \3 \7 \u029f\n \f \16 \u02a2\13 \3 \3 \5 \u02a6\n ")
        buf.write("\3!\3!\3!\3!\7!\u02ac\n!\f!\16!\u02af\13!\5!\u02b1\n!")
        buf.write("\3!\5!\u02b4\n!\3!\3!\3\"\3\"\3\"\3\"\3#\3#\3#\5#\u02bf")
        buf.write("\n#\3$\3$\5$\u02c3\n$\3$\5$\u02c6\n$\3$\3$\3%\3%\5%\u02cc")
        buf.write("\n%\3%\7%\u02cf\n%\f%\16%\u02d2\13%\3&\3&\3&\5&\u02d7")
        buf.write("\n&\3\'\3\'\5\'\u02db\n\'\3\'\5\'\u02de\n\'\3(\3(\3(\3")
        buf.write("(\5(\u02e4\n(\3(\3(\3(\3(\7(\u02ea\n(\f(\16(\u02ed\13")
        buf.write("(\3(\5(\u02f0\n(\3(\3(\5(\u02f4\n(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\5(\u02fd\n(\3)\3)\3)\3)\3)\5)\u0304\n)\3*\3*\3*\3+\3")
        buf.write("+\3+\3+\5+\u030d\n+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0319")
        buf.write("\n,\5,\u031b\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0327")
        buf.write("\n-\3.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\5/\u033e\n/\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\61\3\61\3\61\5\61\u0349\n\61\3\61\5\61\u034c\n\61\3")
        buf.write("\61\3\61\3\62\3\62\3\62\5\62\u0353\n\62\3\62\5\62\u0356")
        buf.write("\n\62\3\62\3\62\3\63\3\63\6\63\u035c\n\63\r\63\16\63\u035d")
        buf.write("\3\63\3\63\3\63\3\63\7\63\u0364\n\63\f\63\16\63\u0367")
        buf.write("\13\63\3\63\3\63\5\63\u036b\n\63\3\64\3\64\6\64\u036f")
        buf.write("\n\64\r\64\16\64\u0370\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\7\64\u037a\n\64\f\64\16\64\u037d\13\64\3\64\3\64\5")
        buf.write("\64\u0381\n\64\3\65\3\65\7\65\u0385\n\65\f\65\16\65\u0388")
        buf.write("\13\65\3\65\3\65\3\65\7\65\u038d\n\65\f\65\16\65\u0390")
        buf.write("\13\65\3\65\3\65\3\65\5\65\u0395\n\65\3\66\3\66\7\66\u0399")
        buf.write("\n\66\f\66\16\66\u039c\13\66\3\66\3\66\5\66\u03a0\n\66")
        buf.write("\3\66\7\66\u03a3\n\66\f\66\16\66\u03a6\13\66\3\66\3\66")
        buf.write("\5\66\u03aa\n\66\3\66\3\66\3\66\7\66\u03af\n\66\f\66\16")
        buf.write("\66\u03b2\13\66\3\66\3\66\3\66\7\66\u03b7\n\66\f\66\16")
        buf.write("\66\u03ba\13\66\3\66\3\66\5\66\u03be\n\66\3\66\3\66\5")
        buf.write("\66\u03c2\n\66\3\66\7\66\u03c5\n\66\f\66\16\66\u03c8\13")
        buf.write("\66\3\66\3\66\3\66\7\66\u03cd\n\66\f\66\16\66\u03d0\13")
        buf.write("\66\3\66\3\66\5\66\u03d4\n\66\3\66\3\66\5\66\u03d8\n\66")
        buf.write("\3\67\3\67\3\67\38\38\39\39\3:\3:\5:\u03e3\n:\3:\3:\3")
        buf.write(":\3:\5:\u03e9\n:\3;\3;\3<\3<\3=\3=\3>\3>\5>\u03f3\n>\3")
        buf.write(">\3>\5>\u03f7\n>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3")
        buf.write("D\5D\u0406\nD\3E\3E\3F\3F\3G\3G\3G\2\4\26(H\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\2\31\3\2\21\22\4\2\25\25\31\31\4\2")
        buf.write("\27\30\32\32\4\2\21\21\37\37\3\2\35\36\4\299==\3\2\25")
        buf.write("\26\4\2>>CC\3\2>?\3\2LO\4\2\"%JJ\3\2JK\3\2*+\6\2*+aaz")
        buf.write("{\u0088\u0088\6\2aaddxxzz\5\2DEZZ^^\5\2ccvw{{\4\2pryy")
        buf.write("\4\2[\\_`\3\2vw\4\2\22\22\u0087\u0087\7\2\21\21fhjjll")
        buf.write("oo\7\2ZZ^^aakktt\2\u0492\2\u0091\3\2\2\2\4\u00c3\3\2\2")
        buf.write("\2\6\u00c7\3\2\2\2\b\u00c9\3\2\2\2\n\u00ea\3\2\2\2\f\u00f1")
        buf.write("\3\2\2\2\16\u00f3\3\2\2\2\20\u00fe\3\2\2\2\22\u0112\3")
        buf.write("\2\2\2\24\u0114\3\2\2\2\26\u012b\3\2\2\2\30\u0169\3\2")
        buf.write("\2\2\32\u017c\3\2\2\2\34\u0183\3\2\2\2\36\u0188\3\2\2")
        buf.write("\2 \u018c\3\2\2\2\"\u018e\3\2\2\2$\u019f\3\2\2\2&\u01af")
        buf.write("\3\2\2\2(\u01d3\3\2\2\2*\u01e0\3\2\2\2,\u01f9\3\2\2\2")
        buf.write(".\u0235\3\2\2\2\60\u0247\3\2\2\2\62\u025d\3\2\2\2\64\u0264")
        buf.write("\3\2\2\2\66\u0268\3\2\2\28\u0271\3\2\2\2:\u0281\3\2\2")
        buf.write("\2<\u0289\3\2\2\2>\u02a5\3\2\2\2@\u02a7\3\2\2\2B\u02b7")
        buf.write("\3\2\2\2D\u02be\3\2\2\2F\u02c0\3\2\2\2H\u02c9\3\2\2\2")
        buf.write("J\u02d6\3\2\2\2L\u02da\3\2\2\2N\u02fc\3\2\2\2P\u0303\3")
        buf.write("\2\2\2R\u0305\3\2\2\2T\u0308\3\2\2\2V\u031a\3\2\2\2X\u0326")
        buf.write("\3\2\2\2Z\u0328\3\2\2\2\\\u033d\3\2\2\2^\u033f\3\2\2\2")
        buf.write("`\u0345\3\2\2\2b\u034f\3\2\2\2d\u036a\3\2\2\2f\u0380\3")
        buf.write("\2\2\2h\u0394\3\2\2\2j\u03d7\3\2\2\2l\u03d9\3\2\2\2n\u03dc")
        buf.write("\3\2\2\2p\u03de\3\2\2\2r\u03e8\3\2\2\2t\u03ea\3\2\2\2")
        buf.write("v\u03ec\3\2\2\2x\u03ee\3\2\2\2z\u03f6\3\2\2\2|\u03f8\3")
        buf.write("\2\2\2~\u03fa\3\2\2\2\u0080\u03fc\3\2\2\2\u0082\u03fe")
        buf.write("\3\2\2\2\u0084\u0400\3\2\2\2\u0086\u0405\3\2\2\2\u0088")
        buf.write("\u0407\3\2\2\2\u008a\u0409\3\2\2\2\u008c\u040b\3\2\2\2")
        buf.write("\u008e\u0090\5\4\3\2\u008f\u008e\3\2\2\2\u0090\u0093\3")
        buf.write("\2\2\2\u0091\u008f\3\2\2\2\u0091\u0092\3\2\2\2\u0092\u0094")
        buf.write("\3\2\2\2\u0093\u0091\3\2\2\2\u0094\u0095\7\2\2\3\u0095")
        buf.write("\3\3\2\2\2\u0096\u00c4\5\6\4\2\u0097\u0099\5\n\6\2\u0098")
        buf.write("\u009a\5\b\5\2\u0099\u0098\3\2\2\2\u0099\u009a\3\2\2\2")
        buf.write("\u009a\u00c4\3\2\2\2\u009b\u009d\5&\24\2\u009c\u009e\5")
        buf.write("\b\5\2\u009d\u009c\3\2\2\2\u009d\u009e\3\2\2\2\u009e\u00c4")
        buf.write("\3\2\2\2\u009f\u00a1\5.\30\2\u00a0\u00a2\5\b\5\2\u00a1")
        buf.write("\u00a0\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00c4\3\2\2\2")
        buf.write("\u00a3\u00a5\5N(\2\u00a4\u00a6\5\b\5\2\u00a5\u00a4\3\2")
        buf.write("\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00c4\3\2\2\2\u00a7\u00a9")
        buf.write("\5\\/\2\u00a8\u00aa\5\b\5\2\u00a9\u00a8\3\2\2\2\u00a9")
        buf.write("\u00aa\3\2\2\2\u00aa\u00c4\3\2\2\2\u00ab\u00ad\5V,\2\u00ac")
        buf.write("\u00ae\5\b\5\2\u00ad\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2")
        buf.write("\u00ae\u00c4\3\2\2\2\u00af\u00b1\5`\61\2\u00b0\u00b2\5")
        buf.write("\b\5\2\u00b1\u00b0\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00c4")
        buf.write("\3\2\2\2\u00b3\u00b5\5b\62\2\u00b4\u00b6\5\b\5\2\u00b5")
        buf.write("\u00b4\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00c4\3\2\2\2")
        buf.write("\u00b7\u00b9\5\26\f\2\u00b8\u00ba\5\b\5\2\u00b9\u00b8")
        buf.write("\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00c4\3\2\2\2\u00bb")
        buf.write("\u00bd\5\30\r\2\u00bc\u00be\5\b\5\2\u00bd\u00bc\3\2\2")
        buf.write("\2\u00bd\u00be\3\2\2\2\u00be\u00c4\3\2\2\2\u00bf\u00c1")
        buf.write("\5:\36\2\u00c0\u00c2\5\b\5\2\u00c1\u00c0\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c4\3\2\2\2\u00c3\u0096\3\2\2\2")
        buf.write("\u00c3\u0097\3\2\2\2\u00c3\u009b\3\2\2\2\u00c3\u009f\3")
        buf.write("\2\2\2\u00c3\u00a3\3\2\2\2\u00c3\u00a7\3\2\2\2\u00c3\u00ab")
        buf.write("\3\2\2\2\u00c3\u00af\3\2\2\2\u00c3\u00b3\3\2\2\2\u00c3")
        buf.write("\u00b7\3\2\2\2\u00c3\u00bb\3\2\2\2\u00c3\u00bf\3\2\2\2")
        buf.write("\u00c4\5\3\2\2\2\u00c5\u00c8\5\b\5\2\u00c6\u00c8\7\13")
        buf.write("\2\2\u00c7\u00c5\3\2\2\2\u00c7\u00c6\3\2\2\2\u00c8\7\3")
        buf.write("\2\2\2\u00c9\u00ca\7\f\2\2\u00ca\t\3\2\2\2\u00cb\u00cc")
        buf.write("\7\17\2\2\u00cc\u00ce\5\f\7\2\u00cd\u00cf\5\20\t\2\u00ce")
        buf.write("\u00cd\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00eb\3\2\2\2")
        buf.write("\u00d0\u00d1\7\17\2\2\u00d1\u00d2\5\f\7\2\u00d2\u00d3")
        buf.write("\7\r\2\2\u00d3\u00d4\5v<\2\u00d4\u00eb\3\2\2\2\u00d5\u00d6")
        buf.write("\7\17\2\2\u00d6\u00d8\5\f\7\2\u00d7\u00d9\7\16\2\2\u00d8")
        buf.write("\u00d7\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\3\2\2\2")
        buf.write("\u00da\u00db\5v<\2\u00db\u00eb\3\2\2\2\u00dc\u00dd\7\17")
        buf.write("\2\2\u00dd\u00df\5\f\7\2\u00de\u00e0\7\16\2\2\u00df\u00de")
        buf.write("\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1")
        buf.write("\u00e2\5\16\b\2\u00e2\u00eb\3\2\2\2\u00e3\u00e4\7\17\2")
        buf.write("\2\u00e4\u00e5\5\f\7\2\u00e5\u00e6\7Q\2\2\u00e6\u00e7")
        buf.write("\5\16\b\2\u00e7\u00eb\3\2\2\2\u00e8\u00e9\7\17\2\2\u00e9")
        buf.write("\u00eb\5@!\2\u00ea\u00cb\3\2\2\2\u00ea\u00d0\3\2\2\2\u00ea")
        buf.write("\u00d5\3\2\2\2\u00ea\u00dc\3\2\2\2\u00ea\u00e3\3\2\2\2")
        buf.write("\u00ea\u00e8\3\2\2\2\u00eb\13\3\2\2\2\u00ec\u00f2\5x=")
        buf.write("\2\u00ed\u00ee\5x=\2\u00ee\u00ef\7Q\2\2\u00ef\u00f0\5")
        buf.write("x=\2\u00f0\u00f2\3\2\2\2\u00f1\u00ec\3\2\2\2\u00f1\u00ed")
        buf.write("\3\2\2\2\u00f2\r\3\2\2\2\u00f3\u00f4\7\3\2\2\u00f4\u00f9")
        buf.write("\5v<\2\u00f5\u00f6\7\33\2\2\u00f6\u00f8\5v<\2\u00f7\u00f5")
        buf.write("\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fc\u00fd\7\4\2\2\u00fd\17\3\2\2\2\u00fe\u00ff\t\2")
        buf.write("\2\2\u00ff\21\3\2\2\2\u0100\u0104\7\3\2\2\u0101\u0103")
        buf.write("\5\4\3\2\u0102\u0101\3\2\2\2\u0103\u0106\3\2\2\2\u0104")
        buf.write("\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0107\3\2\2\2")
        buf.write("\u0106\u0104\3\2\2\2\u0107\u0113\7\4\2\2\u0108\u010c\7")
        buf.write("\24\2\2\u0109\u010b\5\4\3\2\u010a\u0109\3\2\2\2\u010b")
        buf.write("\u010e\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2")
        buf.write("\u010d\u010f\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0113\7")
        buf.write("\23\2\2\u0110\u0111\7\24\2\2\u0111\u0113\5\26\f\2\u0112")
        buf.write("\u0100\3\2\2\2\u0112\u0108\3\2\2\2\u0112\u0110\3\2\2\2")
        buf.write("\u0113\23\3\2\2\2\u0114\u0119\5\26\f\2\u0115\u0116\7\33")
        buf.write("\2\2\u0116\u0118\5\26\f\2\u0117\u0115\3\2\2\2\u0118\u011b")
        buf.write("\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a")
        buf.write("\25\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011d\b\f\1\2\u011d")
        buf.write("\u012c\5\"\22\2\u011e\u012c\5.\30\2\u011f\u0120\5v<\2")
        buf.write("\u0120\u0121\5r:\2\u0121\u012c\3\2\2\2\u0122\u0123\5~")
        buf.write("@\2\u0123\u0124\5\26\f\17\u0124\u012c\3\2\2\2\u0125\u012c")
        buf.write("\5:\36\2\u0126\u0127\7\5\2\2\u0127\u0128\5\26\f\2\u0128")
        buf.write("\u0129\7\6\2\2\u0129\u012c\3\2\2\2\u012a\u012c\5\32\16")
        buf.write("\2\u012b\u011c\3\2\2\2\u012b\u011e\3\2\2\2\u012b\u011f")
        buf.write("\3\2\2\2\u012b\u0122\3\2\2\2\u012b\u0125\3\2\2\2\u012b")
        buf.write("\u0126\3\2\2\2\u012b\u012a\3\2\2\2\u012c\u015a\3\2\2\2")
        buf.write("\u012d\u012e\f\r\2\2\u012e\u012f\5\u0082B\2\u012f\u0130")
        buf.write("\5\26\f\16\u0130\u0159\3\2\2\2\u0131\u0132\f\f\2\2\u0132")
        buf.write("\u0133\5\u0084C\2\u0133\u0134\5\26\f\r\u0134\u0159\3\2")
        buf.write("\2\2\u0135\u0136\f\13\2\2\u0136\u0137\5\u0086D\2\u0137")
        buf.write("\u0138\5\26\f\f\u0138\u0159\3\2\2\2\u0139\u013a\f\n\2")
        buf.write("\2\u013a\u013b\5\u0088E\2\u013b\u013c\5\26\f\n\u013c\u0159")
        buf.write("\3\2\2\2\u013d\u013e\f\t\2\2\u013e\u013f\5\u008aF\2\u013f")
        buf.write("\u0140\5\26\f\n\u0140\u0159\3\2\2\2\u0141\u0142\f\b\2")
        buf.write("\2\u0142\u0143\5|?\2\u0143\u0144\5\26\f\t\u0144\u0159")
        buf.write("\3\2\2\2\u0145\u0146\f\7\2\2\u0146\u0147\5\u008cG\2\u0147")
        buf.write("\u0148\5\26\f\b\u0148\u0159\3\2\2\2\u0149\u014a\f\25\2")
        buf.write("\2\u014a\u014b\7Q\2\2\u014b\u0159\5x=\2\u014c\u014d\f")
        buf.write("\24\2\2\u014d\u014e\7Q\2\2\u014e\u0159\5\"\22\2\u014f")
        buf.write("\u0150\f\23\2\2\u0150\u0159\5> \2\u0151\u0152\f\20\2\2")
        buf.write("\u0152\u0153\7\r\2\2\u0153\u0159\5(\25\2\u0154\u0155\f")
        buf.write("\16\2\2\u0155\u0159\5\u0080A\2\u0156\u0157\f\3\2\2\u0157")
        buf.write("\u0159\7\36\2\2\u0158\u012d\3\2\2\2\u0158\u0131\3\2\2")
        buf.write("\2\u0158\u0135\3\2\2\2\u0158\u0139\3\2\2\2\u0158\u013d")
        buf.write("\3\2\2\2\u0158\u0141\3\2\2\2\u0158\u0145\3\2\2\2\u0158")
        buf.write("\u0149\3\2\2\2\u0158\u014c\3\2\2\2\u0158\u014f\3\2\2\2")
        buf.write("\u0158\u0151\3\2\2\2\u0158\u0154\3\2\2\2\u0158\u0156\3")
        buf.write("\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b")
        buf.write("\3\2\2\2\u015b\27\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u015e")
        buf.write("\5\34\17\2\u015e\u015f\7\37\2\2\u015f\u0160\5\34\17\2")
        buf.write("\u0160\u0161\7\24\2\2\u0161\u0162\5\34\17\2\u0162\u016a")
        buf.write("\3\2\2\2\u0163\u0164\5\34\17\2\u0164\u0165\7,\2\2\u0165")
        buf.write("\u0166\5\34\17\2\u0166\u0167\7-\2\2\u0167\u0168\5\34\17")
        buf.write("\2\u0168\u016a\3\2\2\2\u0169\u015d\3\2\2\2\u0169\u0163")
        buf.write("\3\2\2\2\u016a\31\3\2\2\2\u016b\u016e\t\3\2\2\u016c\u016d")
        buf.write("\7\5\2\2\u016d\u016f\7\6\2\2\u016e\u016c\3\2\2\2\u016e")
        buf.write("\u016f\3\2\2\2\u016f\u017d\3\2\2\2\u0170\u0171\t\4\2\2")
        buf.write("\u0171\u017d\5\26\f\2\u0172\u0173\7\26\2\2\u0173\u017d")
        buf.write("\5\24\13\2\u0174\u0175\7\26\2\2\u0175\u0176\7\5\2\2\u0176")
        buf.write("\u0178\5\24\13\2\u0177\u0179\7\33\2\2\u0178\u0177\3\2")
        buf.write("\2\2\u0178\u0179\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017b")
        buf.write("\7\6\2\2\u017b\u017d\3\2\2\2\u017c\u016b\3\2\2\2\u017c")
        buf.write("\u0170\3\2\2\2\u017c\u0172\3\2\2\2\u017c\u0174\3\2\2\2")
        buf.write("\u017d\33\3\2\2\2\u017e\u0184\5\26\f\2\u017f\u0180\7\5")
        buf.write("\2\2\u0180\u0181\5\30\r\2\u0181\u0182\7\6\2\2\u0182\u0184")
        buf.write("\3\2\2\2\u0183\u017e\3\2\2\2\u0183\u017f\3\2\2\2\u0184")
        buf.write("\35\3\2\2\2\u0185\u0189\5x=\2\u0186\u0189\5\66\34\2\u0187")
        buf.write("\u0189\5<\37\2\u0188\u0185\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0187\3\2\2\2\u0189\37\3\2\2\2\u018a\u018d\5\26")
        buf.write("\f\2\u018b\u018d\5\22\n\2\u018c\u018a\3\2\2\2\u018c\u018b")
        buf.write("\3\2\2\2\u018d!\3\2\2\2\u018e\u018f\5\66\34\2\u018f\u0198")
        buf.write("\7\5\2\2\u0190\u0195\5$\23\2\u0191\u0192\7\33\2\2\u0192")
        buf.write("\u0194\5$\23\2\u0193\u0191\3\2\2\2\u0194\u0197\3\2\2\2")
        buf.write("\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0199\3")
        buf.write("\2\2\2\u0197\u0195\3\2\2\2\u0198\u0190\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\7\6\2\2\u019b")
        buf.write("#\3\2\2\2\u019c\u01a0\5\26\f\2\u019d\u01a0\5\"\22\2\u019e")
        buf.write("\u01a0\5:\36\2\u019f\u019c\3\2\2\2\u019f\u019d\3\2\2\2")
        buf.write("\u019f\u019e\3\2\2\2\u01a0%\3\2\2\2\u01a1\u01a2\7\34\2")
        buf.write("\2\u01a2\u01a3\5x=\2\u01a3\u01a4\7\24\2\2\u01a4\u01a6")
        buf.write("\5(\25\2\u01a5\u01a7\7\23\2\2\u01a6\u01a5\3\2\2\2\u01a6")
        buf.write("\u01a7\3\2\2\2\u01a7\u01b0\3\2\2\2\u01a8\u01a9\7\34\2")
        buf.write("\2\u01a9\u01aa\5x=\2\u01aa\u01ab\7\3\2\2\u01ab\u01ad\5")
        buf.write("(\25\2\u01ac\u01ae\7\4\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u01a1\3\2\2\2\u01af")
        buf.write("\u01a8\3\2\2\2\u01b0\'\3\2\2\2\u01b1\u01b2\b\25\1\2\u01b2")
        buf.write("\u01b3\5\66\34\2\u01b3\u01bc\7\5\2\2\u01b4\u01b9\5(\25")
        buf.write("\2\u01b5\u01b6\7\33\2\2\u01b6\u01b8\5(\25\2\u01b7\u01b5")
        buf.write("\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2")
        buf.write("\u01bc\u01b4\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01be\3")
        buf.write("\2\2\2\u01be\u01bf\7\6\2\2\u01bf\u01d4\3\2\2\2\u01c0\u01c1")
        buf.write("\5\66\34\2\u01c1\u01ca\7\\\2\2\u01c2\u01c7\5(\25\2\u01c3")
        buf.write("\u01c4\7\33\2\2\u01c4\u01c6\5(\25\2\u01c5\u01c3\3\2\2")
        buf.write("\2\u01c6\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01ca")
        buf.write("\u01c2\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01cd\7`\2\2\u01cd\u01d4\3\2\2\2\u01ce\u01d0\5")
        buf.write("\66\34\2\u01cf\u01d1\t\5\2\2\u01d0\u01cf\3\2\2\2\u01d0")
        buf.write("\u01d1\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d4\5p9\2\u01d3")
        buf.write("\u01b1\3\2\2\2\u01d3\u01c0\3\2\2\2\u01d3\u01ce\3\2\2\2")
        buf.write("\u01d3\u01d2\3\2\2\2\u01d4\u01dd\3\2\2\2\u01d5\u01d6\f")
        buf.write("\6\2\2\u01d6\u01d7\t\6\2\2\u01d7\u01dc\5(\25\7\u01d8\u01d9")
        buf.write("\f\5\2\2\u01d9\u01da\7\7\2\2\u01da\u01dc\7\b\2\2\u01db")
        buf.write("\u01d5\3\2\2\2\u01db\u01d8\3\2\2\2\u01dc\u01df\3\2\2\2")
        buf.write("\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de)\3\2\2")
        buf.write("\2\u01df\u01dd\3\2\2\2\u01e0\u01e1\t\7\2\2\u01e1\u01e2")
        buf.write("\5(\25\2\u01e2+\3\2\2\2\u01e3\u01e5\5(\25\2\u01e4\u01e3")
        buf.write("\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01fa\5x=\2\u01e7\u01e9\5(\25\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\5x=\2\u01eb")
        buf.write("\u01ec\7\21\2\2\u01ec\u01fa\3\2\2\2\u01ed\u01ef\5(\25")
        buf.write("\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0")
        buf.write("\3\2\2\2\u01f0\u01f1\5x=\2\u01f1\u01f2\7 \2\2\u01f2\u01fa")
        buf.write("\3\2\2\2\u01f3\u01f5\5(\25\2\u01f4\u01f3\3\2\2\2\u01f4")
        buf.write("\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7\5x=\2\u01f7")
        buf.write("\u01f8\7\37\2\2\u01f8\u01fa\3\2\2\2\u01f9\u01e4\3\2\2")
        buf.write("\2\u01f9\u01e8\3\2\2\2\u01f9\u01ee\3\2\2\2\u01f9\u01f4")
        buf.write("\3\2\2\2\u01fa-\3\2\2\2\u01fb\u01fc\7\"\2\2\u01fc\u01fd")
        buf.write("\5\60\31\2\u01fd\u01fe\5\62\32\2\u01fe\u0236\3\2\2\2\u01ff")
        buf.write("\u0200\7#\2\2\u0200\u0201\5\60\31\2\u0201\u0202\5\62\32")
        buf.write("\2\u0202\u0236\3\2\2\2\u0203\u0204\7%\2\2\u0204\u0205")
        buf.write("\5\60\31\2\u0205\u0206\5\62\32\2\u0206\u0236\3\2\2\2\u0207")
        buf.write("\u0208\7%\2\2\u0208\u0209\5x=\2\u0209\u020a\7\5\2\2\u020a")
        buf.write("\u020f\5,\27\2\u020b\u020c\7\33\2\2\u020c\u020e\5,\27")
        buf.write("\2\u020d\u020b\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d")
        buf.write("\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2\u0211")
        buf.write("\u020f\3\2\2\2\u0212\u0214\7\6\2\2\u0213\u0215\5*\26\2")
        buf.write("\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0216\3")
        buf.write("\2\2\2\u0216\u0217\5\62\32\2\u0217\u0236\3\2\2\2\u0218")
        buf.write("\u0219\5x=\2\u0219\u021a\7\5\2\2\u021a\u021f\5,\27\2\u021b")
        buf.write("\u021c\7\33\2\2\u021c\u021e\5,\27\2\u021d\u021b\3\2\2")
        buf.write("\2\u021e\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220")
        buf.write("\3\2\2\2\u0220\u0222\3\2\2\2\u0221\u021f\3\2\2\2\u0222")
        buf.write("\u0224\7\6\2\2\u0223\u0225\5*\26\2\u0224\u0223\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0227\7")
        buf.write("&\2\2\u0227\u0228\5\62\32\2\u0228\u0236\3\2\2\2\u0229")
        buf.write("\u022a\5\60\31\2\u022a\u022b\7&\2\2\u022b\u022c\5\62\32")
        buf.write("\2\u022c\u0236\3\2\2\2\u022d\u022e\5\60\31\2\u022e\u022f")
        buf.write("\7\'\2\2\u022f\u0230\5\62\32\2\u0230\u0236\3\2\2\2\u0231")
        buf.write("\u0232\5\60\31\2\u0232\u0233\7)\2\2\u0233\u0234\5\62\32")
        buf.write("\2\u0234\u0236\3\2\2\2\u0235\u01fb\3\2\2\2\u0235\u01ff")
        buf.write("\3\2\2\2\u0235\u0203\3\2\2\2\u0235\u0207\3\2\2\2\u0235")
        buf.write("\u0218\3\2\2\2\u0235\u0229\3\2\2\2\u0235\u022d\3\2\2\2")
        buf.write("\u0235\u0231\3\2\2\2\u0236/\3\2\2\2\u0237\u0239\5x=\2")
        buf.write("\u0238\u023a\5*\26\2\u0239\u0238\3\2\2\2\u0239\u023a\3")
        buf.write("\2\2\2\u023a\u0248\3\2\2\2\u023b\u0240\5\64\33\2\u023c")
        buf.write("\u023d\7\33\2\2\u023d\u023f\5\64\33\2\u023e\u023c\3\2")
        buf.write("\2\2\u023f\u0242\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241")
        buf.write("\3\2\2\2\u0241\u0248\3\2\2\2\u0242\u0240\3\2\2\2\u0243")
        buf.write("\u0248\5\66\34\2\u0244\u0245\5\66\34\2\u0245\u0246\5>")
        buf.write(" \2\u0246\u0248\3\2\2\2\u0247\u0237\3\2\2\2\u0247\u023b")
        buf.write("\3\2\2\2\u0247\u0243\3\2\2\2\u0247\u0244\3\2\2\2\u0248")
        buf.write("\61\3\2\2\2\u0249\u025e\5\26\f\2\u024a\u025e\5:\36\2\u024b")
        buf.write("\u024f\7\3\2\2\u024c\u024e\5\4\3\2\u024d\u024c\3\2\2\2")
        buf.write("\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3")
        buf.write("\2\2\2\u0250\u0252\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u025e")
        buf.write("\7\4\2\2\u0253\u0257\7\24\2\2\u0254\u0256\5\4\3\2\u0255")
        buf.write("\u0254\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u0257\3")
        buf.write("\2\2\2\u025a\u025e\7\23\2\2\u025b\u025e\5\24\13\2\u025c")
        buf.write("\u025e\5\4\3\2\u025d\u0249\3\2\2\2\u025d\u024a\3\2\2\2")
        buf.write("\u025d\u024b\3\2\2\2\u025d\u0253\3\2\2\2\u025d\u025b\3")
        buf.write("\2\2\2\u025d\u025c\3\2\2\2\u025e\63\3\2\2\2\u025f\u0261")
        buf.write("\5\66\34\2\u0260\u0262\5*\26\2\u0261\u0260\3\2\2\2\u0261")
        buf.write("\u0262\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0265\79\2\2")
        buf.write("\u0264\u025f\3\2\2\2\u0264\u0263\3\2\2\2\u0265\65\3\2")
        buf.write("\2\2\u0266\u0269\5x=\2\u0267\u0269\58\35\2\u0268\u0266")
        buf.write("\3\2\2\2\u0268\u0267\3\2\2\2\u0269\u026e\3\2\2\2\u026a")
        buf.write("\u026b\7Q\2\2\u026b\u026d\5x=\2\u026c\u026a\3\2\2\2\u026d")
        buf.write("\u0270\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026f\3\2\2\2")
        buf.write("\u026f\67\3\2\2\2\u0270\u026e\3\2\2\2\u0271\u0276\5x=")
        buf.write("\2\u0272\u0273\7(\2\2\u0273\u0275\5x=\2\u0274\u0272\3")
        buf.write("\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u02779\3\2\2\2\u0278\u0276\3\2\2\2\u0279\u0282")
        buf.write("\5<\37\2\u027a\u0282\5r:\2\u027b\u0282\5t;\2\u027c\u0282")
        buf.write("\5\66\34\2\u027d\u0282\5F$\2\u027e\u0282\5@!\2\u027f\u0282")
        buf.write("\5> \2\u0280\u0282\5z>\2\u0281\u0279\3\2\2\2\u0281\u027a")
        buf.write("\3\2\2\2\u0281\u027b\3\2\2\2\u0281\u027c\3\2\2\2\u0281")
        buf.write("\u027d\3\2\2\2\u0281\u027e\3\2\2\2\u0281\u027f\3\2\2\2")
        buf.write("\u0281\u0280\3\2\2\2\u0282;\3\2\2\2\u0283\u028a\5l\67")
        buf.write("\2\u0284\u028a\5n8\2\u0285\u028a\5p9\2\u0286\u028a\7@")
        buf.write("\2\2\u0287\u028a\7A\2\2\u0288\u028a\7B\2\2\u0289\u0283")
        buf.write("\3\2\2\2\u0289\u0284\3\2\2\2\u0289\u0285\3\2\2\2\u0289")
        buf.write("\u0286\3\2\2\2\u0289\u0287\3\2\2\2\u0289\u0288\3\2\2\2")
        buf.write("\u028a=\3\2\2\2\u028b\u028c\7\7\2\2\u028c\u0293\5L\'\2")
        buf.write("\u028d\u028f\7\33\2\2\u028e\u028d\3\2\2\2\u028e\u028f")
        buf.write("\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0292\5L\'\2\u0291")
        buf.write("\u028e\3\2\2\2\u0292\u0295\3\2\2\2\u0293\u0291\3\2\2\2")
        buf.write("\u0293\u0294\3\2\2\2\u0294\u0296\3\2\2\2\u0295\u0293\3")
        buf.write("\2\2\2\u0296\u0297\7\b\2\2\u0297\u02a6\3\2\2\2\u0298\u0299")
        buf.write("\7\t\2\2\u0299\u02a0\5L\'\2\u029a\u029c\7\33\2\2\u029b")
        buf.write("\u029a\3\2\2\2\u029b\u029c\3\2\2\2\u029c\u029d\3\2\2\2")
        buf.write("\u029d\u029f\5L\'\2\u029e\u029b\3\2\2\2\u029f\u02a2\3")
        buf.write("\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a3")
        buf.write("\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3\u02a4\7\t\2\2\u02a4")
        buf.write("\u02a6\3\2\2\2\u02a5\u028b\3\2\2\2\u02a5\u0298\3\2\2\2")
        buf.write("\u02a6?\3\2\2\2\u02a7\u02b0\7\3\2\2\u02a8\u02ad\5B\"\2")
        buf.write("\u02a9\u02aa\7\33\2\2\u02aa\u02ac\5B\"\2\u02ab\u02a9\3")
        buf.write("\2\2\2\u02ac\u02af\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae")
        buf.write("\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0")
        buf.write("\u02a8\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3\3\2\2\2")
        buf.write("\u02b2\u02b4\7\33\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\7\4\2\2\u02b6")
        buf.write("A\3\2\2\2\u02b7\u02b8\5D#\2\u02b8\u02b9\7\24\2\2\u02b9")
        buf.write("\u02ba\5J&\2\u02baC\3\2\2\2\u02bb\u02bf\5p9\2\u02bc\u02bf")
        buf.write("\5x=\2\u02bd\u02bf\5r:\2\u02be\u02bb\3\2\2\2\u02be\u02bc")
        buf.write("\3\2\2\2\u02be\u02bd\3\2\2\2\u02bfE\3\2\2\2\u02c0\u02c2")
        buf.write("\7\7\2\2\u02c1\u02c3\5H%\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3")
        buf.write("\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c6\7\33\2\2\u02c5")
        buf.write("\u02c4\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2")
        buf.write("\u02c7\u02c8\7\b\2\2\u02c8G\3\2\2\2\u02c9\u02d0\5J&\2")
        buf.write("\u02ca\u02cc\7\33\2\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\5J&\2\u02ce\u02cb")
        buf.write("\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1I\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d3")
        buf.write("\u02d7\5:\36\2\u02d4\u02d7\5\26\f\2\u02d5\u02d7\5\22\n")
        buf.write("\2\u02d6\u02d3\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d5")
        buf.write("\3\2\2\2\u02d7K\3\2\2\2\u02d8\u02db\5x=\2\u02d9\u02db")
        buf.write("\5p9\2\u02da\u02d8\3\2\2\2\u02da\u02d9\3\2\2\2\u02db\u02dd")
        buf.write("\3\2\2\2\u02dc\u02de\7\24\2\2\u02dd\u02dc\3\2\2\2\u02dd")
        buf.write("\u02de\3\2\2\2\u02deM\3\2\2\2\u02df\u02e0\7,\2\2\u02e0")
        buf.write("\u02e1\5P)\2\u02e1\u02e3\5 \21\2\u02e2\u02e4\5R*\2\u02e3")
        buf.write("\u02e2\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u02fd\3\2\2\2")
        buf.write("\u02e5\u02e6\7,\2\2\u02e6\u02e7\5P)\2\u02e7\u02eb\5 \21")
        buf.write("\2\u02e8\u02ea\5T+\2\u02e9\u02e8\3\2\2\2\u02ea\u02ed\3")
        buf.write("\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ef")
        buf.write("\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ee\u02f0\5R*\2\u02ef\u02ee")
        buf.write("\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02fd\3\2\2\2\u02f1")
        buf.write("\u02f3\7/\2\2\u02f2\u02f4\t\b\2\2\u02f3\u02f2\3\2\2\2")
        buf.write("\u02f3\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\5")
        buf.write("P)\2\u02f6\u02f7\5 \21\2\u02f7\u02fd\3\2\2\2\u02f8\u02f9")
        buf.write("\7\60\2\2\u02f9\u02fa\5P)\2\u02fa\u02fb\5 \21\2\u02fb")
        buf.write("\u02fd\3\2\2\2\u02fc\u02df\3\2\2\2\u02fc\u02e5\3\2\2\2")
        buf.write("\u02fc\u02f1\3\2\2\2\u02fc\u02f8\3\2\2\2\u02fdO\3\2\2")
        buf.write("\2\u02fe\u0304\5\26\f\2\u02ff\u0300\7\5\2\2\u0300\u0301")
        buf.write("\5\26\f\2\u0301\u0302\7\6\2\2\u0302\u0304\3\2\2\2\u0303")
        buf.write("\u02fe\3\2\2\2\u0303\u02ff\3\2\2\2\u0304Q\3\2\2\2\u0305")
        buf.write("\u0306\7-\2\2\u0306\u0307\5 \21\2\u0307S\3\2\2\2\u0308")
        buf.write("\u0309\7-\2\2\u0309\u030a\7,\2\2\u030a\u030c\5P)\2\u030b")
        buf.write("\u030d\7.\2\2\u030c\u030b\3\2\2\2\u030c\u030d\3\2\2\2")
        buf.write("\u030d\u030e\3\2\2\2\u030e\u030f\5 \21\2\u030fU\3\2\2")
        buf.write("\2\u0310\u0311\7\61\2\2\u0311\u0312\5\22\n\2\u0312\u0313")
        buf.write("\5Z.\2\u0313\u031b\3\2\2\2\u0314\u0315\7\61\2\2\u0315")
        buf.write("\u0316\5\22\n\2\u0316\u0318\5X-\2\u0317\u0319\5Z.\2\u0318")
        buf.write("\u0317\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2")
        buf.write("\u031a\u0310\3\2\2\2\u031a\u0314\3\2\2\2\u031bW\3\2\2")
        buf.write("\2\u031c\u031d\7\62\2\2\u031d\u031e\5x=\2\u031e\u031f")
        buf.write("\5\22\n\2\u031f\u0327\3\2\2\2\u0320\u0321\7\62\2\2\u0321")
        buf.write("\u0322\7\5\2\2\u0322\u0323\5x=\2\u0323\u0324\7\6\2\2\u0324")
        buf.write("\u0325\5\22\n\2\u0325\u0327\3\2\2\2\u0326\u031c\3\2\2")
        buf.write("\2\u0326\u0320\3\2\2\2\u0327Y\3\2\2\2\u0328\u0329\7\63")
        buf.write("\2\2\u0329\u032a\5\22\n\2\u032a[\3\2\2\2\u032b\u032c\7")
        buf.write("\65\2\2\u032c\u032d\7\5\2\2\u032d\u032e\5^\60\2\u032e")
        buf.write("\u032f\7\6\2\2\u032f\u0330\5 \21\2\u0330\u033e\3\2\2\2")
        buf.write("\u0331\u0332\7\65\2\2\u0332\u0333\5v<\2\u0333\u0334\7")
        buf.write("\64\2\2\u0334\u0335\5\26\f\2\u0335\u0336\5 \21\2\u0336")
        buf.write("\u033e\3\2\2\2\u0337\u0338\7\66\2\2\u0338\u0339\5P)\2")
        buf.write("\u0339\u033a\5 \21\2\u033a\u033e\3\2\2\2\u033b\u033c\7")
        buf.write("\67\2\2\u033c\u033e\5 \21\2\u033d\u032b\3\2\2\2\u033d")
        buf.write("\u0331\3\2\2\2\u033d\u0337\3\2\2\2\u033d\u033b\3\2\2\2")
        buf.write("\u033e]\3\2\2\2\u033f\u0340\5\26\f\2\u0340\u0341\7\33")
        buf.write("\2\2\u0341\u0342\5\26\f\2\u0342\u0343\7\33\2\2\u0343\u0344")
        buf.write("\5\26\f\2\u0344_\3\2\2\2\u0345\u0346\7:\2\2\u0346\u0348")
        buf.write("\5x=\2\u0347\u0349\5d\63\2\u0348\u0347\3\2\2\2\u0348\u0349")
        buf.write("\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u034c\5f\64\2\u034b")
        buf.write("\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3\2\2\2")
        buf.write("\u034d\u034e\5h\65\2\u034ea\3\2\2\2\u034f\u0350\7;\2\2")
        buf.write("\u0350\u0352\5x=\2\u0351\u0353\5d\63\2\u0352\u0351\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353\u0355\3\2\2\2\u0354\u0356")
        buf.write("\5f\64\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356")
        buf.write("\u0357\3\2\2\2\u0357\u0358\5h\65\2\u0358c\3\2\2\2\u0359")
        buf.write("\u035b\7<\2\2\u035a\u035c\5x=\2\u035b\u035a\3\2\2\2\u035c")
        buf.write("\u035d\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u036b\3\2\2\2\u035f\u0360\7\5\2\2\u0360\u0365\5")
        buf.write("x=\2\u0361\u0362\7\33\2\2\u0362\u0364\5x=\2\u0363\u0361")
        buf.write("\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365")
        buf.write("\u0366\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0365\3\2\2\2")
        buf.write("\u0368\u0369\7\6\2\2\u0369\u036b\3\2\2\2\u036a\u0359\3")
        buf.write("\2\2\2\u036a\u035f\3\2\2\2\u036be\3\2\2\2\u036c\u036e")
        buf.write("\7=\2\2\u036d\u036f\5x=\2\u036e\u036d\3\2\2\2\u036f\u0370")
        buf.write("\3\2\2\2\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0381\3\2\2\2\u0372\u0373\79\2\2\u0373\u0381\5x=\2\u0374")
        buf.write("\u0375\79\2\2\u0375\u0376\7\5\2\2\u0376\u037b\5x=\2\u0377")
        buf.write("\u0378\7\33\2\2\u0378\u037a\5x=\2\u0379\u0377\3\2\2\2")
        buf.write("\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3")
        buf.write("\2\2\2\u037c\u037e\3\2\2\2\u037d\u037b\3\2\2\2\u037e\u037f")
        buf.write("\7\6\2\2\u037f\u0381\3\2\2\2\u0380\u036c\3\2\2\2\u0380")
        buf.write("\u0372\3\2\2\2\u0380\u0374\3\2\2\2\u0381g\3\2\2\2\u0382")
        buf.write("\u0386\7\3\2\2\u0383\u0385\5j\66\2\u0384\u0383\3\2\2\2")
        buf.write("\u0385\u0388\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3")
        buf.write("\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386\3\2\2\2\u0389\u0395")
        buf.write("\7\4\2\2\u038a\u038e\7\24\2\2\u038b\u038d\5j\66\2\u038c")
        buf.write("\u038b\3\2\2\2\u038d\u0390\3\2\2\2\u038e\u038c\3\2\2\2")
        buf.write("\u038e\u038f\3\2\2\2\u038f\u0391\3\2\2\2\u0390\u038e\3")
        buf.write("\2\2\2\u0391\u0395\7\23\2\2\u0392\u0393\7\24\2\2\u0393")
        buf.write("\u0395\5j\66\2\u0394\u0382\3\2\2\2\u0394\u038a\3\2\2\2")
        buf.write("\u0394\u0392\3\2\2\2\u0395i\3\2\2\2\u0396\u03d8\5\6\4")
        buf.write("\2\u0397\u0399\5v<\2\u0398\u0397\3\2\2\2\u0399\u039c\3")
        buf.write("\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039d")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u039f\5x=\2\u039e\u03a0")
        buf.write("\5*\26\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0")
        buf.write("\u03d8\3\2\2\2\u03a1\u03a3\5v<\2\u03a2\u03a1\3\2\2\2\u03a3")
        buf.write("\u03a6\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2")
        buf.write("\u03a5\u03a7\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a7\u03a9\5")
        buf.write("x=\2\u03a8\u03aa\5*\26\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\5\22\n\2\u03ac")
        buf.write("\u03d8\3\2\2\2\u03ad\u03af\5v<\2\u03ae\u03ad\3\2\2\2\u03af")
        buf.write("\u03b2\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2")
        buf.write("\u03b1\u03b3\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b3\u03b4\5")
        buf.write("x=\2\u03b4\u03b8\7\5\2\2\u03b5\u03b7\5,\27\2\u03b6\u03b5")
        buf.write("\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2")
        buf.write("\u03bb\u03bd\7\6\2\2\u03bc\u03be\5*\26\2\u03bd\u03bc\3")
        buf.write("\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03c0")
        buf.write("\7\24\2\2\u03c0\u03c2\7\25\2\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03d8\3\2\2\2\u03c3\u03c5\5v<\2\u03c4")
        buf.write("\u03c3\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2")
        buf.write("\u03c6\u03c7\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3")
        buf.write("\2\2\2\u03c9\u03ca\5x=\2\u03ca\u03ce\7\5\2\2\u03cb\u03cd")
        buf.write("\5,\27\2\u03cc\u03cb\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce")
        buf.write("\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d1\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d1\u03d3\7\6\2\2\u03d2\u03d4\5")
        buf.write("*\26\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5")
        buf.write("\3\2\2\2\u03d5\u03d6\5\22\n\2\u03d6\u03d8\3\2\2\2\u03d7")
        buf.write("\u0396\3\2\2\2\u03d7\u039a\3\2\2\2\u03d7\u03a4\3\2\2\2")
        buf.write("\u03d7\u03b0\3\2\2\2\u03d7\u03c6\3\2\2\2\u03d8k\3\2\2")
        buf.write("\2\u03d9\u03da\t\t\2\2\u03da\u03db\5v<\2\u03dbm\3\2\2")
        buf.write("\2\u03dc\u03dd\t\n\2\2\u03ddo\3\2\2\2\u03de\u03df\7C\2")
        buf.write("\2\u03dfq\3\2\2\2\u03e0\u03e2\7\n\2\2\u03e1\u03e3\13\2")
        buf.write("\2\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4")
        buf.write("\3\2\2\2\u03e4\u03e9\7\n\2\2\u03e5\u03e9\7F\2\2\u03e6")
        buf.write("\u03e9\7G\2\2\u03e7\u03e9\7H\2\2\u03e8\u03e0\3\2\2\2\u03e8")
        buf.write("\u03e5\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e7\3\2\2\2")
        buf.write("\u03e9s\3\2\2\2\u03ea\u03eb\t\13\2\2\u03ebu\3\2\2\2\u03ec")
        buf.write("\u03ed\t\f\2\2\u03edw\3\2\2\2\u03ee\u03ef\t\r\2\2\u03ef")
        buf.write("y\3\2\2\2\u03f0\u03f2\7P\2\2\u03f1\u03f3\7C\2\2\u03f2")
        buf.write("\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f7\3\2\2\2")
        buf.write("\u03f4\u03f5\7P\2\2\u03f5\u03f7\7J\2\2\u03f6\u03f0\3\2")
        buf.write("\2\2\u03f6\u03f4\3\2\2\2\u03f7{\3\2\2\2\u03f8\u03f9\t")
        buf.write("\16\2\2\u03f9}\3\2\2\2\u03fa\u03fb\t\17\2\2\u03fb\177")
        buf.write("\3\2\2\2\u03fc\u03fd\t\20\2\2\u03fd\u0081\3\2\2\2\u03fe")
        buf.write("\u03ff\t\21\2\2\u03ff\u0083\3\2\2\2\u0400\u0401\t\22\2")
        buf.write("\2\u0401\u0085\3\2\2\2\u0402\u0406\t\23\2\2\u0403\u0406")
        buf.write("\t\24\2\2\u0404\u0406\t\25\2\2\u0405\u0402\3\2\2\2\u0405")
        buf.write("\u0403\3\2\2\2\u0405\u0404\3\2\2\2\u0406\u0087\3\2\2\2")
        buf.write("\u0407\u0408\t\26\2\2\u0408\u0089\3\2\2\2\u0409\u040a")
        buf.write("\t\27\2\2\u040a\u008b\3\2\2\2\u040b\u040c\t\30\2\2\u040c")
        buf.write("\u008d\3\2\2\2\u0082\u0091\u0099\u009d\u00a1\u00a5\u00a9")
        buf.write("\u00ad\u00b1\u00b5\u00b9\u00bd\u00c1\u00c3\u00c7\u00ce")
        buf.write("\u00d8\u00df\u00ea\u00f1\u00f9\u0104\u010c\u0112\u0119")
        buf.write("\u012b\u0158\u015a\u0169\u016e\u0178\u017c\u0183\u0188")
        buf.write("\u018c\u0195\u0198\u019f\u01a6\u01ad\u01af\u01b9\u01bc")
        buf.write("\u01c7\u01ca\u01d0\u01d3\u01db\u01dd\u01e4\u01e8\u01ee")
        buf.write("\u01f4\u01f9\u020f\u0214\u021f\u0224\u0235\u0239\u0240")
        buf.write("\u0247\u024f\u0257\u025d\u0261\u0264\u0268\u026e\u0276")
        buf.write("\u0281\u0289\u028e\u0293\u029b\u02a0\u02a5\u02ad\u02b0")
        buf.write("\u02b3\u02be\u02c2\u02c5\u02cb\u02d0\u02d6\u02da\u02dd")
        buf.write("\u02e3\u02eb\u02ef\u02f3\u02fc\u0303\u030c\u0318\u031a")
        buf.write("\u0326\u033d\u0348\u034b\u0352\u0355\u035d\u0365\u036a")
        buf.write("\u0370\u037b\u0380\u0386\u038e\u0394\u039a\u039f\u03a4")
        buf.write("\u03a9\u03b0\u03b8\u03bd\u03c1\u03c6\u03ce\u03d3\u03d7")
        buf.write("\u03e2\u03e8\u03f2\u03f6\u0405")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "'\u951B\uFFFD'", "';;'", "<INVALID>", 
                     "'as'", "'with'", "'using'", "'instance'", "'*'", "'^'", 
                     "'end'", "<INVALID>", "'pass'", "'return'", "'yield'", 
                     "'await'", "'break'", "'throw'", "<INVALID>", "'type'", 
                     "'|'", "'&'", "'?'", "'**'", "'^^'", "'val'", "'var'", 
                     "'let'", "'def'", "'='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "'if'", "'else'", "'then'", 
                     "'switch'", "'match'", "'try'", "'catch'", "'final'", 
                     "'in'", "'for'", "'while'", "'do'", "'macro'", "'~'", 
                     "'trait'", "'class'", "'extends'", "'meets'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'*^'", "'/^'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\'", "<INVALID>", "<INVALID>", "'true'", 
                     "'false'", "'null'", "'nothing'", "'#'", "'.'", "'_'", 
                     "'#!'", "'%%%'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<='", "'<'", 
                     "<INVALID>", "<INVALID>", "'>='", "'>'", "'++'", "'+='", 
                     "'\u2295'", "'--'", "'-='", "'\u00D7'", "'\u2297'", 
                     "'\u2299'", "'//@'", "'//'", "'/@'", "'/'", "'\u00F7'", 
                     "'%%'", "'%'", "'==='", "'=!='", "'=='", "<INVALID>", 
                     "'~~'", "'~='", "<INVALID>", "<INVALID>", "'!!'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':?'", "'$'", "'@@@'", "'@@'", 
                     "'@='", "'@'", "'`'", "'\u00B4'", "'''", "'...'", "'\u22C5'", 
                     "'\u221A'", "'\u215F'", "'\u00B0'", "'\u1D40'", "'\u1D34'", 
                     "'\u00A7'", "'\u00B6'", "'\u00A4'", "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Separate", "Semicolon", "As", "With", 
                      "Using", "Instance", "Times", "Power", "End", "Colon", 
                      "Pass", "Return", "Yield", "Await", "Break", "Throw", 
                      "Comma", "Type", "BitOr", "BitAnd", "Nullable", "Keywords", 
                      "BaseInput", "Val", "Var", "Let", "Def", "Set", "Vable", 
                      "Name", "Delay", "Plus", "Minus", "If", "Else", "Then", 
                      "Switch", "Match", "Try", "Catch", "Final", "In", 
                      "For", "While", "Do", "Macro", "Tilde", "Trait", "Class", 
                      "Extends", "Meets", "Decimal", "DecimalBad", "Binary", 
                      "Octal", "Hexadecimal", "Integer", "Exponent", "Base", 
                      "StringEscapeBlock", "StringEscapeSingle", "StringEmpty", 
                      "Escape", "Identifier", "Symbol", "True", "False", 
                      "Null", "Nothing", "Sharp", "Dot", "Underline", "Shebang", 
                      "Comment", "LineComment", "PartComment", "NewLine", 
                      "WhiteSpace", "Import", "LeftShift", "LessEqual", 
                      "Less", "Export", "RightShift", "GraterEqual", "Grater", 
                      "Increase", "PlusTo", "LogicXor", "Decrease", "MinusFrom", 
                      "Multiply", "Kronecker", "TensorProduct", "MapAll", 
                      "Remainder", "Map", "Divide", "Quotient", "Output", 
                      "Mod", "Equivalent", "NotEquivalent", "Equal", "Infer", 
                      "Concat", "Destruct", "LogicOr", "LogicAnd", "DoubleBang", 
                      "NotEqual", "BitNot", "LogicNot", "Elvis", "PostfixFunction", 
                      "Curry", "Apply", "LetAssign", "At", "Quote", "Acute", 
                      "Quotation", "Ellipsis", "DOT", "Surd", "Reciprocal", 
                      "Degree", "Transpose", "Hermitian", "Section", "Pilcrow", 
                      "Currency", "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_idTuples = 6
    RULE_importController = 7
    RULE_blockStatement = 8
    RULE_expressionStatement = 9
    RULE_expression = 10
    RULE_trinocular = 11
    RULE_controller = 12
    RULE_tri_or_expr = 13
    RULE_sym_or_num = 14
    RULE_expr_or_block = 15
    RULE_functionCall = 16
    RULE_arguments = 17
    RULE_typeStatement = 18
    RULE_typeExpression = 19
    RULE_typeSuffix = 20
    RULE_parameter = 21
    RULE_assignStatment = 22
    RULE_assignLHS = 23
    RULE_assignRHS = 24
    RULE_maybeSymbol = 25
    RULE_symbols = 26
    RULE_symbolName = 27
    RULE_data = 28
    RULE_number = 29
    RULE_index = 30
    RULE_dict = 31
    RULE_keyValue = 32
    RULE_keyValid = 33
    RULE_list = 34
    RULE_listLine = 35
    RULE_element = 36
    RULE_indexValid = 37
    RULE_branchStatement = 38
    RULE_condition = 39
    RULE_if_else = 40
    RULE_if_elseif = 41
    RULE_tryStatement = 42
    RULE_catchProduction = 43
    RULE_finalProduction = 44
    RULE_loopStatement = 45
    RULE_for_inline = 46
    RULE_traitStatement = 47
    RULE_classStatement = 48
    RULE_classExtends = 49
    RULE_classMeets = 50
    RULE_classBody = 51
    RULE_classExpression = 52
    RULE_complex = 53
    RULE_decimal = 54
    RULE_integer = 55
    RULE_string = 56
    RULE_special = 57
    RULE_identifier = 58
    RULE_symbol = 59
    RULE_solt = 60
    RULE_add_ops = 61
    RULE_pre_ops = 62
    RULE_pst_ops = 63
    RULE_bit_ops = 64
    RULE_lgk_ops = 65
    RULE_cpr_ops = 66
    RULE_pow_ops = 67
    RULE_mul_ops = 68
    RULE_list_ops = 69

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "idTuples", "importController", "blockStatement", 
                   "expressionStatement", "expression", "trinocular", "controller", 
                   "tri_or_expr", "sym_or_num", "expr_or_block", "functionCall", 
                   "arguments", "typeStatement", "typeExpression", "typeSuffix", 
                   "parameter", "assignStatment", "assignLHS", "assignRHS", 
                   "maybeSymbol", "symbols", "symbolName", "data", "number", 
                   "index", "dict", "keyValue", "keyValid", "list", "listLine", 
                   "element", "indexValid", "branchStatement", "condition", 
                   "if_else", "if_elseif", "tryStatement", "catchProduction", 
                   "finalProduction", "loopStatement", "for_inline", "traitStatement", 
                   "classStatement", "classExtends", "classMeets", "classBody", 
                   "classExpression", "complex", "decimal", "integer", "string", 
                   "special", "identifier", "symbol", "solt", "add_ops", 
                   "pre_ops", "pst_ops", "bit_ops", "lgk_ops", "cpr_ops", 
                   "pow_ops", "mul_ops", "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    Separate=9
    Semicolon=10
    As=11
    With=12
    Using=13
    Instance=14
    Times=15
    Power=16
    End=17
    Colon=18
    Pass=19
    Return=20
    Yield=21
    Await=22
    Break=23
    Throw=24
    Comma=25
    Type=26
    BitOr=27
    BitAnd=28
    Nullable=29
    Keywords=30
    BaseInput=31
    Val=32
    Var=33
    Let=34
    Def=35
    Set=36
    Vable=37
    Name=38
    Delay=39
    Plus=40
    Minus=41
    If=42
    Else=43
    Then=44
    Switch=45
    Match=46
    Try=47
    Catch=48
    Final=49
    In=50
    For=51
    While=52
    Do=53
    Macro=54
    Tilde=55
    Trait=56
    Class=57
    Extends=58
    Meets=59
    Decimal=60
    DecimalBad=61
    Binary=62
    Octal=63
    Hexadecimal=64
    Integer=65
    Exponent=66
    Base=67
    StringEscapeBlock=68
    StringEscapeSingle=69
    StringEmpty=70
    Escape=71
    Identifier=72
    Symbol=73
    True=74
    False=75
    Null=76
    Nothing=77
    Sharp=78
    Dot=79
    Underline=80
    Shebang=81
    Comment=82
    LineComment=83
    PartComment=84
    NewLine=85
    WhiteSpace=86
    Import=87
    LeftShift=88
    LessEqual=89
    Less=90
    Export=91
    RightShift=92
    GraterEqual=93
    Grater=94
    Increase=95
    PlusTo=96
    LogicXor=97
    Decrease=98
    MinusFrom=99
    Multiply=100
    Kronecker=101
    TensorProduct=102
    MapAll=103
    Remainder=104
    Map=105
    Divide=106
    Quotient=107
    Output=108
    Mod=109
    Equivalent=110
    NotEquivalent=111
    Equal=112
    Infer=113
    Concat=114
    Destruct=115
    LogicOr=116
    LogicAnd=117
    DoubleBang=118
    NotEqual=119
    BitNot=120
    LogicNot=121
    Elvis=122
    PostfixFunction=123
    Curry=124
    Apply=125
    LetAssign=126
    At=127
    Quote=128
    Acute=129
    Quotation=130
    Ellipsis=131
    DOT=132
    Surd=133
    Reciprocal=134
    Degree=135
    Transpose=136
    Hermitian=137
    Section=138
    Pilcrow=139
    Currency=140
    Element=141

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Tilde) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 140
                self.statement()
                self.state = 145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 146
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def branchStatement(self):
            return self.getTypedRuleContext(NyarParser.BranchStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(NyarParser.LoopStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.importStatement()
                self.state = 151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 150
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 153
                self.typeStatement()
                self.state = 155
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 154
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 157
                self.assignStatment()
                self.state = 159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 158
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 161
                self.branchStatement()
                self.state = 163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 162
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 165
                self.loopStatement()
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 166
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 169
                self.tryStatement()
                self.state = 171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 170
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 173
                self.traitStatement()
                self.state = 175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 174
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 177
                self.classStatement()
                self.state = 179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 178
                    self.eos()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 181
                self.expression(0)
                self.state = 183
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 182
                    self.eos()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 185
                self.trinocular()
                self.state = 187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 186
                    self.eos()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 189
                self.data()
                self.state = 191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 190
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleIncludeContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def importController(self):
            return self.getTypedRuleContext(NyarParser.ImportControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleInclude" ):
                listener.enterModuleInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleInclude" ):
                listener.exitModuleInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleInclude" ):
                return visitor.visitModuleInclude(self)
            else:
                return visitor.visitChildren(self)


    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.alias = None # IdentifierContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 201
                self.match(NyarParser.Using)
                self.state = 202
                localctx.module = self.moduleName()
                self.state = 204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 203
                    self.importController()


                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(NyarParser.Using)
                self.state = 207
                localctx.module = self.moduleName()
                self.state = 208
                self.match(NyarParser.As)
                self.state = 209
                localctx.alias = self.identifier()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 211
                self.match(NyarParser.Using)
                self.state = 212
                localctx.source = self.moduleName()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 213
                    self.match(NyarParser.With)


                self.state = 216
                localctx.name = self.identifier()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 218
                self.match(NyarParser.Using)
                self.state = 219
                localctx.source = self.moduleName()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 220
                    self.match(NyarParser.With)


                self.state = 223
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 225
                self.match(NyarParser.Using)
                self.state = 226
                localctx.source = self.moduleName()
                self.state = 227
                self.match(NyarParser.Dot)
                self.state = 228
                self.idTuples()
                pass

            elif la_ == 6:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 230
                self.match(NyarParser.Using)
                self.state = 231
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        try:
            self.state = 239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 234
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 235
                self.symbol()

                self.state = 236
                self.match(NyarParser.Dot)
                self.state = 237
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(NyarParser.IdentifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(NyarParser.T__0)
            self.state = 242
            self.identifier()
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 243
                self.match(NyarParser.Comma)
                self.state = 244
                self.identifier()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_importController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportController" ):
                listener.enterImportController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportController" ):
                listener.exitImportController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportController" ):
                return visitor.visitImportController(self)
            else:
                return visitor.visitChildren(self)




    def importController(self):

        localctx = NyarParser.ImportControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or _la==NyarParser.Power):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(NyarParser.T__0)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Tilde) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 255
                    self.statement()
                    self.state = 260
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 261
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.match(NyarParser.Colon)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Tilde) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 263
                    self.statement()
                    self.state = 268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 269
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.match(NyarParser.Colon)
                self.state = 271
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.expression(0)
            self.state = 279
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 275
                    self.match(NyarParser.Comma)
                    self.state = 276
                    self.expression(0) 
                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controller(self):
            return self.getTypedRuleContext(NyarParser.ControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # IdentifierContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 283
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 284
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 285
                localctx.left = self.identifier()
                self.state = 286
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 288
                localctx.op = self.pre_ops()
                self.state = 289
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 291
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 292
                self.match(NyarParser.T__2)
                self.state = 293
                self.expression(0)
                self.state = 294
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 296
                self.controller()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 342
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 299
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 300
                        localctx.op = self.bit_ops()
                        self.state = 301
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 303
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 304
                        localctx.op = self.lgk_ops()
                        self.state = 305
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 307
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 308
                        localctx.op = self.cpr_ops()
                        self.state = 309
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 311
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 312
                        localctx.op = self.pow_ops()
                        self.state = 313
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 315
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 316
                        localctx.op = self.mul_ops()
                        self.state = 317
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 319
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 320
                        localctx.op = self.add_ops()
                        self.state = 321
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 323
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 324
                        localctx.op = self.list_ops()
                        self.state = 325
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 327
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 328
                        self.match(NyarParser.Dot)
                        self.state = 329
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 330
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 331
                        self.match(NyarParser.Dot)
                        self.state = 332
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 333
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 334
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 335
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 336
                        self.match(NyarParser.As)
                        self.state = 337
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 338
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 339
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 340
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 341
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TrinocularContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_trinocular

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfElseTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # Tri_or_exprContext
            self.m = None # Tri_or_exprContext
            self.r = None # Tri_or_exprContext
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def Else(self):
            return self.getToken(NyarParser.Else, 0)
        def tri_or_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.Tri_or_exprContext)
            else:
                return self.getTypedRuleContext(NyarParser.Tri_or_exprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseTrinocular" ):
                listener.enterIfElseTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseTrinocular" ):
                listener.exitIfElseTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElseTrinocular" ):
                return visitor.visitIfElseTrinocular(self)
            else:
                return visitor.visitChildren(self)


    class ConditionTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # Tri_or_exprContext
            self.m = None # Tri_or_exprContext
            self.r = None # Tri_or_exprContext
            self.copyFrom(ctx)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)
        def tri_or_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.Tri_or_exprContext)
            else:
                return self.getTypedRuleContext(NyarParser.Tri_or_exprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionTrinocular" ):
                listener.enterConditionTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionTrinocular" ):
                listener.exitConditionTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionTrinocular" ):
                return visitor.visitConditionTrinocular(self)
            else:
                return visitor.visitChildren(self)



    def trinocular(self):

        localctx = NyarParser.TrinocularContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_trinocular)
        try:
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ConditionTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                localctx.l = self.tri_or_expr()
                self.state = 348
                self.match(NyarParser.Nullable)
                self.state = 349
                localctx.m = self.tri_or_expr()
                self.state = 350
                self.match(NyarParser.Colon)
                self.state = 351
                localctx.r = self.tri_or_expr()
                pass

            elif la_ == 2:
                localctx = NyarParser.IfElseTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                localctx.l = self.tri_or_expr()
                self.state = 354
                self.match(NyarParser.If)
                self.state = 355
                localctx.m = self.tri_or_expr()
                self.state = 356
                self.match(NyarParser.Else)
                self.state = 357
                localctx.r = self.tri_or_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterController" ):
                listener.enterController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitController" ):
                listener.exitController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitController" ):
                return visitor.visitController(self)
            else:
                return visitor.visitChildren(self)




    def controller(self):

        localctx = NyarParser.ControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_controller)
        self._la = 0 # Token type
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 364
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 362
                    self.match(NyarParser.T__2)
                    self.state = 363
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 367
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                localctx.state = self.match(NyarParser.Return)
                self.state = 369
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 370
                localctx.state = self.match(NyarParser.Return)
                self.state = 371
                self.match(NyarParser.T__2)
                self.state = 372
                self.expressionStatement()
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 373
                    self.match(NyarParser.Comma)


                self.state = 376
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tri_or_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tri_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTri_or_expr" ):
                listener.enterTri_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTri_or_expr" ):
                listener.exitTri_or_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTri_or_expr" ):
                return visitor.visitTri_or_expr(self)
            else:
                return visitor.visitChildren(self)




    def tri_or_expr(self):

        localctx = NyarParser.Tri_or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_tri_or_expr)
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 381
                self.match(NyarParser.T__2)
                self.state = 382
                self.trinocular()
                self.state = 383
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sym_or_numContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_sym_or_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSym_or_num" ):
                listener.enterSym_or_num(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSym_or_num" ):
                listener.exitSym_or_num(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSym_or_num" ):
                return visitor.visitSym_or_num(self)
            else:
                return visitor.visitChildren(self)




    def sym_or_num(self):

        localctx = NyarParser.Sym_or_numContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_sym_or_num)
        try:
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 387
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.symbols()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 389
                self.number()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_or_blockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_expr_or_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_or_block" ):
                listener.enterExpr_or_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_or_block" ):
                listener.exitExpr_or_block(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_or_block" ):
                return visitor.visitExpr_or_block(self)
            else:
                return visitor.visitChildren(self)




    def expr_or_block(self):

        localctx = NyarParser.Expr_or_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_or_block)
        try:
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.symbols()
            self.state = 397
            self.match(NyarParser.T__2)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Tilde) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 398
                self.arguments()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 399
                    self.match(NyarParser.Comma)
                    self.state = 400
                    self.arguments()
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 408
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arguments)
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 411
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 412
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeStatement)
        try:
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.match(NyarParser.Type)
                self.state = 416
                self.symbol()
                self.state = 417
                self.match(NyarParser.Colon)
                self.state = 418
                self.typeExpression(0)
                self.state = 420
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 419
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.match(NyarParser.Type)
                self.state = 423
                self.symbol()
                self.state = 424
                self.match(NyarParser.T__0)
                self.state = 425
                self.typeExpression(0)
                self.state = 427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 426
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 432
                self.symbols()
                self.state = 433
                self.match(NyarParser.T__2)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (NyarParser.Integer - 65)) | (1 << (NyarParser.Identifier - 65)) | (1 << (NyarParser.Symbol - 65)))) != 0):
                    self.state = 434
                    self.typeExpression(0)
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 435
                        self.match(NyarParser.Comma)
                        self.state = 436
                        self.typeExpression(0)
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 444
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 446
                self.symbols()
                self.state = 447
                self.match(NyarParser.Less)
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (NyarParser.Integer - 65)) | (1 << (NyarParser.Identifier - 65)) | (1 << (NyarParser.Symbol - 65)))) != 0):
                    self.state = 448
                    self.typeExpression(0)
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 449
                        self.match(NyarParser.Comma)
                        self.state = 450
                        self.typeExpression(0)
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 458
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 460
                self.symbols()
                self.state = 462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 461
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 464
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 473
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 467
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 468
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 469
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 470
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 471
                        self.match(NyarParser.T__4)
                        self.state = 472
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Meets(self):
            return self.getToken(NyarParser.Meets, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            _la = self._input.LA(1)
            if not(_la==NyarParser.Tilde or _la==NyarParser.Meets):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 479
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keywords(self):
            return self.getToken(NyarParser.Keywords, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_parameter)
        try:
            self.state = 503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.typeExpression(0)


                self.state = 484
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 485
                    self.typeExpression(0)


                self.state = 488
                self.symbol()
                self.state = 489
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 491
                    self.typeExpression(0)


                self.state = 494
                self.symbol()
                self.state = 495
                self.match(NyarParser.Keywords)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 497
                    self.typeExpression(0)


                self.state = 500
                self.symbol()
                self.state = 501
                self.match(NyarParser.Nullable)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Vable(self):
            return self.getToken(NyarParser.Vable, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)
        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.match(NyarParser.Val)
                self.state = 506
                self.assignLHS()
                self.state = 507
                self.assignRHS()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.match(NyarParser.Var)
                self.state = 510
                self.assignLHS()
                self.state = 511
                self.assignRHS()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 513
                self.match(NyarParser.Def)
                self.state = 514
                self.assignLHS()
                self.state = 515
                self.assignRHS()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 517
                self.match(NyarParser.Def)
                self.state = 518
                self.symbol()
                self.state = 519
                self.match(NyarParser.T__2)
                self.state = 520
                self.parameter()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 521
                    self.match(NyarParser.Comma)
                    self.state = 522
                    self.parameter()
                    self.state = 527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 528
                self.match(NyarParser.T__3)
                self.state = 530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 529
                    self.typeSuffix()


                self.state = 532
                self.assignRHS()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 534
                self.symbol()
                self.state = 535
                self.match(NyarParser.T__2)
                self.state = 536
                self.parameter()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 537
                    self.match(NyarParser.Comma)
                    self.state = 538
                    self.parameter()
                    self.state = 543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 544
                self.match(NyarParser.T__3)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Tilde or _la==NyarParser.Meets:
                    self.state = 545
                    self.typeSuffix()


                self.state = 548
                self.match(NyarParser.Set)
                self.state = 549
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 551
                self.assignLHS()
                self.state = 552
                self.match(NyarParser.Set)
                self.state = 553
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 555
                self.assignLHS()
                self.state = 556
                self.match(NyarParser.Vable)
                self.state = 557
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 559
                self.assignLHS()
                self.state = 560
                self.match(NyarParser.Delay)
                self.state = 561
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.symbol()
                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 566
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.maybeSymbol()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 570
                    self.match(NyarParser.Comma)
                    self.state = 571
                    self.maybeSymbol()
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.symbols()
                self.state = 579
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RHSStatementContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)
        def End(self):
            return self.getToken(NyarParser.End, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSStatement" ):
                listener.enterRHSStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSStatement" ):
                listener.exitRHSStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSStatement" ):
                return visitor.visitRHSStatement(self)
            else:
                return visitor.visitChildren(self)


    class RHSTupleContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSTuple" ):
                listener.enterRHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSTuple" ):
                listener.exitRHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSTuple" ):
                return visitor.visitRHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class RHSExpressionContext(AssignRHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignRHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRHSExpression" ):
                listener.enterRHSExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRHSExpression" ):
                listener.exitRHSExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRHSExpression" ):
                return visitor.visitRHSExpression(self)
            else:
                return visitor.visitChildren(self)



    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = NyarParser.RHSExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = NyarParser.RHSExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.data()
                pass

            elif la_ == 3:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.match(NyarParser.T__0)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Tilde) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 586
                    self.statement()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 592
                self.match(NyarParser.T__1)
                pass

            elif la_ == 4:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 593
                self.match(NyarParser.Colon)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Tilde) | (1 << NyarParser.Trait) | (1 << NyarParser.Class) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                    self.state = 594
                    self.statement()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(NyarParser.End)
                pass

            elif la_ == 5:
                localctx = NyarParser.RHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 601
                self.expressionStatement()
                pass

            elif la_ == 6:
                localctx = NyarParser.RHSStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 602
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.head = None # Token

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_maybeSymbol)
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Identifier, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.symbols()
                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 606
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Tilde]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                localctx.head = self.match(NyarParser.Tilde)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def symbolName(self):
            return self.getTypedRuleContext(NyarParser.SymbolNameContext,0)


        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Dot)
            else:
                return self.getToken(NyarParser.Dot, i)

        def getRuleIndex(self):
            return NyarParser.RULE_symbols

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbols" ):
                listener.enterSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbols" ):
                listener.exitSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbols" ):
                return visitor.visitSymbols(self)
            else:
                return visitor.visitChildren(self)




    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_symbols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 612
                self.symbol()
                pass

            elif la_ == 2:
                self.state = 613
                self.symbolName()
                pass


            self.state = 620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.match(NyarParser.Dot)
                    self.state = 617
                    self.symbol() 
                self.state = 622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Name)
            else:
                return self.getToken(NyarParser.Name, i)

        def getRuleIndex(self):
            return NyarParser.RULE_symbolName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolName" ):
                listener.enterSymbolName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolName" ):
                listener.exitSymbolName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolName" ):
                return visitor.visitSymbolName(self)
            else:
                return visitor.visitChildren(self)




    def symbolName(self):

        localctx = NyarParser.SymbolNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_symbolName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.symbol()
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 624
                    self.match(NyarParser.Name)
                    self.state = 625
                    self.symbol() 
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_data)
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 633
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 634
                self.symbols()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 635
                self.list()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 636
                self.dict()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 637
                self.index()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 638
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_number)
        try:
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 644
                self.match(NyarParser.Binary)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 645
                self.match(NyarParser.Octal)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 646
                self.match(NyarParser.Hexadecimal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 649
                self.match(NyarParser.T__4)
                self.state = 650
                self.indexValid()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (NyarParser.Comma - 25)) | (1 << (NyarParser.Integer - 25)) | (1 << (NyarParser.Identifier - 25)) | (1 << (NyarParser.Symbol - 25)))) != 0):
                    self.state = 652
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 651
                        self.match(NyarParser.Comma)


                    self.state = 654
                    self.indexValid()
                    self.state = 659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 660
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(NyarParser.T__6)
                self.state = 663
                self.indexValid()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (NyarParser.Comma - 25)) | (1 << (NyarParser.Integer - 25)) | (1 << (NyarParser.Identifier - 25)) | (1 << (NyarParser.Symbol - 25)))) != 0):
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 664
                        self.match(NyarParser.Comma)


                    self.state = 667
                    self.indexValid()
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 673
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(NyarParser.T__0)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__7 or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (NyarParser.Integer - 65)) | (1 << (NyarParser.StringEscapeBlock - 65)) | (1 << (NyarParser.StringEscapeSingle - 65)) | (1 << (NyarParser.StringEmpty - 65)) | (1 << (NyarParser.Identifier - 65)) | (1 << (NyarParser.Symbol - 65)))) != 0):
                self.state = 678
                self.keyValue()
                self.state = 683
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 679
                        self.match(NyarParser.Comma)
                        self.state = 680
                        self.keyValue() 
                    self.state = 685
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)



            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 688
                self.match(NyarParser.Comma)


            self.state = 691
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            localctx.key = self.keyValid()
            self.state = 694
            self.match(NyarParser.Colon)
            self.state = 695
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_keyValid)
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.integer()
                pass
            elif token in [NyarParser.Identifier, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.symbol()
                pass
            elif token in [NyarParser.T__7, NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 699
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listLine(self):
            return self.getTypedRuleContext(NyarParser.ListLineContext,0)


        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(NyarParser.T__4)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.T__7) | (1 << NyarParser.Colon) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Tilde) | (1 << NyarParser.Decimal) | (1 << NyarParser.DecimalBad) | (1 << NyarParser.Binary) | (1 << NyarParser.Octal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Identifier - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)) | (1 << (NyarParser.LogicNot - 64)))) != 0) or _la==NyarParser.Reciprocal:
                self.state = 703
                self.listLine()


            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 706
                self.match(NyarParser.Comma)


            self.state = 709
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_listLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLine" ):
                listener.enterListLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLine" ):
                listener.exitListLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLine" ):
                return visitor.visitListLine(self)
            else:
                return visitor.visitChildren(self)




    def listLine(self):

        localctx = NyarParser.ListLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_listLine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.element()
            self.state = 718
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 712
                        self.match(NyarParser.Comma)


                    self.state = 715
                    self.element() 
                self.state = 720
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_element)
        try:
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 722
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 723
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexValid" ):
                listener.enterIndexValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexValid" ):
                listener.exitIndexValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexValid" ):
                return visitor.visitIndexValid(self)
            else:
                return visitor.visitChildren(self)




    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexValid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Identifier, NyarParser.Symbol]:
                self.state = 726
                self.symbol()
                pass
            elif token in [NyarParser.Integer]:
                self.state = 727
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Colon:
                self.state = 730
                self.match(NyarParser.Colon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_branchStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Match(self):
            return self.getToken(NyarParser.Match, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatement" ):
                listener.enterMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatement" ):
                listener.exitMatchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatement" ):
                return visitor.visitMatchStatement(self)
            else:
                return visitor.visitChildren(self)


    class SwitchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)
        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)


    class IfNestedContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)

        def if_elseif(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.If_elseifContext)
            else:
                return self.getTypedRuleContext(NyarParser.If_elseifContext,i)

        def if_else(self):
            return self.getTypedRuleContext(NyarParser.If_elseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)


    class IfSingleContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)

        def if_else(self):
            return self.getTypedRuleContext(NyarParser.If_elseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)



    def branchStatement(self):

        localctx = NyarParser.BranchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_branchStatement)
        self._la = 0 # Token type
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = NyarParser.IfSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.match(NyarParser.If)
                self.state = 734
                self.condition()
                self.state = 735
                self.expr_or_block()
                self.state = 737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 736
                    self.if_else()


                pass

            elif la_ == 2:
                localctx = NyarParser.IfNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(NyarParser.If)
                self.state = 740
                self.condition()
                self.state = 741
                self.expr_or_block()
                self.state = 745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 742
                        self.if_elseif() 
                    self.state = 747
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                self.state = 749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 748
                    self.if_else()


                pass

            elif la_ == 3:
                localctx = NyarParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.match(NyarParser.Switch)
                self.state = 753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 752
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Pass or _la==NyarParser.Return):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 755
                self.condition()
                self.state = 756
                self.expr_or_block()
                pass

            elif la_ == 4:
                localctx = NyarParser.MatchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(NyarParser.Match)
                self.state = 759
                self.condition()
                self.state = 760
                self.expr_or_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_condition)
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.match(NyarParser.T__2)
                self.state = 766
                self.expression(0)
                self.state = 767
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_elseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_if_else

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ElseStatementContext(If_elseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.If_elseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)
        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseStatement" ):
                return visitor.visitElseStatement(self)
            else:
                return visitor.visitChildren(self)



    def if_else(self):

        localctx = NyarParser.If_elseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_if_else)
        try:
            localctx = NyarParser.ElseStatementContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(NyarParser.Else)
            self.state = 772
            self.expr_or_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_elseifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_if_elseif

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ElseIfStatementContext(If_elseifContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.If_elseifContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Else(self):
            return self.getToken(NyarParser.Else, 0)
        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)

        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatement" ):
                listener.enterElseIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatement" ):
                listener.exitElseIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIfStatement" ):
                return visitor.visitElseIfStatement(self)
            else:
                return visitor.visitChildren(self)



    def if_elseif(self):

        localctx = NyarParser.If_elseifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_if_elseif)
        self._la = 0 # Token type
        try:
            localctx = NyarParser.ElseIfStatementContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(NyarParser.Else)
            self.state = 775
            self.match(NyarParser.If)
            self.state = 776
            self.condition()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Then:
                self.state = 777
                self.match(NyarParser.Then)


            self.state = 780
            self.expr_or_block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def finalProduction(self):
            return self.getTypedRuleContext(NyarParser.FinalProductionContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(NyarParser.CatchProductionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tryStatement)
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 782
                self.match(NyarParser.Try)
                self.state = 783
                self.blockStatement()
                self.state = 784
                self.finalProduction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.match(NyarParser.Try)
                self.state = 787
                self.blockStatement()

                self.state = 788
                self.catchProduction()
                self.state = 790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.finalProduction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(NyarParser.Catch, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchProduction" ):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)




    def catchProduction(self):

        localctx = NyarParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_catchProduction)
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(NyarParser.Catch)
                self.state = 795
                self.symbol()
                self.state = 796
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(NyarParser.Catch)
                self.state = 799
                self.match(NyarParser.T__2)
                self.state = 800
                self.symbol()
                self.state = 801
                self.match(NyarParser.T__3)
                self.state = 802
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_finalProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalProduction" ):
                listener.enterFinalProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalProduction" ):
                listener.exitFinalProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinalProduction" ):
                return visitor.visitFinalProduction(self)
            else:
                return visitor.visitChildren(self)




    def finalProduction(self):

        localctx = NyarParser.FinalProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_finalProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(NyarParser.Final)
            self.state = 807
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_loopStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def for_inline(self):
            return self.getTypedRuleContext(NyarParser.For_inlineContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)


    class DoLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(NyarParser.Do, 0)
        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoop" ):
                listener.enterDoLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoop" ):
                listener.exitDoLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoLoop" ):
                return visitor.visitDoLoop(self)
            else:
                return visitor.visitChildren(self)


    class WhileLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(NyarParser.While, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def expr_or_block(self):
            return self.getTypedRuleContext(NyarParser.Expr_or_blockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileLoop" ):
                return visitor.visitWhileLoop(self)
            else:
                return visitor.visitChildren(self)



    def loopStatement(self):

        localctx = NyarParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_loopStatement)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(NyarParser.For)
                self.state = 810
                self.match(NyarParser.T__2)
                self.state = 811
                self.for_inline()
                self.state = 812
                self.match(NyarParser.T__3)
                self.state = 813
                self.expr_or_block()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(NyarParser.For)
                self.state = 816
                self.identifier()
                self.state = 817
                self.match(NyarParser.In)
                self.state = 818
                self.expression(0)
                self.state = 819
                self.expr_or_block()
                pass

            elif la_ == 3:
                localctx = NyarParser.WhileLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.match(NyarParser.While)
                self.state = 822
                self.condition()
                self.state = 823
                self.expr_or_block()
                pass

            elif la_ == 4:
                localctx = NyarParser.DoLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 825
                self.match(NyarParser.Do)
                self.state = 826
                self.expr_or_block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_inlineContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.init = None # ExpressionContext
            self.cond = None # ExpressionContext
            self.inc = None # ExpressionContext

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_for_inline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_inline" ):
                listener.enterFor_inline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_inline" ):
                listener.exitFor_inline(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_inline" ):
                return visitor.visitFor_inline(self)
            else:
                return visitor.visitChildren(self)




    def for_inline(self):

        localctx = NyarParser.For_inlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_for_inline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            localctx.init = self.expression(0)
            self.state = 830
            self.match(NyarParser.Comma)
            self.state = 831
            localctx.cond = self.expression(0)
            self.state = 832
            self.match(NyarParser.Comma)
            self.state = 833
            localctx.inc = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtends(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendsContext,0)


        def classMeets(self):
            return self.getTypedRuleContext(NyarParser.ClassMeetsContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(NyarParser.Trait)
            self.state = 836
            self.symbol()
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extends:
                self.state = 837
                self.classExtends()


            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Tilde or _la==NyarParser.Meets:
                self.state = 840
                self.classMeets()


            self.state = 843
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtends(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendsContext,0)


        def classMeets(self):
            return self.getTypedRuleContext(NyarParser.ClassMeetsContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(NyarParser.Class)
            self.state = 846
            self.symbol()
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extends:
                self.state = 847
                self.classExtends()


            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Tilde or _la==NyarParser.Meets:
                self.state = 850
                self.classMeets()


            self.state = 853
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extends(self):
            return self.getToken(NyarParser.Extends, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtends

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtends" ):
                listener.enterClassExtends(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtends" ):
                listener.exitClassExtends(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtends" ):
                return visitor.visitClassExtends(self)
            else:
                return visitor.visitChildren(self)




    def classExtends(self):

        localctx = NyarParser.ClassExtendsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classExtends)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extends]:
                self.enterOuterAlt(localctx, 1)
                self.state = 855
                self.match(NyarParser.Extends)
                self.state = 857 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 856
                    self.symbol()
                    self.state = 859 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Identifier or _la==NyarParser.Symbol):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(NyarParser.T__2)
                self.state = 862
                self.symbol()
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 863
                    self.match(NyarParser.Comma)
                    self.state = 864
                    self.symbol()
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 870
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMeetsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Meets(self):
            return self.getToken(NyarParser.Meets, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classMeets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMeets" ):
                listener.enterClassMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMeets" ):
                listener.exitClassMeets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMeets" ):
                return visitor.visitClassMeets(self)
            else:
                return visitor.visitChildren(self)




    def classMeets(self):

        localctx = NyarParser.ClassMeetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classMeets)
        self._la = 0 # Token type
        try:
            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(NyarParser.Meets)
                self.state = 876 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 875
                    self.symbol()
                    self.state = 878 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==NyarParser.Identifier or _la==NyarParser.Symbol):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(NyarParser.Tilde)
                self.state = 881
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 882
                self.match(NyarParser.Tilde)
                self.state = 883
                self.match(NyarParser.T__2)
                self.state = 884
                self.symbol()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 885
                    self.match(NyarParser.Comma)
                    self.state = 886
                    self.symbol()
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 892
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = NyarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.match(NyarParser.T__0)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.Identifier or _la==NyarParser.Symbol:
                    self.state = 897
                    self.classExpression()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 903
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(NyarParser.Colon)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def))) != 0) or _la==NyarParser.Identifier or _la==NyarParser.Symbol:
                    self.state = 905
                    self.classExpression()
                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 911
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(NyarParser.Colon)
                self.state = 913
                self.classExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(NyarParser.IdentifierContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 917
                        self.identifier() 
                    self.state = 922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 923
                self.symbol()
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.typeSuffix()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 927
                        self.identifier() 
                    self.state = 932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 933
                self.symbol()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Tilde or _la==NyarParser.Meets:
                    self.state = 934
                    self.typeSuffix()


                self.state = 937
                self.blockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 939
                        self.identifier() 
                    self.state = 944
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 945
                self.symbol()
                self.state = 946
                self.match(NyarParser.T__2)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (NyarParser.Integer - 65)) | (1 << (NyarParser.Identifier - 65)) | (1 << (NyarParser.Symbol - 65)))) != 0):
                    self.state = 947
                    self.parameter()
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 953
                self.match(NyarParser.T__3)
                self.state = 955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 954
                    self.typeSuffix()


                self.state = 959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.match(NyarParser.Colon)
                    self.state = 958
                    self.match(NyarParser.Pass)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 961
                        self.identifier() 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 967
                self.symbol()
                self.state = 968
                self.match(NyarParser.T__2)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (NyarParser.Integer - 65)) | (1 << (NyarParser.Identifier - 65)) | (1 << (NyarParser.Symbol - 65)))) != 0):
                    self.state = 969
                    self.parameter()
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 975
                self.match(NyarParser.T__3)
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Tilde or _la==NyarParser.Meets:
                    self.state = 976
                    self.typeSuffix()


                self.state = 979
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(NyarParser.IdentifierContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 984
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringRawContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringRaw" ):
                listener.enterStringRaw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringRaw" ):
                listener.exitStringRaw(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringRaw" ):
                return visitor.visitStringRaw(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_string)
        try:
            self.state = 998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__7]:
                localctx = NyarParser.StringRawContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(NyarParser.T__7)
                self.state = 992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 991
                    self.matchWildcard()


                self.state = 994
                self.match(NyarParser.T__7)
                pass
            elif token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 995
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 996
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 997
                self.match(NyarParser.StringEmpty)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (NyarParser.True - 74)) | (1 << (NyarParser.False - 74)) | (1 << (NyarParser.Null - 74)) | (1 << (NyarParser.Nothing - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = NyarParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            _la = self._input.LA(1)
            if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (NyarParser.Val - 32)) | (1 << (NyarParser.Var - 32)) | (1 << (NyarParser.Let - 32)) | (1 << (NyarParser.Def - 32)) | (1 << (NyarParser.Identifier - 32)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_symbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(_la==NyarParser.Identifier or _la==NyarParser.Symbol):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # Token

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def Identifier(self):
            return self.getToken(NyarParser.Identifier, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_solt)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(NyarParser.Sharp)
                self.state = 1008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1007
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.match(NyarParser.Sharp)
                self.state = 1011
                localctx.id = self.match(NyarParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (NyarParser.Increase - 95)) | (1 << (NyarParser.BitNot - 95)) | (1 << (NyarParser.LogicNot - 95)) | (1 << (NyarParser.Reciprocal - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (NyarParser.Increase - 95)) | (1 << (NyarParser.Decrease - 95)) | (1 << (NyarParser.DoubleBang - 95)) | (1 << (NyarParser.BitNot - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (NyarParser.Exponent - 66)) | (1 << (NyarParser.Base - 66)) | (1 << (NyarParser.LeftShift - 66)) | (1 << (NyarParser.RightShift - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (NyarParser.LogicXor - 97)) | (1 << (NyarParser.LogicOr - 97)) | (1 << (NyarParser.LogicAnd - 97)) | (1 << (NyarParser.LogicNot - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                _la = self._input.LA(1)
                if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (NyarParser.Equivalent - 110)) | (1 << (NyarParser.NotEquivalent - 110)) | (1 << (NyarParser.Equal - 110)) | (1 << (NyarParser.NotEqual - 110)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                _la = self._input.LA(1)
                if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (NyarParser.LessEqual - 89)) | (1 << (NyarParser.Less - 89)) | (1 << (NyarParser.GraterEqual - 89)) | (1 << (NyarParser.Grater - 89)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (NyarParser.Multiply - 100)) | (1 << (NyarParser.Kronecker - 100)) | (1 << (NyarParser.TensorProduct - 100)) | (1 << (NyarParser.Remainder - 100)) | (1 << (NyarParser.Divide - 100)) | (1 << (NyarParser.Mod - 100)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (NyarParser.LeftShift - 88)) | (1 << (NyarParser.RightShift - 88)) | (1 << (NyarParser.Increase - 88)) | (1 << (NyarParser.Map - 88)) | (1 << (NyarParser.Concat - 88)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[10] = self.expression_sempred
        self._predicates[19] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




