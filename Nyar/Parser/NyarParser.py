# Generated from D:/Python/NyarPY\Nyar.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0094")
        buf.write("\u0454\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\3\2")
        buf.write("\7\2\u009a\n\2\f\2\16\2\u009d\13\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\5\3\u00a4\n\3\3\3\3\3\5\3\u00a8\n\3\3\3\3\3\5\3\u00ac")
        buf.write("\n\3\3\3\3\3\5\3\u00b0\n\3\3\3\3\3\5\3\u00b4\n\3\3\3\3")
        buf.write("\3\5\3\u00b8\n\3\3\3\3\3\5\3\u00bc\n\3\3\3\3\3\5\3\u00c0")
        buf.write("\n\3\3\3\3\3\5\3\u00c4\n\3\3\3\3\3\5\3\u00c8\n\3\3\3\3")
        buf.write("\3\5\3\u00cc\n\3\5\3\u00ce\n\3\3\4\3\4\5\4\u00d2\n\4\3")
        buf.write("\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e0")
        buf.write("\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u00e7\n\6\3\6\3\6\3\6\3\6")
        buf.write("\5\6\u00ed\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u00f7")
        buf.write("\n\7\3\7\5\7\u00fa\n\7\5\7\u00fc\n\7\3\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\n\3\n\3\n\3\n\7\n\u0108\n\n\f\n\16\n\u010b\13")
        buf.write("\n\3\n\3\n\3\13\3\13\7\13\u0111\n\13\f\13\16\13\u0114")
        buf.write("\13\13\3\13\3\13\3\13\3\13\3\13\7\13\u011b\n\13\f\13\16")
        buf.write("\13\u011e\13\13\3\13\5\13\u0121\n\13\3\f\3\f\7\f\u0125")
        buf.write("\n\f\f\f\16\f\u0128\13\f\3\f\3\f\7\f\u012c\n\f\f\f\16")
        buf.write("\f\u012f\13\f\5\f\u0131\n\f\3\r\3\r\3\r\7\r\u0136\n\r")
        buf.write("\f\r\16\r\u0139\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u014a\n")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u0177\n\16\f\16\16\16\u017a\13\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0188")
        buf.write("\n\17\3\20\3\20\3\20\5\20\u018d\n\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u0197\n\20\3\20\3\20\5\20")
        buf.write("\u019b\n\20\3\21\3\21\3\21\3\21\3\21\5\21\u01a2\n\21\3")
        buf.write("\22\3\22\3\22\3\22\3\22\7\22\u01a9\n\22\f\22\16\22\u01ac")
        buf.write("\13\22\5\22\u01ae\n\22\3\22\3\22\3\23\3\23\3\23\5\23\u01b5")
        buf.write("\n\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\5\25\u01be\n")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\5\25\u01c5\n\25\5\25\u01c7")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u01cf\n\26\f")
        buf.write("\26\16\26\u01d2\13\26\5\26\u01d4\n\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\7\26\u01dd\n\26\f\26\16\26\u01e0\13")
        buf.write("\26\5\26\u01e2\n\26\3\26\3\26\3\26\3\26\5\26\u01e8\n\26")
        buf.write("\3\26\5\26\u01eb\n\26\3\26\3\26\3\26\3\26\3\26\3\26\7")
        buf.write("\26\u01f3\n\26\f\26\16\26\u01f6\13\26\3\27\3\27\3\27\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30")
        buf.write("\u021b\n\30\3\31\3\31\5\31\u021f\n\31\3\31\3\31\3\31\7")
        buf.write("\31\u0224\n\31\f\31\16\31\u0227\13\31\3\31\3\31\3\31\3")
        buf.write("\31\5\31\u022d\n\31\3\32\3\32\3\32\3\32\3\32\7\32\u0234")
        buf.write("\n\32\f\32\16\32\u0237\13\32\3\32\3\32\3\32\7\32\u023c")
        buf.write("\n\32\f\32\16\32\u023f\13\32\3\32\5\32\u0242\n\32\3\33")
        buf.write("\5\33\u0245\n\33\3\33\3\33\5\33\u0249\n\33\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u024f\n\33\3\33\3\33\3\33\3\33\5\33\u0255")
        buf.write("\n\33\3\33\3\33\3\33\3\33\5\33\u025b\n\33\3\34\3\34\3")
        buf.write("\34\3\34\3\34\7\34\u0262\n\34\f\34\16\34\u0265\13\34\3")
        buf.write("\34\5\34\u0268\n\34\3\34\3\34\5\34\u026c\n\34\3\35\3\35")
        buf.write("\5\35\u0270\n\35\3\35\5\35\u0273\n\35\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u0279\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u0284\n\37\3 \3 \3 \3 \3 \3 \5 \u028c")
        buf.write("\n \3!\3!\3!\5!\u0291\n!\3!\7!\u0294\n!\f!\16!\u0297\13")
        buf.write("!\3!\3!\3!\3!\3!\5!\u029e\n!\3!\7!\u02a1\n!\f!\16!\u02a4")
        buf.write("\13!\3!\3!\5!\u02a8\n!\3\"\3\"\5\"\u02ac\n\"\3\"\3\"\7")
        buf.write("\"\u02b0\n\"\f\"\16\"\u02b3\13\"\3\"\5\"\u02b6\n\"\3\"")
        buf.write("\3\"\3#\3#\3#\3#\3$\3$\3$\5$\u02c1\n$\3%\3%\5%\u02c5\n")
        buf.write("%\3%\3%\7%\u02c9\n%\f%\16%\u02cc\13%\3%\5%\u02cf\n%\3")
        buf.write("%\3%\3&\3&\3&\5&\u02d6\n&\3\'\3\'\5\'\u02da\n\'\3\'\5")
        buf.write("\'\u02dd\n\'\3(\3(\3(\5(\u02e2\n(\3(\3(\5(\u02e6\n(\3")
        buf.write("(\3(\3(\5(\u02eb\n(\3(\3(\7(\u02ef\n(\f(\16(\u02f2\13")
        buf.write("(\3(\5(\u02f5\n(\3(\3(\3(\5(\u02fa\n(\3(\3(\3(\3(\3(\3")
        buf.write("(\5(\u0302\n(\3)\3)\3)\3)\5)\u0308\n)\3*\3*\3*\3*\5*\u030e")
        buf.write("\n*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\5+\u0325\n+\3,\3,\7,\u0329\n,\f,\16,\u032c")
        buf.write("\13,\3,\3,\3,\7,\u0331\n,\f,\16,\u0334\13,\3,\5,\u0337")
        buf.write("\n,\3-\3-\3.\3.\5.\u033d\n.\3/\3/\3/\3/\3/\5/\u0344\n")
        buf.write("/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u034e\n")
        buf.write("\60\5\60\u0350\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\5\61\u035c\n\61\3\62\3\62\3\62\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u0366\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\5\63\u036f\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u0376\n\63\3\63\3\63\3\63\3\63\5\63\u037c\n\63")
        buf.write("\3\63\5\63\u037f\n\63\3\64\3\64\3\65\3\65\7\65\u0385\n")
        buf.write("\65\f\65\16\65\u0388\13\65\3\65\3\65\3\65\7\65\u038d\n")
        buf.write("\65\f\65\16\65\u0390\13\65\3\65\3\65\3\65\5\65\u0395\n")
        buf.write("\65\3\66\3\66\7\66\u0399\n\66\f\66\16\66\u039c\13\66\3")
        buf.write("\66\3\66\5\66\u03a0\n\66\3\66\7\66\u03a3\n\66\f\66\16")
        buf.write("\66\u03a6\13\66\3\66\3\66\5\66\u03aa\n\66\3\66\3\66\3")
        buf.write("\66\7\66\u03af\n\66\f\66\16\66\u03b2\13\66\3\66\3\66\3")
        buf.write("\66\7\66\u03b7\n\66\f\66\16\66\u03ba\13\66\3\66\3\66\5")
        buf.write("\66\u03be\n\66\3\66\3\66\5\66\u03c2\n\66\3\66\7\66\u03c5")
        buf.write("\n\66\f\66\16\66\u03c8\13\66\3\66\3\66\3\66\7\66\u03cd")
        buf.write("\n\66\f\66\16\66\u03d0\13\66\3\66\3\66\5\66\u03d4\n\66")
        buf.write("\3\66\3\66\5\66\u03d8\n\66\3\67\3\67\3\67\5\67\u03dd\n")
        buf.write("\67\3\67\5\67\u03e0\n\67\3\67\3\67\38\38\38\58\u03e7\n")
        buf.write("8\38\58\u03ea\n8\38\38\39\39\69\u03f0\n9\r9\169\u03f1")
        buf.write("\39\39\39\39\79\u03f8\n9\f9\169\u03fb\139\39\39\59\u03ff")
        buf.write("\n9\3:\3:\6:\u0403\n:\r:\16:\u0404\3:\3:\3:\3:\3:\3:\3")
        buf.write(":\7:\u040e\n:\f:\16:\u0411\13:\3:\3:\5:\u0415\n:\3;\3")
        buf.write(";\3;\3;\3;\5;\u041c\n;\3<\3<\3<\3=\3=\3>\3>\3?\3?\3?\3")
        buf.write("?\5?\u0429\n?\3@\3@\3@\5@\u042e\n@\3A\3A\3B\3B\3B\5B\u0435")
        buf.write("\nB\3C\3C\5C\u0439\nC\3C\3C\5C\u043d\nC\3D\3D\3E\3E\3")
        buf.write("F\3F\3G\3G\3H\3H\3I\3I\3I\5I\u044c\nI\3J\3J\3K\3K\3L\3")
        buf.write("L\3L\2\4\32*M\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 ")
        buf.write("\"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtv")
        buf.write("xz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\2\33\4\2\r\rYY\4\2\24\24\30\30\4\2")
        buf.write("\26\27\31\31\4\2\24\24\26\31\4\2\20\20\36\36\3\2\34\35")
        buf.write("\3\2@A\4\2%%((\4\2\23\23--\4\2\24\25\30\30\3\2\66\67\4")
        buf.write("\2DDII\3\2DE\3\2TW\3\2)*\6\2)*ii\u0081\u0082\u008d\u008d")
        buf.write("\6\2iill\177\177\u0081\u0081\5\2JKbbff\5\2kk}~\u0082\u0082")
        buf.write("\4\2xz\u0080\u0080\4\2cdgh\3\2}~\4\2\21\21\u008c\u008c")
        buf.write("\7\2\20\20nprrttww\7\2bbffiiss{{\2\u04e8\2\u009b\3\2\2")
        buf.write("\2\4\u00cd\3\2\2\2\6\u00d1\3\2\2\2\b\u00d3\3\2\2\2\n\u00ec")
        buf.write("\3\2\2\2\f\u00fb\3\2\2\2\16\u00fd\3\2\2\2\20\u0100\3\2")
        buf.write("\2\2\22\u0103\3\2\2\2\24\u0120\3\2\2\2\26\u0130\3\2\2")
        buf.write("\2\30\u0132\3\2\2\2\32\u0149\3\2\2\2\34\u0187\3\2\2\2")
        buf.write("\36\u019a\3\2\2\2 \u01a1\3\2\2\2\"\u01a3\3\2\2\2$\u01b4")
        buf.write("\3\2\2\2&\u01b6\3\2\2\2(\u01c6\3\2\2\2*\u01ea\3\2\2\2")
        buf.write(",\u01f7\3\2\2\2.\u021a\3\2\2\2\60\u022c\3\2\2\2\62\u0241")
        buf.write("\3\2\2\2\64\u025a\3\2\2\2\66\u025c\3\2\2\28\u0272\3\2")
        buf.write("\2\2:\u0278\3\2\2\2<\u0283\3\2\2\2>\u028b\3\2\2\2@\u02a7")
        buf.write("\3\2\2\2B\u02a9\3\2\2\2D\u02b9\3\2\2\2F\u02c0\3\2\2\2")
        buf.write("H\u02c2\3\2\2\2J\u02d5\3\2\2\2L\u02d9\3\2\2\2N\u0301\3")
        buf.write("\2\2\2P\u0307\3\2\2\2R\u0309\3\2\2\2T\u0324\3\2\2\2V\u0336")
        buf.write("\3\2\2\2X\u0338\3\2\2\2Z\u033c\3\2\2\2\\\u0343\3\2\2\2")
        buf.write("^\u034f\3\2\2\2`\u035b\3\2\2\2b\u035d\3\2\2\2d\u037e\3")
        buf.write("\2\2\2f\u0380\3\2\2\2h\u0394\3\2\2\2j\u03d7\3\2\2\2l\u03d9")
        buf.write("\3\2\2\2n\u03e3\3\2\2\2p\u03fe\3\2\2\2r\u0414\3\2\2\2")
        buf.write("t\u041b\3\2\2\2v\u041d\3\2\2\2x\u0420\3\2\2\2z\u0422\3")
        buf.write("\2\2\2|\u0428\3\2\2\2~\u042d\3\2\2\2\u0080\u042f\3\2\2")
        buf.write("\2\u0082\u0434\3\2\2\2\u0084\u043c\3\2\2\2\u0086\u043e")
        buf.write("\3\2\2\2\u0088\u0440\3\2\2\2\u008a\u0442\3\2\2\2\u008c")
        buf.write("\u0444\3\2\2\2\u008e\u0446\3\2\2\2\u0090\u044b\3\2\2\2")
        buf.write("\u0092\u044d\3\2\2\2\u0094\u044f\3\2\2\2\u0096\u0451\3")
        buf.write("\2\2\2\u0098\u009a\5\4\3\2\u0099\u0098\3\2\2\2\u009a\u009d")
        buf.write("\3\2\2\2\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write("\u009e\3\2\2\2\u009d\u009b\3\2\2\2\u009e\u009f\7\2\2\3")
        buf.write("\u009f\3\3\2\2\2\u00a0\u00ce\5\6\4\2\u00a1\u00a3\5\n\6")
        buf.write("\2\u00a2\u00a4\5\b\5\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4")
        buf.write("\3\2\2\2\u00a4\u00ce\3\2\2\2\u00a5\u00a7\5(\25\2\u00a6")
        buf.write("\u00a8\5\b\5\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2")
        buf.write("\u00a8\u00ce\3\2\2\2\u00a9\u00ab\5.\30\2\u00aa\u00ac\5")
        buf.write("\b\5\2\u00ab\u00aa\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ce")
        buf.write("\3\2\2\2\u00ad\u00af\5N(\2\u00ae\u00b0\5\b\5\2\u00af\u00ae")
        buf.write("\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00ce\3\2\2\2\u00b1")
        buf.write("\u00b3\5d\63\2\u00b2\u00b4\5\b\5\2\u00b3\u00b2\3\2\2\2")
        buf.write("\u00b3\u00b4\3\2\2\2\u00b4\u00ce\3\2\2\2\u00b5\u00b7\5")
        buf.write("^\60\2\u00b6\u00b8\5\b\5\2\u00b7\u00b6\3\2\2\2\u00b7\u00b8")
        buf.write("\3\2\2\2\u00b8\u00ce\3\2\2\2\u00b9\u00bb\5l\67\2\u00ba")
        buf.write("\u00bc\5\b\5\2\u00bb\u00ba\3\2\2\2\u00bb\u00bc\3\2\2\2")
        buf.write("\u00bc\u00ce\3\2\2\2\u00bd\u00bf\5n8\2\u00be\u00c0\5\b")
        buf.write("\5\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00ce")
        buf.write("\3\2\2\2\u00c1\u00c3\5\32\16\2\u00c2\u00c4\5\b\5\2\u00c3")
        buf.write("\u00c2\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00ce\3\2\2\2")
        buf.write("\u00c5\u00c7\5\34\17\2\u00c6\u00c8\5\b\5\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00ce\3\2\2\2\u00c9")
        buf.write("\u00cb\5<\37\2\u00ca\u00cc\5\b\5\2\u00cb\u00ca\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00a0\3")
        buf.write("\2\2\2\u00cd\u00a1\3\2\2\2\u00cd\u00a5\3\2\2\2\u00cd\u00a9")
        buf.write("\3\2\2\2\u00cd\u00ad\3\2\2\2\u00cd\u00b1\3\2\2\2\u00cd")
        buf.write("\u00b5\3\2\2\2\u00cd\u00b9\3\2\2\2\u00cd\u00bd\3\2\2\2")
        buf.write("\u00cd\u00c1\3\2\2\2\u00cd\u00c5\3\2\2\2\u00cd\u00c9\3")
        buf.write("\2\2\2\u00ce\5\3\2\2\2\u00cf\u00d2\5\b\5\2\u00d0\u00d2")
        buf.write("\7\n\2\2\u00d1\u00cf\3\2\2\2\u00d1\u00d0\3\2\2\2\u00d2")
        buf.write("\7\3\2\2\2\u00d3\u00d4\7\13\2\2\u00d4\t\3\2\2\2\u00d5")
        buf.write("\u00d6\7\16\2\2\u00d6\u00ed\5\f\7\2\u00d7\u00d8\7\16\2")
        buf.write("\2\u00d8\u00d9\5\f\7\2\u00d9\u00da\7\f\2\2\u00da\u00db")
        buf.write("\5\u0082B\2\u00db\u00ed\3\2\2\2\u00dc\u00dd\7\16\2\2\u00dd")
        buf.write("\u00df\5\f\7\2\u00de\u00e0\7\r\2\2\u00df\u00de\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\5")
        buf.write("\u0082B\2\u00e2\u00ed\3\2\2\2\u00e3\u00e4\7\16\2\2\u00e4")
        buf.write("\u00e6\5\f\7\2\u00e5\u00e7\t\2\2\2\u00e6\u00e5\3\2\2\2")
        buf.write("\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\5")
        buf.write("\22\n\2\u00e9\u00ed\3\2\2\2\u00ea\u00eb\7\16\2\2\u00eb")
        buf.write("\u00ed\5B\"\2\u00ec\u00d5\3\2\2\2\u00ec\u00d7\3\2\2\2")
        buf.write("\u00ec\u00dc\3\2\2\2\u00ec\u00e3\3\2\2\2\u00ec\u00ea\3")
        buf.write("\2\2\2\u00ed\13\3\2\2\2\u00ee\u00fc\5|?\2\u00ef\u00fc")
        buf.write("\5\u0082B\2\u00f0\u00f1\5\u0082B\2\u00f1\u00f2\7Y\2\2")
        buf.write("\u00f2\u00f3\5\u0082B\2\u00f3\u00fc\3\2\2\2\u00f4\u00f6")
        buf.write("\5\16\b\2\u00f5\u00f7\5\20\t\2\u00f6\u00f5\3\2\2\2\u00f6")
        buf.write("\u00f7\3\2\2\2\u00f7\u00fc\3\2\2\2\u00f8\u00fa\5\20\t")
        buf.write("\2\u00f9\u00f8\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fc")
        buf.write("\3\2\2\2\u00fb\u00ee\3\2\2\2\u00fb\u00ef\3\2\2\2\u00fb")
        buf.write("\u00f0\3\2\2\2\u00fb\u00f4\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fc\r\3\2\2\2\u00fd\u00fe\7B\2\2\u00fe\u00ff\5\u0082")
        buf.write("B\2\u00ff\17\3\2\2\2\u0100\u0101\7C\2\2\u0101\u0102\5")
        buf.write("\u0082B\2\u0102\21\3\2\2\2\u0103\u0104\7\3\2\2\u0104\u0109")
        buf.write("\5:\36\2\u0105\u0106\7\32\2\2\u0106\u0108\5:\36\2\u0107")
        buf.write("\u0105\3\2\2\2\u0108\u010b\3\2\2\2\u0109\u0107\3\2\2\2")
        buf.write("\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u0109\3")
        buf.write("\2\2\2\u010c\u010d\7\4\2\2\u010d\23\3\2\2\2\u010e\u0112")
        buf.write("\7\3\2\2\u010f\u0111\5\4\3\2\u0110\u010f\3\2\2\2\u0111")
        buf.write("\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112\u0113\3\2\2\2")
        buf.write("\u0113\u0115\3\2\2\2\u0114\u0112\3\2\2\2\u0115\u0121\7")
        buf.write("\4\2\2\u0116\u0117\7\23\2\2\u0117\u0121\5\32\16\2\u0118")
        buf.write("\u011c\7\23\2\2\u0119\u011b\5\4\3\2\u011a\u0119\3\2\2")
        buf.write("\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d")
        buf.write("\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u011c\3\2\2\2\u011f")
        buf.write("\u0121\7\22\2\2\u0120\u010e\3\2\2\2\u0120\u0116\3\2\2")
        buf.write("\2\u0120\u0118\3\2\2\2\u0121\25\3\2\2\2\u0122\u0126\7")
        buf.write("\3\2\2\u0123\u0125\5\4\3\2\u0124\u0123\3\2\2\2\u0125\u0128")
        buf.write("\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127")
        buf.write("\u0129\3\2\2\2\u0128\u0126\3\2\2\2\u0129\u0131\7\4\2\2")
        buf.write("\u012a\u012c\5\4\3\2\u012b\u012a\3\2\2\2\u012c\u012f\3")
        buf.write("\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0131")
        buf.write("\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0122\3\2\2\2\u0130")
        buf.write("\u012d\3\2\2\2\u0131\27\3\2\2\2\u0132\u0137\5\32\16\2")
        buf.write("\u0133\u0134\7\32\2\2\u0134\u0136\5\32\16\2\u0135\u0133")
        buf.write("\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3\2\2\2\u0137")
        buf.write("\u0138\3\2\2\2\u0138\31\3\2\2\2\u0139\u0137\3\2\2\2\u013a")
        buf.write("\u013b\b\16\1\2\u013b\u014a\5\"\22\2\u013c\u014a\5.\30")
        buf.write("\2\u013d\u013e\5\u0082B\2\u013e\u013f\5|?\2\u013f\u014a")
        buf.write("\3\2\2\2\u0140\u0141\5\u0088E\2\u0141\u0142\5\32\16\17")
        buf.write("\u0142\u014a\3\2\2\2\u0143\u014a\5<\37\2\u0144\u0145\7")
        buf.write("\5\2\2\u0145\u0146\5\32\16\2\u0146\u0147\7\6\2\2\u0147")
        buf.write("\u014a\3\2\2\2\u0148\u014a\5\36\20\2\u0149\u013a\3\2\2")
        buf.write("\2\u0149\u013c\3\2\2\2\u0149\u013d\3\2\2\2\u0149\u0140")
        buf.write("\3\2\2\2\u0149\u0143\3\2\2\2\u0149\u0144\3\2\2\2\u0149")
        buf.write("\u0148\3\2\2\2\u014a\u0178\3\2\2\2\u014b\u014c\f\r\2\2")
        buf.write("\u014c\u014d\5\u008cG\2\u014d\u014e\5\32\16\16\u014e\u0177")
        buf.write("\3\2\2\2\u014f\u0150\f\f\2\2\u0150\u0151\5\u008eH\2\u0151")
        buf.write("\u0152\5\32\16\r\u0152\u0177\3\2\2\2\u0153\u0154\f\13")
        buf.write("\2\2\u0154\u0155\5\u0090I\2\u0155\u0156\5\32\16\f\u0156")
        buf.write("\u0177\3\2\2\2\u0157\u0158\f\n\2\2\u0158\u0159\5\u0092")
        buf.write("J\2\u0159\u015a\5\32\16\n\u015a\u0177\3\2\2\2\u015b\u015c")
        buf.write("\f\t\2\2\u015c\u015d\5\u0094K\2\u015d\u015e\5\32\16\n")
        buf.write("\u015e\u0177\3\2\2\2\u015f\u0160\f\b\2\2\u0160\u0161\5")
        buf.write("\u0086D\2\u0161\u0162\5\32\16\t\u0162\u0177\3\2\2\2\u0163")
        buf.write("\u0164\f\7\2\2\u0164\u0165\5\u0096L\2\u0165\u0166\5\32")
        buf.write("\16\b\u0166\u0177\3\2\2\2\u0167\u0168\f\25\2\2\u0168\u0169")
        buf.write("\7Y\2\2\u0169\u0177\5\u0082B\2\u016a\u016b\f\24\2\2\u016b")
        buf.write("\u016c\7Y\2\2\u016c\u0177\5\"\22\2\u016d\u016e\f\23\2")
        buf.write("\2\u016e\u0177\5@!\2\u016f\u0170\f\20\2\2\u0170\u0171")
        buf.write("\7\f\2\2\u0171\u0177\5*\26\2\u0172\u0173\f\16\2\2\u0173")
        buf.write("\u0177\5\u008aF\2\u0174\u0175\f\3\2\2\u0175\u0177\7\35")
        buf.write("\2\2\u0176\u014b\3\2\2\2\u0176\u014f\3\2\2\2\u0176\u0153")
        buf.write("\3\2\2\2\u0176\u0157\3\2\2\2\u0176\u015b\3\2\2\2\u0176")
        buf.write("\u015f\3\2\2\2\u0176\u0163\3\2\2\2\u0176\u0167\3\2\2\2")
        buf.write("\u0176\u016a\3\2\2\2\u0176\u016d\3\2\2\2\u0176\u016f\3")
        buf.write("\2\2\2\u0176\u0172\3\2\2\2\u0176\u0174\3\2\2\2\u0177\u017a")
        buf.write("\3\2\2\2\u0178\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179")
        buf.write("\33\3\2\2\2\u017a\u0178\3\2\2\2\u017b\u017c\5 \21\2\u017c")
        buf.write("\u017d\7\36\2\2\u017d\u017e\5 \21\2\u017e\u017f\7\23\2")
        buf.write("\2\u017f\u0180\5 \21\2\u0180\u0188\3\2\2\2\u0181\u0182")
        buf.write("\5 \21\2\u0182\u0183\7+\2\2\u0183\u0184\5 \21\2\u0184")
        buf.write("\u0185\7,\2\2\u0185\u0186\5 \21\2\u0186\u0188\3\2\2\2")
        buf.write("\u0187\u017b\3\2\2\2\u0187\u0181\3\2\2\2\u0188\35\3\2")
        buf.write("\2\2\u0189\u018c\t\3\2\2\u018a\u018b\7\5\2\2\u018b\u018d")
        buf.write("\7\6\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u019b\3\2\2\2\u018e\u018f\t\4\2\2\u018f\u019b\5\32\16")
        buf.write("\2\u0190\u0191\7\25\2\2\u0191\u019b\5\30\r\2\u0192\u0193")
        buf.write("\7\25\2\2\u0193\u0194\7\5\2\2\u0194\u0196\5\30\r\2\u0195")
        buf.write("\u0197\7\32\2\2\u0196\u0195\3\2\2\2\u0196\u0197\3\2\2")
        buf.write("\2\u0197\u0198\3\2\2\2\u0198\u0199\7\6\2\2\u0199\u019b")
        buf.write("\3\2\2\2\u019a\u0189\3\2\2\2\u019a\u018e\3\2\2\2\u019a")
        buf.write("\u0190\3\2\2\2\u019a\u0192\3\2\2\2\u019b\37\3\2\2\2\u019c")
        buf.write("\u01a2\5\32\16\2\u019d\u019e\7\5\2\2\u019e\u019f\5\34")
        buf.write("\17\2\u019f\u01a0\7\6\2\2\u01a0\u01a2\3\2\2\2\u01a1\u019c")
        buf.write("\3\2\2\2\u01a1\u019d\3\2\2\2\u01a2!\3\2\2\2\u01a3\u01a4")
        buf.write("\5:\36\2\u01a4\u01ad\7\5\2\2\u01a5\u01aa\5$\23\2\u01a6")
        buf.write("\u01a7\7\32\2\2\u01a7\u01a9\5$\23\2\u01a8\u01a6\3\2\2")
        buf.write("\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab")
        buf.write("\3\2\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad")
        buf.write("\u01a5\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2")
        buf.write("\u01af\u01b0\7\6\2\2\u01b0#\3\2\2\2\u01b1\u01b5\5\32\16")
        buf.write("\2\u01b2\u01b5\5\"\22\2\u01b3\u01b5\5<\37\2\u01b4\u01b1")
        buf.write("\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5")
        buf.write("%\3\2\2\2\u01b6\u01b7\t\5\2\2\u01b7\'\3\2\2\2\u01b8\u01b9")
        buf.write("\7\33\2\2\u01b9\u01ba\5\u0082B\2\u01ba\u01bb\7\23\2\2")
        buf.write("\u01bb\u01bd\5*\26\2\u01bc\u01be\7\22\2\2\u01bd\u01bc")
        buf.write("\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01c7\3\2\2\2\u01bf")
        buf.write("\u01c0\7\33\2\2\u01c0\u01c1\5\u0082B\2\u01c1\u01c2\7\3")
        buf.write("\2\2\u01c2\u01c4\5*\26\2\u01c3\u01c5\7\4\2\2\u01c4\u01c3")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c7\3\2\2\2\u01c6")
        buf.write("\u01b8\3\2\2\2\u01c6\u01bf\3\2\2\2\u01c7)\3\2\2\2\u01c8")
        buf.write("\u01c9\b\26\1\2\u01c9\u01ca\5\u0082B\2\u01ca\u01d3\7\5")
        buf.write("\2\2\u01cb\u01d0\5*\26\2\u01cc\u01cd\7\32\2\2\u01cd\u01cf")
        buf.write("\5*\26\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d4\3\2\2\2")
        buf.write("\u01d2\u01d0\3\2\2\2\u01d3\u01cb\3\2\2\2\u01d3\u01d4\3")
        buf.write("\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\7\6\2\2\u01d6\u01eb")
        buf.write("\3\2\2\2\u01d7\u01d8\5\u0082B\2\u01d8\u01e1\7d\2\2\u01d9")
        buf.write("\u01de\5*\26\2\u01da\u01db\7\32\2\2\u01db\u01dd\5*\26")
        buf.write("\2\u01dc\u01da\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e1\u01d9\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e3\3\2\2\2\u01e3\u01e4\7h\2\2\u01e4\u01eb\3")
        buf.write("\2\2\2\u01e5\u01e7\5\u0082B\2\u01e6\u01e8\t\6\2\2\u01e7")
        buf.write("\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01eb\3\2\2\2")
        buf.write("\u01e9\u01eb\5z>\2\u01ea\u01c8\3\2\2\2\u01ea\u01d7\3\2")
        buf.write("\2\2\u01ea\u01e5\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb\u01f4")
        buf.write("\3\2\2\2\u01ec\u01ed\f\6\2\2\u01ed\u01ee\t\7\2\2\u01ee")
        buf.write("\u01f3\5*\26\7\u01ef\u01f0\f\5\2\2\u01f0\u01f1\7\7\2\2")
        buf.write("\u01f1\u01f3\7\b\2\2\u01f2\u01ec\3\2\2\2\u01f2\u01ef\3")
        buf.write("\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5")
        buf.write("\3\2\2\2\u01f5+\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f7\u01f8")
        buf.write("\t\b\2\2\u01f8\u01f9\5*\26\2\u01f9-\3\2\2\2\u01fa\u01fb")
        buf.write("\7!\2\2\u01fb\u01fc\5\60\31\2\u01fc\u01fd\5\24\13\2\u01fd")
        buf.write("\u021b\3\2\2\2\u01fe\u01ff\7\"\2\2\u01ff\u0200\5\60\31")
        buf.write("\2\u0200\u0201\5\24\13\2\u0201\u021b\3\2\2\2\u0202\u0203")
        buf.write("\7$\2\2\u0203\u0204\5\60\31\2\u0204\u0205\5\24\13\2\u0205")
        buf.write("\u021b\3\2\2\2\u0206\u0207\7$\2\2\u0207\u0208\5\66\34")
        buf.write("\2\u0208\u0209\5\24\13\2\u0209\u021b\3\2\2\2\u020a\u020b")
        buf.write("\5\66\34\2\u020b\u020c\t\t\2\2\u020c\u020d\5\62\32\2\u020d")
        buf.write("\u021b\3\2\2\2\u020e\u020f\5\60\31\2\u020f\u0210\7%\2")
        buf.write("\2\u0210\u0211\5\62\32\2\u0211\u021b\3\2\2\2\u0212\u0213")
        buf.write("\5\60\31\2\u0213\u0214\7&\2\2\u0214\u0215\5\62\32\2\u0215")
        buf.write("\u021b\3\2\2\2\u0216\u0217\5\60\31\2\u0217\u0218\7(\2")
        buf.write("\2\u0218\u0219\5\62\32\2\u0219\u021b\3\2\2\2\u021a\u01fa")
        buf.write("\3\2\2\2\u021a\u01fe\3\2\2\2\u021a\u0202\3\2\2\2\u021a")
        buf.write("\u0206\3\2\2\2\u021a\u020a\3\2\2\2\u021a\u020e\3\2\2\2")
        buf.write("\u021a\u0212\3\2\2\2\u021a\u0216\3\2\2\2\u021b/\3\2\2")
        buf.write("\2\u021c\u021e\5\u0082B\2\u021d\u021f\5,\27\2\u021e\u021d")
        buf.write("\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u022d\3\2\2\2\u0220")
        buf.write("\u0225\58\35\2\u0221\u0222\7\32\2\2\u0222\u0224\58\35")
        buf.write("\2\u0223\u0221\3\2\2\2\u0224\u0227\3\2\2\2\u0225\u0223")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u022d\3\2\2\2\u0227")
        buf.write("\u0225\3\2\2\2\u0228\u022d\5:\36\2\u0229\u022a\5:\36\2")
        buf.write("\u022a\u022b\5@!\2\u022b\u022d\3\2\2\2\u022c\u021c\3\2")
        buf.write("\2\2\u022c\u0220\3\2\2\2\u022c\u0228\3\2\2\2\u022c\u0229")
        buf.write("\3\2\2\2\u022d\61\3\2\2\2\u022e\u0242\5\32\16\2\u022f")
        buf.write("\u0242\5\30\r\2\u0230\u0242\5\4\3\2\u0231\u0235\7\3\2")
        buf.write("\2\u0232\u0234\5\4\3\2\u0233\u0232\3\2\2\2\u0234\u0237")
        buf.write("\3\2\2\2\u0235\u0233\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0238\3\2\2\2\u0237\u0235\3\2\2\2\u0238\u0242\7\4\2\2")
        buf.write("\u0239\u023d\7\23\2\2\u023a\u023c\5\4\3\2\u023b\u023a")
        buf.write("\3\2\2\2\u023c\u023f\3\2\2\2\u023d\u023b\3\2\2\2\u023d")
        buf.write("\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f\u023d\3\2\2\2")
        buf.write("\u0240\u0242\7\22\2\2\u0241\u022e\3\2\2\2\u0241\u022f")
        buf.write("\3\2\2\2\u0241\u0230\3\2\2\2\u0241\u0231\3\2\2\2\u0241")
        buf.write("\u0239\3\2\2\2\u0242\63\3\2\2\2\u0243\u0245\5*\26\2\u0244")
        buf.write("\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u025b\5\u0082B\2\u0247\u0249\5*\26\2\u0248\u0247")
        buf.write("\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\3\2\2\2\u024a")
        buf.write("\u024b\5\u0082B\2\u024b\u024c\7\20\2\2\u024c\u025b\3\2")
        buf.write("\2\2\u024d\u024f\5*\26\2\u024e\u024d\3\2\2\2\u024e\u024f")
        buf.write("\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0251\5\u0082B\2\u0251")
        buf.write("\u0252\7\37\2\2\u0252\u025b\3\2\2\2\u0253\u0255\5*\26")
        buf.write("\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0256")
        buf.write("\3\2\2\2\u0256\u0257\5\u0082B\2\u0257\u0258\7\36\2\2\u0258")
        buf.write("\u0259\5\u0082B\2\u0259\u025b\3\2\2\2\u025a\u0244\3\2")
        buf.write("\2\2\u025a\u0248\3\2\2\2\u025a\u024e\3\2\2\2\u025a\u0254")
        buf.write("\3\2\2\2\u025b\65\3\2\2\2\u025c\u025d\5\u0082B\2\u025d")
        buf.write("\u025e\7\5\2\2\u025e\u0263\5\64\33\2\u025f\u0260\7\32")
        buf.write("\2\2\u0260\u0262\5\64\33\2\u0261\u025f\3\2\2\2\u0262\u0265")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u0268\7\32\2")
        buf.write("\2\u0267\u0266\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269")
        buf.write("\3\2\2\2\u0269\u026b\7\6\2\2\u026a\u026c\5,\27\2\u026b")
        buf.write("\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\67\3\2\2\2\u026d")
        buf.write("\u026f\5:\36\2\u026e\u0270\5,\27\2\u026f\u026e\3\2\2\2")
        buf.write("\u026f\u0270\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u0273\7")
        buf.write("B\2\2\u0272\u026d\3\2\2\2\u0272\u0271\3\2\2\2\u02739\3")
        buf.write("\2\2\2\u0274\u0279\7Q\2\2\u0275\u0276\7R\2\2\u0276\u0277")
        buf.write("\7Y\2\2\u0277\u0279\5\u0082B\2\u0278\u0274\3\2\2\2\u0278")
        buf.write("\u0275\3\2\2\2\u0279;\3\2\2\2\u027a\u0284\5> \2\u027b")
        buf.write("\u0284\5|?\2\u027c\u0284\5\u0080A\2\u027d\u0284\5\u0082")
        buf.write("B\2\u027e\u0284\5:\36\2\u027f\u0284\5H%\2\u0280\u0284")
        buf.write("\5B\"\2\u0281\u0284\5@!\2\u0282\u0284\5\u0084C\2\u0283")
        buf.write("\u027a\3\2\2\2\u0283\u027b\3\2\2\2\u0283\u027c\3\2\2\2")
        buf.write("\u0283\u027d\3\2\2\2\u0283\u027e\3\2\2\2\u0283\u027f\3")
        buf.write("\2\2\2\u0283\u0280\3\2\2\2\u0283\u0281\3\2\2\2\u0283\u0282")
        buf.write("\3\2\2\2\u0284=\3\2\2\2\u0285\u028c\5v<\2\u0286\u028c")
        buf.write("\5x=\2\u0287\u028c\5z>\2\u0288\u028c\7F\2\2\u0289\u028c")
        buf.write("\7G\2\2\u028a\u028c\7H\2\2\u028b\u0285\3\2\2\2\u028b\u0286")
        buf.write("\3\2\2\2\u028b\u0287\3\2\2\2\u028b\u0288\3\2\2\2\u028b")
        buf.write("\u0289\3\2\2\2\u028b\u028a\3\2\2\2\u028c?\3\2\2\2\u028d")
        buf.write("\u028e\7\7\2\2\u028e\u0295\5L\'\2\u028f\u0291\7\32\2\2")
        buf.write("\u0290\u028f\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\3")
        buf.write("\2\2\2\u0292\u0294\5L\'\2\u0293\u0290\3\2\2\2\u0294\u0297")
        buf.write("\3\2\2\2\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0298\3\2\2\2\u0297\u0295\3\2\2\2\u0298\u0299\7\b\2\2")
        buf.write("\u0299\u02a8\3\2\2\2\u029a\u029b\7\t\2\2\u029b\u02a2\5")
        buf.write("L\'\2\u029c\u029e\7\32\2\2\u029d\u029c\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a1\5L\'\2\u02a0")
        buf.write("\u029d\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2")
        buf.write("\u02a2\u02a3\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a2\3")
        buf.write("\2\2\2\u02a5\u02a6\7\t\2\2\u02a6\u02a8\3\2\2\2\u02a7\u028d")
        buf.write("\3\2\2\2\u02a7\u029a\3\2\2\2\u02a8A\3\2\2\2\u02a9\u02ab")
        buf.write("\7\3\2\2\u02aa\u02ac\5D#\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac")
        buf.write("\3\2\2\2\u02ac\u02b1\3\2\2\2\u02ad\u02ae\7\32\2\2\u02ae")
        buf.write("\u02b0\5D#\2\u02af\u02ad\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b5\3\2\2\2")
        buf.write("\u02b3\u02b1\3\2\2\2\u02b4\u02b6\7\32\2\2\u02b5\u02b4")
        buf.write("\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7")
        buf.write("\u02b8\7\4\2\2\u02b8C\3\2\2\2\u02b9\u02ba\5F$\2\u02ba")
        buf.write("\u02bb\7\23\2\2\u02bb\u02bc\5J&\2\u02bcE\3\2\2\2\u02bd")
        buf.write("\u02c1\5z>\2\u02be\u02c1\5\u0082B\2\u02bf\u02c1\5|?\2")
        buf.write("\u02c0\u02bd\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02bf\3")
        buf.write("\2\2\2\u02c1G\3\2\2\2\u02c2\u02c4\7\7\2\2\u02c3\u02c5")
        buf.write("\5J&\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02ca")
        buf.write("\3\2\2\2\u02c6\u02c7\7\32\2\2\u02c7\u02c9\5J&\2\u02c8")
        buf.write("\u02c6\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3")
        buf.write("\2\2\2\u02cd\u02cf\7\32\2\2\u02ce\u02cd\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\7\b\2\2")
        buf.write("\u02d1I\3\2\2\2\u02d2\u02d6\5<\37\2\u02d3\u02d6\5\32\16")
        buf.write("\2\u02d4\u02d6\5\4\3\2\u02d5\u02d2\3\2\2\2\u02d5\u02d3")
        buf.write("\3\2\2\2\u02d5\u02d4\3\2\2\2\u02d6K\3\2\2\2\u02d7\u02da")
        buf.write("\5\u0082B\2\u02d8\u02da\5z>\2\u02d9\u02d7\3\2\2\2\u02d9")
        buf.write("\u02d8\3\2\2\2\u02da\u02dc\3\2\2\2\u02db\u02dd\7\23\2")
        buf.write("\2\u02dc\u02db\3\2\2\2\u02dc\u02dd\3\2\2\2\u02ddM\3\2")
        buf.write("\2\2\u02de\u02df\7+\2\2\u02df\u02e1\5\\/\2\u02e0\u02e2")
        buf.write("\t\n\2\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2")
        buf.write("\u02e3\3\2\2\2\u02e3\u02e5\5\26\f\2\u02e4\u02e6\5P)\2")
        buf.write("\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u0302\3")
        buf.write("\2\2\2\u02e7\u02e8\7+\2\2\u02e8\u02ea\5\\/\2\u02e9\u02eb")
        buf.write("\t\n\2\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb")
        buf.write("\u02ec\3\2\2\2\u02ec\u02f0\5\26\f\2\u02ed\u02ef\5R*\2")
        buf.write("\u02ee\u02ed\3\2\2\2\u02ef\u02f2\3\2\2\2\u02f0\u02ee\3")
        buf.write("\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f3\u02f5\5P)\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u0302\3\2\2\2\u02f6\u02f7\7.\2\2\u02f7")
        buf.write("\u02f9\5\\/\2\u02f8\u02fa\5X-\2\u02f9\u02f8\3\2\2\2\u02f9")
        buf.write("\u02fa\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\5V,\2\u02fc")
        buf.write("\u0302\3\2\2\2\u02fd\u02fe\7\61\2\2\u02fe\u02ff\5\\/\2")
        buf.write("\u02ff\u0300\5Z.\2\u0300\u0302\3\2\2\2\u0301\u02de\3\2")
        buf.write("\2\2\u0301\u02e7\3\2\2\2\u0301\u02f6\3\2\2\2\u0301\u02fd")
        buf.write("\3\2\2\2\u0302O\3\2\2\2\u0303\u0304\7,\2\2\u0304\u0308")
        buf.write("\5\32\16\2\u0305\u0306\7,\2\2\u0306\u0308\5\24\13\2\u0307")
        buf.write("\u0303\3\2\2\2\u0307\u0305\3\2\2\2\u0308Q\3\2\2\2\u0309")
        buf.write("\u030a\7,\2\2\u030a\u030b\7+\2\2\u030b\u030d\5\\/\2\u030c")
        buf.write("\u030e\t\n\2\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2")
        buf.write("\u030e\u030f\3\2\2\2\u030f\u0310\5\26\f\2\u0310S\3\2\2")
        buf.write("\2\u0311\u0312\7/\2\2\u0312\u0313\5\32\16\2\u0313\u0314")
        buf.write("\7\23\2\2\u0314\u0315\5\26\f\2\u0315\u0325\3\2\2\2\u0316")
        buf.write("\u0317\5\32\16\2\u0317\u0318\7\62\2\2\u0318\u0319\5\26")
        buf.write("\f\2\u0319\u0325\3\2\2\2\u031a\u031b\7\60\2\2\u031b\u031c")
        buf.write("\7\23\2\2\u031c\u0325\5\26\f\2\u031d\u031e\7/\2\2\u031e")
        buf.write("\u031f\7\20\2\2\u031f\u0320\7\23\2\2\u0320\u0325\5\26")
        buf.write("\f\2\u0321\u0322\7\20\2\2\u0322\u0323\7\62\2\2\u0323\u0325")
        buf.write("\5\26\f\2\u0324\u0311\3\2\2\2\u0324\u0316\3\2\2\2\u0324")
        buf.write("\u031a\3\2\2\2\u0324\u031d\3\2\2\2\u0324\u0321\3\2\2\2")
        buf.write("\u0325U\3\2\2\2\u0326\u032a\7\3\2\2\u0327\u0329\5T+\2")
        buf.write("\u0328\u0327\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3")
        buf.write("\2\2\2\u032a\u032b\3\2\2\2\u032b\u032d\3\2\2\2\u032c\u032a")
        buf.write("\3\2\2\2\u032d\u0337\7\4\2\2\u032e\u0332\7\23\2\2\u032f")
        buf.write("\u0331\5T+\2\u0330\u032f\3\2\2\2\u0331\u0334\3\2\2\2\u0332")
        buf.write("\u0330\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\3\2\2\2")
        buf.write("\u0334\u0332\3\2\2\2\u0335\u0337\7\22\2\2\u0336\u0326")
        buf.write("\3\2\2\2\u0336\u032e\3\2\2\2\u0337W\3\2\2\2\u0338\u0339")
        buf.write("\t\13\2\2\u0339Y\3\2\2\2\u033a\u033d\5\32\16\2\u033b\u033d")
        buf.write("\5\24\13\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2\u033d")
        buf.write("[\3\2\2\2\u033e\u0344\5\32\16\2\u033f\u0340\7\5\2\2\u0340")
        buf.write("\u0341\5\32\16\2\u0341\u0342\7\6\2\2\u0342\u0344\3\2\2")
        buf.write("\2\u0343\u033e\3\2\2\2\u0343\u033f\3\2\2\2\u0344]\3\2")
        buf.write("\2\2\u0345\u0346\7\63\2\2\u0346\u0347\5\24\13\2\u0347")
        buf.write("\u0348\5b\62\2\u0348\u0350\3\2\2\2\u0349\u034a\7\63\2")
        buf.write("\2\u034a\u034b\5\24\13\2\u034b\u034d\5`\61\2\u034c\u034e")
        buf.write("\5b\62\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e")
        buf.write("\u0350\3\2\2\2\u034f\u0345\3\2\2\2\u034f\u0349\3\2\2\2")
        buf.write("\u0350_\3\2\2\2\u0351\u0352\7\64\2\2\u0352\u0353\5\u0082")
        buf.write("B\2\u0353\u0354\5\24\13\2\u0354\u035c\3\2\2\2\u0355\u0356")
        buf.write("\7\64\2\2\u0356\u0357\7\5\2\2\u0357\u0358\5\u0082B\2\u0358")
        buf.write("\u0359\7\6\2\2\u0359\u035a\5\24\13\2\u035a\u035c\3\2\2")
        buf.write("\2\u035b\u0351\3\2\2\2\u035b\u0355\3\2\2\2\u035ca\3\2")
        buf.write("\2\2\u035d\u035e\7\65\2\2\u035e\u035f\5\24\13\2\u035f")
        buf.write("c\3\2\2\2\u0360\u0361\79\2\2\u0361\u0362\7\5\2\2\u0362")
        buf.write("\u0363\5\30\r\2\u0363\u0365\7\6\2\2\u0364\u0366\5f\64")
        buf.write("\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367")
        buf.write("\3\2\2\2\u0367\u0368\5\24\13\2\u0368\u037f\3\2\2\2\u0369")
        buf.write("\u036a\79\2\2\u036a\u036b\5\u0082B\2\u036b\u036c\78\2")
        buf.write("\2\u036c\u036e\5\32\16\2\u036d\u036f\5f\64\2\u036e\u036d")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370")
        buf.write("\u0371\5\24\13\2\u0371\u037f\3\2\2\2\u0372\u0373\7:\2")
        buf.write("\2\u0373\u0375\5\\/\2\u0374\u0376\5f\64\2\u0375\u0374")
        buf.write("\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0377\3\2\2\2\u0377")
        buf.write("\u0378\5\24\13\2\u0378\u037f\3\2\2\2\u0379\u037b\7;\2")
        buf.write("\2\u037a\u037c\5f\64\2\u037b\u037a\3\2\2\2\u037b\u037c")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\5\24\13\2\u037e")
        buf.write("\u0360\3\2\2\2\u037e\u0369\3\2\2\2\u037e\u0372\3\2\2\2")
        buf.write("\u037e\u0379\3\2\2\2\u037fe\3\2\2\2\u0380\u0381\t\f\2")
        buf.write("\2\u0381g\3\2\2\2\u0382\u0386\7\3\2\2\u0383\u0385\5j\66")
        buf.write("\2\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384")
        buf.write("\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388")
        buf.write("\u0386\3\2\2\2\u0389\u0395\7\4\2\2\u038a\u038e\7\23\2")
        buf.write("\2\u038b\u038d\5j\66\2\u038c\u038b\3\2\2\2\u038d\u0390")
        buf.write("\3\2\2\2\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f")
        buf.write("\u0391\3\2\2\2\u0390\u038e\3\2\2\2\u0391\u0395\7\22\2")
        buf.write("\2\u0392\u0393\7\23\2\2\u0393\u0395\5j\66\2\u0394\u0382")
        buf.write("\3\2\2\2\u0394\u038a\3\2\2\2\u0394\u0392\3\2\2\2\u0395")
        buf.write("i\3\2\2\2\u0396\u03d8\5\6\4\2\u0397\u0399\5t;\2\u0398")
        buf.write("\u0397\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398\3\2\2\2")
        buf.write("\u039a\u039b\3\2\2\2\u039b\u039d\3\2\2\2\u039c\u039a\3")
        buf.write("\2\2\2\u039d\u039f\5\u0082B\2\u039e\u03a0\5,\27\2\u039f")
        buf.write("\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03d8\3\2\2\2")
        buf.write("\u03a1\u03a3\5t;\2\u03a2\u03a1\3\2\2\2\u03a3\u03a6\3\2")
        buf.write("\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7")
        buf.write("\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a7\u03a9\5\u0082B\2\u03a8")
        buf.write("\u03aa\5,\27\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2")
        buf.write("\u03aa\u03ab\3\2\2\2\u03ab\u03ac\5\24\13\2\u03ac\u03d8")
        buf.write("\3\2\2\2\u03ad\u03af\5t;\2\u03ae\u03ad\3\2\2\2\u03af\u03b2")
        buf.write("\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1")
        buf.write("\u03b3\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b3\u03b4\5\u0082")
        buf.write("B\2\u03b4\u03b8\7\5\2\2\u03b5\u03b7\5\64\33\2\u03b6\u03b5")
        buf.write("\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2")
        buf.write("\u03bb\u03bd\7\6\2\2\u03bc\u03be\5,\27\2\u03bd\u03bc\3")
        buf.write("\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c1\3\2\2\2\u03bf\u03c0")
        buf.write("\7\23\2\2\u03c0\u03c2\7\24\2\2\u03c1\u03bf\3\2\2\2\u03c1")
        buf.write("\u03c2\3\2\2\2\u03c2\u03d8\3\2\2\2\u03c3\u03c5\5t;\2\u03c4")
        buf.write("\u03c3\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2")
        buf.write("\u03c6\u03c7\3\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3")
        buf.write("\2\2\2\u03c9\u03ca\5\u0082B\2\u03ca\u03ce\7\5\2\2\u03cb")
        buf.write("\u03cd\5\64\33\2\u03cc\u03cb\3\2\2\2\u03cd\u03d0\3\2\2")
        buf.write("\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d1")
        buf.write("\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03d3\7\6\2\2\u03d2")
        buf.write("\u03d4\5,\27\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2\2\2")
        buf.write("\u03d4\u03d5\3\2\2\2\u03d5\u03d6\5\24\13\2\u03d6\u03d8")
        buf.write("\3\2\2\2\u03d7\u0396\3\2\2\2\u03d7\u039a\3\2\2\2\u03d7")
        buf.write("\u03a4\3\2\2\2\u03d7\u03b0\3\2\2\2\u03d7\u03c6\3\2\2\2")
        buf.write("\u03d8k\3\2\2\2\u03d9\u03da\7=\2\2\u03da\u03dc\5\u0082")
        buf.write("B\2\u03db\u03dd\5p9\2\u03dc\u03db\3\2\2\2\u03dc\u03dd")
        buf.write("\3\2\2\2\u03dd\u03df\3\2\2\2\u03de\u03e0\5r:\2\u03df\u03de")
        buf.write("\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\5h\65\2\u03e2m\3\2\2\2\u03e3\u03e4\7>\2\2\u03e4")
        buf.write("\u03e6\5\u0082B\2\u03e5\u03e7\5p9\2\u03e6\u03e5\3\2\2")
        buf.write("\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03ea")
        buf.write("\5r:\2\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u03ec\5h\65\2\u03eco\3\2\2\2\u03ed\u03ef")
        buf.write("\7?\2\2\u03ee\u03f0\5\u0082B\2\u03ef\u03ee\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2")
        buf.write("\u03f2\u03ff\3\2\2\2\u03f3\u03f4\7\5\2\2\u03f4\u03f9\5")
        buf.write("\u0082B\2\u03f5\u03f6\7\32\2\2\u03f6\u03f8\5\u0082B\2")
        buf.write("\u03f7\u03f5\3\2\2\2\u03f8\u03fb\3\2\2\2\u03f9\u03f7\3")
        buf.write("\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\3\2\2\2\u03fb\u03f9")
        buf.write("\3\2\2\2\u03fc\u03fd\7\6\2\2\u03fd\u03ff\3\2\2\2\u03fe")
        buf.write("\u03ed\3\2\2\2\u03fe\u03f3\3\2\2\2\u03ffq\3\2\2\2\u0400")
        buf.write("\u0402\7@\2\2\u0401\u0403\5\u0082B\2\u0402\u0401\3\2\2")
        buf.write("\2\u0403\u0404\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405")
        buf.write("\3\2\2\2\u0405\u0415\3\2\2\2\u0406\u0407\7A\2\2\u0407")
        buf.write("\u0415\5\u0082B\2\u0408\u0409\7A\2\2\u0409\u040a\7\5\2")
        buf.write("\2\u040a\u040f\5\u0082B\2\u040b\u040c\7\32\2\2\u040c\u040e")
        buf.write("\5\u0082B\2\u040d\u040b\3\2\2\2\u040e\u0411\3\2\2\2\u040f")
        buf.write("\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0412\3\2\2\2")
        buf.write("\u0411\u040f\3\2\2\2\u0412\u0413\7\6\2\2\u0413\u0415\3")
        buf.write("\2\2\2\u0414\u0400\3\2\2\2\u0414\u0406\3\2\2\2\u0414\u0408")
        buf.write("\3\2\2\2\u0415s\3\2\2\2\u0416\u041c\5\u0082B\2\u0417\u041c")
        buf.write("\7!\2\2\u0418\u041c\7\"\2\2\u0419\u041c\7#\2\2\u041a\u041c")
        buf.write("\7$\2\2\u041b\u0416\3\2\2\2\u041b\u0417\3\2\2\2\u041b")
        buf.write("\u0418\3\2\2\2\u041b\u0419\3\2\2\2\u041b\u041a\3\2\2\2")
        buf.write("\u041cu\3\2\2\2\u041d\u041e\t\r\2\2\u041e\u041f\5\u0082")
        buf.write("B\2\u041fw\3\2\2\2\u0420\u0421\t\16\2\2\u0421y\3\2\2\2")
        buf.write("\u0422\u0423\7I\2\2\u0423{\3\2\2\2\u0424\u0429\7L\2\2")
        buf.write("\u0425\u0429\7M\2\2\u0426\u0429\7N\2\2\u0427\u0429\7O")
        buf.write("\2\2\u0428\u0424\3\2\2\2\u0428\u0425\3\2\2\2\u0428\u0426")
        buf.write("\3\2\2\2\u0428\u0427\3\2\2\2\u0429}\3\2\2\2\u042a\u042e")
        buf.write("\5&\24\2\u042b\u042e\5X-\2\u042c\u042e\5f\64\2\u042d\u042a")
        buf.write("\3\2\2\2\u042d\u042b\3\2\2\2\u042d\u042c\3\2\2\2\u042e")
        buf.write("\177\3\2\2\2\u042f\u0430\t\17\2\2\u0430\u0081\3\2\2\2")
        buf.write("\u0431\u0435\5~@\2\u0432\u0435\7S\2\2\u0433\u0435\7R\2")
        buf.write("\2\u0434\u0431\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0433")
        buf.write("\3\2\2\2\u0435\u0083\3\2\2\2\u0436\u0438\7X\2\2\u0437")
        buf.write("\u0439\7I\2\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2")
        buf.write("\u0439\u043d\3\2\2\2\u043a\u043b\7X\2\2\u043b\u043d\5")
        buf.write("\u0082B\2\u043c\u0436\3\2\2\2\u043c\u043a\3\2\2\2\u043d")
        buf.write("\u0085\3\2\2\2\u043e\u043f\t\20\2\2\u043f\u0087\3\2\2")
        buf.write("\2\u0440\u0441\t\21\2\2\u0441\u0089\3\2\2\2\u0442\u0443")
        buf.write("\t\22\2\2\u0443\u008b\3\2\2\2\u0444\u0445\t\23\2\2\u0445")
        buf.write("\u008d\3\2\2\2\u0446\u0447\t\24\2\2\u0447\u008f\3\2\2")
        buf.write("\2\u0448\u044c\t\25\2\2\u0449\u044c\t\26\2\2\u044a\u044c")
        buf.write("\t\27\2\2\u044b\u0448\3\2\2\2\u044b\u0449\3\2\2\2\u044b")
        buf.write("\u044a\3\2\2\2\u044c\u0091\3\2\2\2\u044d\u044e\t\30\2")
        buf.write("\2\u044e\u0093\3\2\2\2\u044f\u0450\t\31\2\2\u0450\u0095")
        buf.write("\3\2\2\2\u0451\u0452\t\32\2\2\u0452\u0097\3\2\2\2\u008e")
        buf.write("\u009b\u00a3\u00a7\u00ab\u00af\u00b3\u00b7\u00bb\u00bf")
        buf.write("\u00c3\u00c7\u00cb\u00cd\u00d1\u00df\u00e6\u00ec\u00f6")
        buf.write("\u00f9\u00fb\u0109\u0112\u011c\u0120\u0126\u012d\u0130")
        buf.write("\u0137\u0149\u0176\u0178\u0187\u018c\u0196\u019a\u01a1")
        buf.write("\u01aa\u01ad\u01b4\u01bd\u01c4\u01c6\u01d0\u01d3\u01de")
        buf.write("\u01e1\u01e7\u01ea\u01f2\u01f4\u021a\u021e\u0225\u022c")
        buf.write("\u0235\u023d\u0241\u0244\u0248\u024e\u0254\u025a\u0263")
        buf.write("\u0267\u026b\u026f\u0272\u0278\u0283\u028b\u0290\u0295")
        buf.write("\u029d\u02a2\u02a7\u02ab\u02b1\u02b5\u02c0\u02c4\u02ca")
        buf.write("\u02ce\u02d5\u02d9\u02dc\u02e1\u02e5\u02ea\u02f0\u02f4")
        buf.write("\u02f9\u0301\u0307\u030d\u0324\u032a\u0332\u0336\u033c")
        buf.write("\u0343\u034d\u034f\u035b\u0365\u036e\u0375\u037b\u037e")
        buf.write("\u0386\u038e\u0394\u039a\u039f\u03a4\u03a9\u03b0\u03b8")
        buf.write("\u03bd\u03c1\u03c6\u03ce\u03d3\u03d7\u03dc\u03df\u03e6")
        buf.write("\u03e9\u03f1\u03f9\u03fe\u0404\u040f\u0414\u041b\u0428")
        buf.write("\u042d\u0434\u0438\u043c\u044b")
        return buf.getvalue()


class NyarParser ( Parser ):

    grammarFileName = "Nyar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'('", "')'", "'['", "']'", 
                     "'\u9244\uFFFD'", "';;'", "<INVALID>", "'as'", "'with'", 
                     "'using'", "'instance'", "'*'", "'^'", "'end'", "<INVALID>", 
                     "'pass'", "'return'", "'yield'", "'await'", "'break'", 
                     "'throw'", "<INVALID>", "'type'", "'|'", "'&'", "'?'", 
                     "'**'", "'^^'", "'val'", "'var'", "'let'", "'def'", 
                     "'='", "<INVALID>", "<INVALID>", "<INVALID>", "'+'", 
                     "'-'", "'if'", "'else'", "'then'", "'switch'", "'case'", 
                     "'default'", "'match'", "<INVALID>", "'try'", "'catch'", 
                     "'final'", "'async'", "'lazy'", "'in'", "'for'", "'while'", 
                     "'do'", "'macro'", "'trait'", "'class'", "'extend'", 
                     "'act'", "'~'", "'$'", "'@'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*^'", "'/^'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\\'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'true'", "'false'", "'null'", "'nothing'", "'#'", 
                     "'.'", "'_'", "'#!'", "'%%%'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'<='", "'<'", "<INVALID>", "<INVALID>", "'>='", "'>'", 
                     "'++'", "'+='", "'\u2295'", "'--'", "'-='", "'\u00D7'", 
                     "'\u2297'", "'\u2299'", "'//@'", "'//'", "'/@'", "'/'", 
                     "'\u00F7'", "'%%'", "'%'", "'==='", "'=!='", "'=='", 
                     "'~~'", "'~='", "<INVALID>", "<INVALID>", "'!!'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':?'", "'@@@'", "'@@'", 
                     "'@='", "'`'", "'\u00B4'", "'''", "'...'", "'\u22C5'", 
                     "'\u221A'", "'\u215F'", "'\u00B0'", "'\u1D40'", "'\u1D34'", 
                     "'\u00A7'", "'\u00B6'", "'\u00A4'", "'\u2208'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Separate", "Semicolon", "As", "With", "Using", "Instance", 
                      "Times", "Power", "End", "Colon", "Pass", "Return", 
                      "Yield", "Await", "Break", "Throw", "Comma", "Type", 
                      "BitOr", "BitAnd", "Nullable", "Keyword", "BaseInput", 
                      "Val", "Var", "Let", "Def", "Set", "Flexible", "Name", 
                      "Delay", "Plus", "Minus", "If", "Else", "Then", "Switch", 
                      "Case", "Default", "Match", "Rule", "Try", "Catch", 
                      "Final", "Async", "Lazy", "In", "For", "While", "Do", 
                      "Macro", "Trait", "Class", "Extend", "Act", "Tilde", 
                      "Suffix", "Prefix", "Decimal", "DecimalBad", "Binary", 
                      "Octal", "Hexadecimal", "Integer", "Exponent", "Base", 
                      "StringEscapeBlock", "StringEscapeSingle", "StringLiteral", 
                      "StringEmpty", "Escape", "Symbols", "TrueName", "Symbol", 
                      "True", "False", "Null", "Nothing", "Sharp", "Dot", 
                      "Underline", "Shebang", "Comment", "LineComment", 
                      "PartComment", "NewLine", "WhiteSpace", "Import", 
                      "LeftShift", "LessEqual", "Less", "Export", "RightShift", 
                      "GraterEqual", "Grater", "Increase", "PlusTo", "LogicXor", 
                      "Decrease", "MinusFrom", "Multiply", "Kronecker", 
                      "TensorProduct", "MapAll", "Remainder", "Map", "Divide", 
                      "Quotient", "Output", "Mod", "Equivalent", "NotEquivalent", 
                      "Equal", "Concat", "Destruct", "LogicOr", "LogicAnd", 
                      "DoubleBang", "NotEqual", "BitNot", "LogicNot", "Elvis", 
                      "Curry", "Apply", "LetAssign", "Quote", "Acute", "Quotation", 
                      "Ellipsis", "DOT", "Surd", "Reciprocal", "Degree", 
                      "Transpose", "Hermitian", "Section", "Pilcrow", "Currency", 
                      "Element" ]

    RULE_program = 0
    RULE_statement = 1
    RULE_emptyStatement = 2
    RULE_eos = 3
    RULE_importStatement = 4
    RULE_moduleName = 5
    RULE_moduleLanguage = 6
    RULE_moduleScope = 7
    RULE_idTuples = 8
    RULE_blockStatement = 9
    RULE_blockNonEnd = 10
    RULE_expressionStatement = 11
    RULE_expression = 12
    RULE_trinocular = 13
    RULE_controlFlow = 14
    RULE_trinocularNest = 15
    RULE_functionCall = 16
    RULE_arguments = 17
    RULE_flowController = 18
    RULE_typeStatement = 19
    RULE_typeExpression = 20
    RULE_typeSuffix = 21
    RULE_assignStatment = 22
    RULE_assignLHS = 23
    RULE_assignRHS = 24
    RULE_parameter = 25
    RULE_functionPattern = 26
    RULE_maybeSymbol = 27
    RULE_symbols = 28
    RULE_data = 29
    RULE_number = 30
    RULE_index = 31
    RULE_dict = 32
    RULE_keyValue = 33
    RULE_keyValid = 34
    RULE_list = 35
    RULE_element = 36
    RULE_indexValid = 37
    RULE_branchStatement = 38
    RULE_else = 39
    RULE_elseIf = 40
    RULE_caseBody = 41
    RULE_switchBody = 42
    RULE_switchController = 43
    RULE_matchBody = 44
    RULE_condition = 45
    RULE_tryStatement = 46
    RULE_catchProduction = 47
    RULE_finalProduction = 48
    RULE_loopStatement = 49
    RULE_loopController = 50
    RULE_classBody = 51
    RULE_classExpression = 52
    RULE_traitStatement = 53
    RULE_classStatement = 54
    RULE_classExtend = 55
    RULE_classTrait = 56
    RULE_classController = 57
    RULE_complex = 58
    RULE_decimal = 59
    RULE_integer = 60
    RULE_string = 61
    RULE_controller = 62
    RULE_special = 63
    RULE_symbol = 64
    RULE_solt = 65
    RULE_add_ops = 66
    RULE_pre_ops = 67
    RULE_pst_ops = 68
    RULE_bit_ops = 69
    RULE_lgk_ops = 70
    RULE_cpr_ops = 71
    RULE_pow_ops = 72
    RULE_mul_ops = 73
    RULE_list_ops = 74

    ruleNames =  [ "program", "statement", "emptyStatement", "eos", "importStatement", 
                   "moduleName", "moduleLanguage", "moduleScope", "idTuples", 
                   "blockStatement", "blockNonEnd", "expressionStatement", 
                   "expression", "trinocular", "controlFlow", "trinocularNest", 
                   "functionCall", "arguments", "flowController", "typeStatement", 
                   "typeExpression", "typeSuffix", "assignStatment", "assignLHS", 
                   "assignRHS", "parameter", "functionPattern", "maybeSymbol", 
                   "symbols", "data", "number", "index", "dict", "keyValue", 
                   "keyValid", "list", "element", "indexValid", "branchStatement", 
                   "else", "elseIf", "caseBody", "switchBody", "switchController", 
                   "matchBody", "condition", "tryStatement", "catchProduction", 
                   "finalProduction", "loopStatement", "loopController", 
                   "classBody", "classExpression", "traitStatement", "classStatement", 
                   "classExtend", "classTrait", "classController", "complex", 
                   "decimal", "integer", "string", "controller", "special", 
                   "symbol", "solt", "add_ops", "pre_ops", "pst_ops", "bit_ops", 
                   "lgk_ops", "cpr_ops", "pow_ops", "mul_ops", "list_ops" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    Separate=8
    Semicolon=9
    As=10
    With=11
    Using=12
    Instance=13
    Times=14
    Power=15
    End=16
    Colon=17
    Pass=18
    Return=19
    Yield=20
    Await=21
    Break=22
    Throw=23
    Comma=24
    Type=25
    BitOr=26
    BitAnd=27
    Nullable=28
    Keyword=29
    BaseInput=30
    Val=31
    Var=32
    Let=33
    Def=34
    Set=35
    Flexible=36
    Name=37
    Delay=38
    Plus=39
    Minus=40
    If=41
    Else=42
    Then=43
    Switch=44
    Case=45
    Default=46
    Match=47
    Rule=48
    Try=49
    Catch=50
    Final=51
    Async=52
    Lazy=53
    In=54
    For=55
    While=56
    Do=57
    Macro=58
    Trait=59
    Class=60
    Extend=61
    Act=62
    Tilde=63
    Suffix=64
    Prefix=65
    Decimal=66
    DecimalBad=67
    Binary=68
    Octal=69
    Hexadecimal=70
    Integer=71
    Exponent=72
    Base=73
    StringEscapeBlock=74
    StringEscapeSingle=75
    StringLiteral=76
    StringEmpty=77
    Escape=78
    Symbols=79
    TrueName=80
    Symbol=81
    True=82
    False=83
    Null=84
    Nothing=85
    Sharp=86
    Dot=87
    Underline=88
    Shebang=89
    Comment=90
    LineComment=91
    PartComment=92
    NewLine=93
    WhiteSpace=94
    Import=95
    LeftShift=96
    LessEqual=97
    Less=98
    Export=99
    RightShift=100
    GraterEqual=101
    Grater=102
    Increase=103
    PlusTo=104
    LogicXor=105
    Decrease=106
    MinusFrom=107
    Multiply=108
    Kronecker=109
    TensorProduct=110
    MapAll=111
    Remainder=112
    Map=113
    Divide=114
    Quotient=115
    Output=116
    Mod=117
    Equivalent=118
    NotEquivalent=119
    Equal=120
    Concat=121
    Destruct=122
    LogicOr=123
    LogicAnd=124
    DoubleBang=125
    NotEqual=126
    BitNot=127
    LogicNot=128
    Elvis=129
    Curry=130
    Apply=131
    LetAssign=132
    Quote=133
    Acute=134
    Quotation=135
    Ellipsis=136
    DOT=137
    Surd=138
    Reciprocal=139
    Degree=140
    Transpose=141
    Hermitian=142
    Section=143
    Pilcrow=144
    Currency=145
    Element=146

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(NyarParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = NyarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                self.state = 150
                self.statement()
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 156
            self.match(NyarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(NyarParser.ImportStatementContext,0)


        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def typeStatement(self):
            return self.getTypedRuleContext(NyarParser.TypeStatementContext,0)


        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def branchStatement(self):
            return self.getTypedRuleContext(NyarParser.BranchStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(NyarParser.LoopStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(NyarParser.TryStatementContext,0)


        def traitStatement(self):
            return self.getTypedRuleContext(NyarParser.TraitStatementContext,0)


        def classStatement(self):
            return self.getTypedRuleContext(NyarParser.ClassStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = NyarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_statement)
        try:
            self.state = 203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 159
                self.importStatement()
                self.state = 161
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 160
                    self.eos()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 163
                self.typeStatement()
                self.state = 165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.eos()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 167
                self.assignStatment()
                self.state = 169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                if la_ == 1:
                    self.state = 168
                    self.eos()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 171
                self.branchStatement()
                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 172
                    self.eos()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 175
                self.loopStatement()
                self.state = 177
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                if la_ == 1:
                    self.state = 176
                    self.eos()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 179
                self.tryStatement()
                self.state = 181
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 180
                    self.eos()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 183
                self.traitStatement()
                self.state = 185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 184
                    self.eos()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 187
                self.classStatement()
                self.state = 189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.eos()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 191
                self.expression(0)
                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.eos()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 195
                self.trinocular()
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 196
                    self.eos()


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 199
                self.data()
                self.state = 201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 200
                    self.eos()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(NyarParser.EosContext,0)


        def Separate(self):
            return self.getToken(NyarParser.Separate, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = NyarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_emptyStatement)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Semicolon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 205
                self.eos()
                pass
            elif token in [NyarParser.Separate]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(NyarParser.Separate)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semicolon(self):
            return self.getToken(NyarParser.Semicolon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEos" ):
                return visitor.visitEos(self)
            else:
                return visitor.visitChildren(self)




    def eos(self):

        localctx = NyarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eos)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(NyarParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_importStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ModuleIncludeContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleInclude" ):
                listener.enterModuleInclude(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleInclude" ):
                listener.exitModuleInclude(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleInclude" ):
                return visitor.visitModuleInclude(self)
            else:
                return visitor.visitChildren(self)


    class ModuleAliasContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.module = None # ModuleNameContext
            self.alias = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def As(self):
            return self.getToken(NyarParser.As, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAlias" ):
                listener.enterModuleAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAlias" ):
                listener.exitModuleAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleAlias" ):
                return visitor.visitModuleAlias(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.name = None # SymbolContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbol" ):
                listener.enterModuleSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbol" ):
                listener.exitModuleSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbol" ):
                return visitor.visitModuleSymbol(self)
            else:
                return visitor.visitChildren(self)


    class ModuleSymbolsContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.source = None # ModuleNameContext
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def idTuples(self):
            return self.getTypedRuleContext(NyarParser.IdTuplesContext,0)

        def moduleName(self):
            return self.getTypedRuleContext(NyarParser.ModuleNameContext,0)

        def With(self):
            return self.getToken(NyarParser.With, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleSymbols" ):
                listener.enterModuleSymbols(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleSymbols" ):
                listener.exitModuleSymbols(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleSymbols" ):
                return visitor.visitModuleSymbols(self)
            else:
                return visitor.visitChildren(self)


    class ModuleResolveContext(ImportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ImportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Using(self):
            return self.getToken(NyarParser.Using, 0)
        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleResolve" ):
                listener.enterModuleResolve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleResolve" ):
                listener.exitModuleResolve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleResolve" ):
                return visitor.visitModuleResolve(self)
            else:
                return visitor.visitChildren(self)



    def importStatement(self):

        localctx = NyarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importStatement)
        self._la = 0 # Token type
        try:
            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ModuleIncludeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(NyarParser.Using)
                self.state = 212
                localctx.module = self.moduleName()
                pass

            elif la_ == 2:
                localctx = NyarParser.ModuleAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 213
                self.match(NyarParser.Using)
                self.state = 214
                localctx.module = self.moduleName()
                self.state = 215
                self.match(NyarParser.As)
                self.state = 216
                localctx.alias = self.symbol()
                pass

            elif la_ == 3:
                localctx = NyarParser.ModuleSymbolContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 218
                self.match(NyarParser.Using)
                self.state = 219
                localctx.source = self.moduleName()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With:
                    self.state = 220
                    self.match(NyarParser.With)


                self.state = 223
                localctx.name = self.symbol()
                pass

            elif la_ == 4:
                localctx = NyarParser.ModuleSymbolsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 225
                self.match(NyarParser.Using)
                self.state = 226
                localctx.source = self.moduleName()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.With or _la==NyarParser.Dot:
                    self.state = 227
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.With or _la==NyarParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 230
                self.idTuples()
                pass

            elif la_ == 5:
                localctx = NyarParser.ModuleResolveContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 232
                self.match(NyarParser.Using)
                self.state = 233
                self.dict()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)

        def moduleLanguage(self):
            return self.getTypedRuleContext(NyarParser.ModuleLanguageContext,0)


        def moduleScope(self):
            return self.getTypedRuleContext(NyarParser.ModuleScopeContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleName" ):
                listener.enterModuleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleName" ):
                listener.exitModuleName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleName" ):
                return visitor.visitModuleName(self)
            else:
                return visitor.visitChildren(self)




    def moduleName(self):

        localctx = NyarParser.ModuleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_moduleName)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.string()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.symbol()

                self.state = 239
                self.match(NyarParser.Dot)
                self.state = 240
                self.symbol()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 242
                self.moduleLanguage()
                self.state = 244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 243
                    self.moduleScope()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 246
                    self.moduleScope()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleLanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleLanguage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleLanguage" ):
                listener.enterModuleLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleLanguage" ):
                listener.exitModuleLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleLanguage" ):
                return visitor.visitModuleLanguage(self)
            else:
                return visitor.visitChildren(self)




    def moduleLanguage(self):

        localctx = NyarParser.ModuleLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleLanguage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(NyarParser.Suffix)
            self.state = 252
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleScopeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Prefix(self):
            return self.getToken(NyarParser.Prefix, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_moduleScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleScope" ):
                listener.enterModuleScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleScope" ):
                listener.exitModuleScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModuleScope" ):
                return visitor.visitModuleScope(self)
            else:
                return visitor.visitChildren(self)




    def moduleScope(self):

        localctx = NyarParser.ModuleScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(NyarParser.Prefix)
            self.state = 255
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdTuplesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolsContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_idTuples

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdTuples" ):
                listener.enterIdTuples(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdTuples" ):
                listener.exitIdTuples(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdTuples" ):
                return visitor.visitIdTuples(self)
            else:
                return visitor.visitChildren(self)




    def idTuples(self):

        localctx = NyarParser.IdTuplesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_idTuples)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(NyarParser.T__0)
            self.state = 258
            self.symbols()
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==NyarParser.Comma:
                self.state = 259
                self.match(NyarParser.Comma)
                self.state = 260
                self.symbols()
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 266
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = NyarParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.match(NyarParser.T__0)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 269
                    self.statement()
                    self.state = 274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 275
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.match(NyarParser.Colon)
                self.state = 277
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.match(NyarParser.Colon)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 279
                    self.statement()
                    self.state = 284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 285
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockNonEndContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def getRuleIndex(self):
            return NyarParser.RULE_blockNonEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockNonEnd" ):
                listener.enterBlockNonEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockNonEnd" ):
                listener.exitBlockNonEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockNonEnd" ):
                return visitor.visitBlockNonEnd(self)
            else:
                return visitor.visitChildren(self)




    def blockNonEnd(self):

        localctx = NyarParser.BlockNonEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_blockNonEnd)
        self._la = 0 # Token type
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.match(NyarParser.T__0)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 289
                    self.statement()
                    self.state = 294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 295
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 296
                        self.statement() 
                    self.state = 301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = NyarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.expression(0)
            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self.match(NyarParser.Comma)
                    self.state = 306
                    self.expression(0) 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PriorityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPriorityExpression" ):
                listener.enterPriorityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPriorityExpression" ):
                listener.exitPriorityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPriorityExpression" ):
                return visitor.visitPriorityExpression(self)
            else:
                return visitor.visitChildren(self)


    class DataLiteralContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.atom = None # DataContext
            self.copyFrom(ctx)

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLiteral" ):
                listener.enterDataLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLiteral" ):
                listener.exitDataLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLiteral" ):
                return visitor.visitDataLiteral(self)
            else:
                return visitor.visitChildren(self)


    class FunctionApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionApply" ):
                listener.enterFunctionApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionApply" ):
                listener.exitFunctionApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionApply" ):
                return visitor.visitFunctionApply(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Bit_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def bit_ops(self):
            return self.getTypedRuleContext(NyarParser.Bit_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLike" ):
                listener.enterBinaryLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLike" ):
                listener.exitBinaryLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLike" ):
                return visitor.visitBinaryLike(self)
            else:
                return visitor.visitChildren(self)


    class LogicLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Lgk_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def lgk_ops(self):
            return self.getTypedRuleContext(NyarParser.Lgk_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicLike" ):
                listener.enterLogicLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicLike" ):
                listener.exitLogicLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicLike" ):
                return visitor.visitLogicLike(self)
            else:
                return visitor.visitChildren(self)


    class MethodApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # FunctionCallContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodApply" ):
                listener.enterMethodApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodApply" ):
                listener.exitMethodApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodApply" ):
                return visitor.visitMethodApply(self)
            else:
                return visitor.visitChildren(self)


    class IndexApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # IndexContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexApply" ):
                listener.enterIndexApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexApply" ):
                listener.exitIndexApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexApply" ):
                return visitor.visitIndexApply(self)
            else:
                return visitor.visitChildren(self)


    class CompareLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Cpr_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def cpr_ops(self):
            return self.getTypedRuleContext(NyarParser.Cpr_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompareLike" ):
                listener.enterCompareLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompareLike" ):
                listener.exitCompareLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareLike" ):
                return visitor.visitCompareLike(self)
            else:
                return visitor.visitChildren(self)


    class PlusLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Add_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def add_ops(self):
            return self.getTypedRuleContext(NyarParser.Add_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlusLike" ):
                listener.enterPlusLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlusLike" ):
                listener.exitPlusLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlusLike" ):
                return visitor.visitPlusLike(self)
            else:
                return visitor.visitChildren(self)


    class SlotCatchContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlotCatch" ):
                listener.enterSlotCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlotCatch" ):
                listener.exitSlotCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlotCatch" ):
                return visitor.visitSlotCatch(self)
            else:
                return visitor.visitChildren(self)


    class PowerLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pow_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def pow_ops(self):
            return self.getTypedRuleContext(NyarParser.Pow_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerLike" ):
                listener.enterPowerLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerLike" ):
                listener.exitPowerLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerLike" ):
                return visitor.visitPowerLike(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # TypeExpressionContext
            self.copyFrom(ctx)

        def As(self):
            return self.getToken(NyarParser.As, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class ControlExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def controlFlow(self):
            return self.getTypedRuleContext(NyarParser.ControlFlowContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlExpression" ):
                listener.enterControlExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlExpression" ):
                listener.exitControlExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlExpression" ):
                return visitor.visitControlExpression(self)
            else:
                return visitor.visitChildren(self)


    class PrefixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Pre_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def pre_ops(self):
            return self.getTypedRuleContext(NyarParser.Pre_opsContext,0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpression" ):
                listener.enterPrefixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpression" ):
                listener.exitPrefixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixExpression" ):
                return visitor.visitPrefixExpression(self)
            else:
                return visitor.visitChildren(self)


    class AssignApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignStatment(self):
            return self.getTypedRuleContext(NyarParser.AssignStatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignApply" ):
                listener.enterAssignApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignApply" ):
                listener.exitAssignApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignApply" ):
                return visitor.visitAssignApply(self)
            else:
                return visitor.visitChildren(self)


    class SpecialStringContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # SymbolContext
            self.right = None # StringContext
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialString" ):
                listener.enterSpecialString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialString" ):
                listener.exitSpecialString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialString" ):
                return visitor.visitSpecialString(self)
            else:
                return visitor.visitChildren(self)


    class PostfixExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Pst_opsContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def pst_ops(self):
            return self.getTypedRuleContext(NyarParser.Pst_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)


    class MultiplyLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # Mul_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def mul_ops(self):
            return self.getTypedRuleContext(NyarParser.Mul_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplyLike" ):
                listener.enterMultiplyLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplyLike" ):
                listener.exitMultiplyLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplyLike" ):
                return visitor.visitMultiplyLike(self)
            else:
                return visitor.visitChildren(self)


    class GetterApplyContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.right = None # SymbolContext
            self.copyFrom(ctx)

        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterApply" ):
                listener.enterGetterApply(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterApply" ):
                listener.exitGetterApply(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterApply" ):
                return visitor.visitGetterApply(self)
            else:
                return visitor.visitChildren(self)


    class ListLikeContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.ExpressionContext
            super().__init__(parser)
            self.left = None # ExpressionContext
            self.op = None # List_opsContext
            self.right = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ExpressionContext,i)

        def list_ops(self):
            return self.getTypedRuleContext(NyarParser.List_opsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLike" ):
                listener.enterListLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLike" ):
                listener.exitListLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLike" ):
                return visitor.visitListLike(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                localctx = NyarParser.FunctionApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 313
                self.functionCall()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignApplyContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 314
                self.assignStatment()
                pass

            elif la_ == 3:
                localctx = NyarParser.SpecialStringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 315
                localctx.left = self.symbol()
                self.state = 316
                localctx.right = self.string()
                pass

            elif la_ == 4:
                localctx = NyarParser.PrefixExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 318
                localctx.op = self.pre_ops()
                self.state = 319
                localctx.right = self.expression(13)
                pass

            elif la_ == 5:
                localctx = NyarParser.DataLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 321
                localctx.atom = self.data()
                pass

            elif la_ == 6:
                localctx = NyarParser.PriorityExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 322
                self.match(NyarParser.T__2)
                self.state = 323
                self.expression(0)
                self.state = 324
                self.match(NyarParser.T__3)
                pass

            elif la_ == 7:
                localctx = NyarParser.ControlExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 326
                self.controlFlow()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 374
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 372
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.BinaryLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 329
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 330
                        localctx.op = self.bit_ops()
                        self.state = 331
                        localctx.right = self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.LogicLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 333
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 334
                        localctx.op = self.lgk_ops()
                        self.state = 335
                        localctx.right = self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = NyarParser.CompareLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 337
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 338
                        localctx.op = self.cpr_ops()
                        self.state = 339
                        localctx.right = self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = NyarParser.PowerLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 341
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 342
                        localctx.op = self.pow_ops()
                        self.state = 343
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = NyarParser.MultiplyLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 345
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 346
                        localctx.op = self.mul_ops()
                        self.state = 347
                        localctx.right = self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = NyarParser.PlusLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 349
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 350
                        localctx.op = self.add_ops()
                        self.state = 351
                        localctx.right = self.expression(7)
                        pass

                    elif la_ == 7:
                        localctx = NyarParser.ListLikeContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 353
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 354
                        localctx.op = self.list_ops()
                        self.state = 355
                        localctx.right = self.expression(6)
                        pass

                    elif la_ == 8:
                        localctx = NyarParser.GetterApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 357
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 358
                        self.match(NyarParser.Dot)
                        self.state = 359
                        localctx.right = self.symbol()
                        pass

                    elif la_ == 9:
                        localctx = NyarParser.MethodApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 360
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 361
                        self.match(NyarParser.Dot)
                        self.state = 362
                        localctx.right = self.functionCall()
                        pass

                    elif la_ == 10:
                        localctx = NyarParser.IndexApplyContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 363
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 364
                        localctx.right = self.index()
                        pass

                    elif la_ == 11:
                        localctx = NyarParser.TypeConversionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 365
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 366
                        self.match(NyarParser.As)
                        self.state = 367
                        localctx.right = self.typeExpression(0)
                        pass

                    elif la_ == 12:
                        localctx = NyarParser.PostfixExpressionContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 368
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 369
                        localctx.op = self.pst_ops()
                        pass

                    elif la_ == 13:
                        localctx = NyarParser.SlotCatchContext(self, NyarParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 370
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 371
                        self.match(NyarParser.BitAnd)
                        pass

             
                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TrinocularContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_trinocular

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IfElseTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # TrinocularNestContext
            self.m = None # TrinocularNestContext
            self.r = None # TrinocularNestContext
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def Else(self):
            return self.getToken(NyarParser.Else, 0)
        def trinocularNest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TrinocularNestContext)
            else:
                return self.getTypedRuleContext(NyarParser.TrinocularNestContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfElseTrinocular" ):
                listener.enterIfElseTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfElseTrinocular" ):
                listener.exitIfElseTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfElseTrinocular" ):
                return visitor.visitIfElseTrinocular(self)
            else:
                return visitor.visitChildren(self)


    class ConditionTrinocularContext(TrinocularContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.TrinocularContext
            super().__init__(parser)
            self.l = None # TrinocularNestContext
            self.m = None # TrinocularNestContext
            self.r = None # TrinocularNestContext
            self.copyFrom(ctx)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)
        def trinocularNest(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TrinocularNestContext)
            else:
                return self.getTypedRuleContext(NyarParser.TrinocularNestContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionTrinocular" ):
                listener.enterConditionTrinocular(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionTrinocular" ):
                listener.exitConditionTrinocular(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionTrinocular" ):
                return visitor.visitConditionTrinocular(self)
            else:
                return visitor.visitChildren(self)



    def trinocular(self):

        localctx = NyarParser.TrinocularContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_trinocular)
        try:
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ConditionTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                localctx.l = self.trinocularNest()
                self.state = 378
                self.match(NyarParser.Nullable)
                self.state = 379
                localctx.m = self.trinocularNest()
                self.state = 380
                self.match(NyarParser.Colon)
                self.state = 381
                localctx.r = self.trinocularNest()
                pass

            elif la_ == 2:
                localctx = NyarParser.IfElseTrinocularContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                localctx.l = self.trinocularNest()
                self.state = 384
                self.match(NyarParser.If)
                self.state = 385
                localctx.m = self.trinocularNest()
                self.state = 386
                self.match(NyarParser.Else)
                self.state = 387
                localctx.r = self.trinocularNest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlFlowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.state = None # Token

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Comma(self):
            return self.getToken(NyarParser.Comma, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_controlFlow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlFlow" ):
                listener.enterControlFlow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlFlow" ):
                listener.exitControlFlow(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlFlow" ):
                return visitor.visitControlFlow(self)
            else:
                return visitor.visitChildren(self)




    def controlFlow(self):

        localctx = NyarParser.ControlFlowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_controlFlow)
        self._la = 0 # Token type
        try:
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==NyarParser.Pass or _la==NyarParser.Break):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 392
                    self.match(NyarParser.T__2)
                    self.state = 393
                    self.match(NyarParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                localctx.state = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Throw))) != 0)):
                    localctx.state = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 397
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                localctx.state = self.match(NyarParser.Return)
                self.state = 399
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 400
                localctx.state = self.match(NyarParser.Return)
                self.state = 401
                self.match(NyarParser.T__2)
                self.state = 402
                self.expressionStatement()
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Comma:
                    self.state = 403
                    self.match(NyarParser.Comma)


                self.state = 406
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrinocularNestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def trinocular(self):
            return self.getTypedRuleContext(NyarParser.TrinocularContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_trinocularNest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrinocularNest" ):
                listener.enterTrinocularNest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrinocularNest" ):
                listener.exitTrinocularNest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrinocularNest" ):
                return visitor.visitTrinocularNest(self)
            else:
                return visitor.visitChildren(self)




    def trinocularNest(self):

        localctx = NyarParser.TrinocularNestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_trinocularNest)
        try:
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 411
                self.match(NyarParser.T__2)
                self.state = 412
                self.trinocular()
                self.state = 413
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(NyarParser.ArgumentsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = NyarParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.symbols()
            self.state = 418
            self.match(NyarParser.T__2)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                self.state = 419
                self.arguments()
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 420
                    self.match(NyarParser.Comma)
                    self.state = 421
                    self.arguments()
                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 429
            self.match(NyarParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(NyarParser.FunctionCallContext,0)


        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = NyarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arguments)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 433
                self.data()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlowControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def Throw(self):
            return self.getToken(NyarParser.Throw, 0)

        def Yield(self):
            return self.getToken(NyarParser.Yield, 0)

        def Await(self):
            return self.getToken(NyarParser.Await, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_flowController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlowController" ):
                listener.enterFlowController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlowController" ):
                listener.exitFlowController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlowController" ):
                return visitor.visitFlowController(self)
            else:
                return visitor.visitChildren(self)




    def flowController(self):

        localctx = NyarParser.FlowControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_flowController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Type(self):
            return self.getToken(NyarParser.Type, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeStatement" ):
                listener.enterTypeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeStatement" ):
                listener.exitTypeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeStatement" ):
                return visitor.visitTypeStatement(self)
            else:
                return visitor.visitChildren(self)




    def typeStatement(self):

        localctx = NyarParser.TypeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeStatement)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.match(NyarParser.Type)
                self.state = 439
                self.symbol()
                self.state = 440
                self.match(NyarParser.Colon)
                self.state = 441
                self.typeExpression(0)
                self.state = 443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 442
                    self.match(NyarParser.End)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(NyarParser.Type)
                self.state = 446
                self.symbol()
                self.state = 447
                self.match(NyarParser.T__0)
                self.state = 448
                self.typeExpression(0)
                self.state = 450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 449
                    self.match(NyarParser.T__1)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def typeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.TypeExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.TypeExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def BitOr(self):
            return self.getToken(NyarParser.BitOr, 0)

        def BitAnd(self):
            return self.getToken(NyarParser.BitAnd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def typeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = NyarParser.TypeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_typeExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 455
                self.symbol()
                self.state = 456
                self.match(NyarParser.T__2)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 457
                    self.typeExpression(0)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 458
                        self.match(NyarParser.Comma)
                        self.state = 459
                        self.typeExpression(0)
                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 467
                self.match(NyarParser.T__3)
                pass

            elif la_ == 2:
                self.state = 469
                self.symbol()
                self.state = 470
                self.match(NyarParser.Less)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 471
                    self.typeExpression(0)
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==NyarParser.Comma:
                        self.state = 472
                        self.match(NyarParser.Comma)
                        self.state = 473
                        self.typeExpression(0)
                        self.state = 478
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 481
                self.match(NyarParser.Grater)
                pass

            elif la_ == 3:
                self.state = 483
                self.symbol()
                self.state = 485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 484
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Times or _la==NyarParser.Nullable):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 4:
                self.state = 487
                self.integer()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 498
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 496
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 490
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 491
                        _la = self._input.LA(1)
                        if not(_la==NyarParser.BitOr or _la==NyarParser.BitAnd):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 492
                        self.typeExpression(5)
                        pass

                    elif la_ == 2:
                        localctx = NyarParser.TypeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_typeExpression)
                        self.state = 493
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 494
                        self.match(NyarParser.T__4)
                        self.state = 495
                        self.match(NyarParser.T__5)
                        pass

             
                self.state = 500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_typeSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSuffix" ):
                listener.enterTypeSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSuffix" ):
                listener.exitTypeSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSuffix" ):
                return visitor.visitTypeSuffix(self)
            else:
                return visitor.visitChildren(self)




    def typeSuffix(self):

        localctx = NyarParser.TypeSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeSuffix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            _la = self._input.LA(1)
            if not(_la==NyarParser.Act or _la==NyarParser.Tilde):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 502
            self.typeExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignStatment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignVariableContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Flexible(self):
            return self.getToken(NyarParser.Flexible, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignVariable" ):
                listener.enterAssignVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignVariable" ):
                listener.exitAssignVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignVariable" ):
                return visitor.visitAssignVariable(self)
            else:
                return visitor.visitChildren(self)


    class AssignFunctionContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def functionPattern(self):
            return self.getTypedRuleContext(NyarParser.FunctionPatternContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignFunction" ):
                listener.enterAssignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignFunction" ):
                listener.exitAssignFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignFunction" ):
                return visitor.visitAssignFunction(self)
            else:
                return visitor.visitChildren(self)


    class AssignValueContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Val(self):
            return self.getToken(NyarParser.Val, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Set(self):
            return self.getToken(NyarParser.Set, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignValue" ):
                listener.enterAssignValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignValue" ):
                listener.exitAssignValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignValue" ):
                return visitor.visitAssignValue(self)
            else:
                return visitor.visitChildren(self)


    class AssignDeferContext(AssignStatmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignStatmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)
        def assignLHS(self):
            return self.getTypedRuleContext(NyarParser.AssignLHSContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def Delay(self):
            return self.getToken(NyarParser.Delay, 0)
        def assignRHS(self):
            return self.getTypedRuleContext(NyarParser.AssignRHSContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignDefer" ):
                listener.enterAssignDefer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignDefer" ):
                listener.exitAssignDefer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignDefer" ):
                return visitor.visitAssignDefer(self)
            else:
                return visitor.visitChildren(self)



    def assignStatment(self):

        localctx = NyarParser.AssignStatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignStatment)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.match(NyarParser.Val)
                self.state = 505
                self.assignLHS()
                self.state = 506
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.match(NyarParser.Var)
                self.state = 509
                self.assignLHS()
                self.state = 510
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self.match(NyarParser.Def)
                self.state = 513
                self.assignLHS()
                self.state = 514
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 516
                self.match(NyarParser.Def)
                self.state = 517
                self.functionPattern()
                self.state = 518
                self.blockStatement()
                pass

            elif la_ == 5:
                localctx = NyarParser.AssignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 520
                self.functionPattern()
                self.state = 521
                _la = self._input.LA(1)
                if not(_la==NyarParser.Set or _la==NyarParser.Delay):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 522
                self.assignRHS()
                pass

            elif la_ == 6:
                localctx = NyarParser.AssignValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 524
                self.assignLHS()
                self.state = 525
                self.match(NyarParser.Set)
                self.state = 526
                self.assignRHS()
                pass

            elif la_ == 7:
                localctx = NyarParser.AssignVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 528
                self.assignLHS()
                self.state = 529
                self.match(NyarParser.Flexible)
                self.state = 530
                self.assignRHS()
                pass

            elif la_ == 8:
                localctx = NyarParser.AssignDeferContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 532
                self.assignLHS()
                self.state = 533
                self.match(NyarParser.Delay)
                self.state = 534
                self.assignRHS()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignLHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_assignLHS

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LHSMaybeSetterContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeSetter" ):
                listener.enterLHSMaybeSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeSetter" ):
                listener.exitLHSMaybeSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeSetter" ):
                return visitor.visitLHSMaybeSetter(self)
            else:
                return visitor.visitChildren(self)


    class LHSTupleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def maybeSymbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.MaybeSymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.MaybeSymbolContext,i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSTuple" ):
                listener.enterLHSTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSTuple" ):
                listener.exitLHSTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSTuple" ):
                return visitor.visitLHSTuple(self)
            else:
                return visitor.visitChildren(self)


    class LHSSingleContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSSingle" ):
                listener.enterLHSSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSSingle" ):
                listener.exitLHSSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSSingle" ):
                return visitor.visitLHSSingle(self)
            else:
                return visitor.visitChildren(self)


    class LHSMaybeIndexContext(AssignLHSContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.AssignLHSContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)

        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLHSMaybeIndex" ):
                listener.enterLHSMaybeIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLHSMaybeIndex" ):
                listener.exitLHSMaybeIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLHSMaybeIndex" ):
                return visitor.visitLHSMaybeIndex(self)
            else:
                return visitor.visitChildren(self)



    def assignLHS(self):

        localctx = NyarParser.AssignLHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_assignLHS)
        self._la = 0 # Token type
        try:
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = NyarParser.LHSSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 538
                self.symbol()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 539
                    self.typeSuffix()


                pass

            elif la_ == 2:
                localctx = NyarParser.LHSTupleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.maybeSymbol()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 543
                    self.match(NyarParser.Comma)
                    self.state = 544
                    self.maybeSymbol()
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = NyarParser.LHSMaybeSetterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.symbols()
                pass

            elif la_ == 4:
                localctx = NyarParser.LHSMaybeIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 551
                self.symbols()
                self.state = 552
                self.index()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.StatementContext)
            else:
                return self.getTypedRuleContext(NyarParser.StatementContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_assignRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignRHS" ):
                listener.enterAssignRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignRHS" ):
                listener.exitAssignRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignRHS" ):
                return visitor.visitAssignRHS(self)
            else:
                return visitor.visitChildren(self)




    def assignRHS(self):

        localctx = NyarParser.AssignRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_assignRHS)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self.expressionStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 558
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 559
                self.match(NyarParser.T__0)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 560
                    self.statement()
                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 566
                self.match(NyarParser.T__1)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 567
                self.match(NyarParser.Colon)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 568
                    self.statement()
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 574
                self.match(NyarParser.End)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def typeExpression(self):
            return self.getTypedRuleContext(NyarParser.TypeExpressionContext,0)


        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Keyword(self):
            return self.getToken(NyarParser.Keyword, 0)

        def Nullable(self):
            return self.getToken(NyarParser.Nullable, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = NyarParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameter)
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 577
                    self.typeExpression(0)


                self.state = 580
                self.symbol()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 581
                    self.typeExpression(0)


                self.state = 584
                self.symbol()
                self.state = 585
                self.match(NyarParser.Times)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 588
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 587
                    self.typeExpression(0)


                self.state = 590
                self.symbol()
                self.state = 591
                self.match(NyarParser.Keyword)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 593
                    self.typeExpression(0)


                self.state = 596
                self.symbol()
                self.state = 597
                self.match(NyarParser.Nullable)
                self.state = 598
                self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_functionPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPattern" ):
                listener.enterFunctionPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPattern" ):
                listener.exitFunctionPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionPattern" ):
                return visitor.visitFunctionPattern(self)
            else:
                return visitor.visitChildren(self)




    def functionPattern(self):

        localctx = NyarParser.FunctionPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.symbol()
            self.state = 603
            self.match(NyarParser.T__2)
            self.state = 604
            self.parameter()
            self.state = 609
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 605
                    self.match(NyarParser.Comma)
                    self.state = 606
                    self.parameter() 
                self.state = 611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 612
                self.match(NyarParser.Comma)


            self.state = 615
            self.match(NyarParser.T__3)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 616
                self.typeSuffix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MaybeSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def Suffix(self):
            return self.getToken(NyarParser.Suffix, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_maybeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeSymbol" ):
                listener.enterMaybeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeSymbol" ):
                listener.exitMaybeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeSymbol" ):
                return visitor.visitMaybeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def maybeSymbol(self):

        localctx = NyarParser.MaybeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_maybeSymbol)
        self._la = 0 # Token type
        try:
            self.state = 624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols, NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.symbols()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 620
                    self.typeSuffix()


                pass
            elif token in [NyarParser.Suffix]:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.match(NyarParser.Suffix)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_symbols

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MaybeMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Symbols(self):
            return self.getToken(NyarParser.Symbols, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeMethod" ):
                listener.enterMaybeMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeMethod" ):
                listener.exitMaybeMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybeMethod" ):
                return visitor.visitMaybeMethod(self)
            else:
                return visitor.visitChildren(self)


    class MustMethodContext(SymbolsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.SymbolsContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)
        def Dot(self):
            return self.getToken(NyarParser.Dot, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMustMethod" ):
                listener.enterMustMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMustMethod" ):
                listener.exitMustMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMustMethod" ):
                return visitor.visitMustMethod(self)
            else:
                return visitor.visitChildren(self)



    def symbols(self):

        localctx = NyarParser.SymbolsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_symbols)
        try:
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Symbols]:
                localctx = NyarParser.MaybeMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.match(NyarParser.Symbols)
                pass
            elif token in [NyarParser.TrueName]:
                localctx = NyarParser.MustMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(NyarParser.TrueName)
                self.state = 628
                self.match(NyarParser.Dot)
                self.state = 629
                self.symbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(NyarParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def special(self):
            return self.getTypedRuleContext(NyarParser.SpecialContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def symbols(self):
            return self.getTypedRuleContext(NyarParser.SymbolsContext,0)


        def list(self):
            return self.getTypedRuleContext(NyarParser.ListContext,0)


        def dict(self):
            return self.getTypedRuleContext(NyarParser.DictContext,0)


        def index(self):
            return self.getTypedRuleContext(NyarParser.IndexContext,0)


        def solt(self):
            return self.getTypedRuleContext(NyarParser.SoltContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData" ):
                listener.enterData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData" ):
                listener.exitData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = NyarParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_data)
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                self.special()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 635
                self.symbol()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 636
                self.symbols()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 637
                self.list()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 638
                self.dict()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 639
                self.index()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 640
                self.solt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complex(self):
            return self.getTypedRuleContext(NyarParser.ComplexContext,0)


        def decimal(self):
            return self.getTypedRuleContext(NyarParser.DecimalContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Binary(self):
            return self.getToken(NyarParser.Binary, 0)

        def Octal(self):
            return self.getToken(NyarParser.Octal, 0)

        def Hexadecimal(self):
            return self.getToken(NyarParser.Hexadecimal, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = NyarParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_number)
        try:
            self.state = 649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.complex()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 644
                self.decimal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.integer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 646
                self.match(NyarParser.Binary)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 647
                self.match(NyarParser.Octal)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 648
                self.match(NyarParser.Hexadecimal)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexValid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.IndexValidContext)
            else:
                return self.getTypedRuleContext(NyarParser.IndexValidContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex" ):
                return visitor.visitIndex(self)
            else:
                return visitor.visitChildren(self)




    def index(self):

        localctx = NyarParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_index)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 651
                self.match(NyarParser.T__4)
                self.state = 652
                self.indexValid()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 653
                        self.match(NyarParser.Comma)


                    self.state = 656
                    self.indexValid()
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 662
                self.match(NyarParser.T__5)
                pass
            elif token in [NyarParser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.match(NyarParser.T__6)
                self.state = 665
                self.indexValid()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Comma - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==NyarParser.Comma:
                        self.state = 666
                        self.match(NyarParser.Comma)


                    self.state = 669
                    self.indexValid()
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 675
                self.match(NyarParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.KeyValueContext)
            else:
                return self.getTypedRuleContext(NyarParser.KeyValueContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict(self):

        localctx = NyarParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(NyarParser.T__0)
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.StringEscapeBlock - 18)) | (1 << (NyarParser.StringEscapeSingle - 18)) | (1 << (NyarParser.StringLiteral - 18)) | (1 << (NyarParser.StringEmpty - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                self.state = 680
                self.keyValue()


            self.state = 687
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 683
                    self.match(NyarParser.Comma)
                    self.state = 684
                    self.keyValue() 
                self.state = 689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 690
                self.match(NyarParser.Comma)


            self.state = 693
            self.match(NyarParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # KeyValidContext
            self.value = None # ElementContext

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def keyValid(self):
            return self.getTypedRuleContext(NyarParser.KeyValidContext,0)


        def element(self):
            return self.getTypedRuleContext(NyarParser.ElementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValue" ):
                listener.enterKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValue" ):
                listener.exitKeyValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValue" ):
                return visitor.visitKeyValue(self)
            else:
                return visitor.visitChildren(self)




    def keyValue(self):

        localctx = NyarParser.KeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_keyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            localctx.key = self.keyValid()
            self.state = 696
            self.match(NyarParser.Colon)
            self.state = 697
            localctx.value = self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def string(self):
            return self.getTypedRuleContext(NyarParser.StringContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_keyValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyValid" ):
                listener.enterKeyValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyValid" ):
                listener.exitKeyValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyValid" ):
                return visitor.visitKeyValid(self)
            else:
                return visitor.visitChildren(self)




    def keyValid(self):

        localctx = NyarParser.KeyValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_keyValid)
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Integer]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.integer()
                pass
            elif token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.symbol()
                pass
            elif token in [NyarParser.StringEscapeBlock, NyarParser.StringEscapeSingle, NyarParser.StringLiteral, NyarParser.StringEmpty]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.string()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElementContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list(self):

        localctx = NyarParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(NyarParser.T__4)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Using) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Type) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.If) | (1 << NyarParser.Switch) | (1 << NyarParser.Match) | (1 << NyarParser.Try) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy) | (1 << NyarParser.For) | (1 << NyarParser.While) | (1 << NyarParser.Do) | (1 << NyarParser.Trait) | (1 << NyarParser.Class))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                self.state = 705
                self.element()


            self.state = 712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    self.match(NyarParser.Comma)
                    self.state = 709
                    self.element() 
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Comma:
                self.state = 715
                self.match(NyarParser.Comma)


            self.state = 718
            self.match(NyarParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data(self):
            return self.getTypedRuleContext(NyarParser.DataContext,0)


        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(NyarParser.StatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement" ):
                return visitor.visitElement(self)
            else:
                return visitor.visitChildren(self)




    def element(self):

        localctx = NyarParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_element)
        try:
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.data()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 722
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexValidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def integer(self):
            return self.getTypedRuleContext(NyarParser.IntegerContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_indexValid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexValid" ):
                listener.enterIndexValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexValid" ):
                listener.exitIndexValid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexValid" ):
                return visitor.visitIndexValid(self)
            else:
                return visitor.visitChildren(self)




    def indexValid(self):

        localctx = NyarParser.IndexValidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexValid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.TrueName, NyarParser.Symbol]:
                self.state = 725
                self.symbol()
                pass
            elif token in [NyarParser.Integer]:
                self.state = 726
                self.integer()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Colon:
                self.state = 729
                self.match(NyarParser.Colon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_branchStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MatchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Match(self):
            return self.getToken(NyarParser.Match, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def matchBody(self):
            return self.getTypedRuleContext(NyarParser.MatchBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStatement" ):
                listener.enterMatchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStatement" ):
                listener.exitMatchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStatement" ):
                return visitor.visitMatchStatement(self)
            else:
                return visitor.visitChildren(self)


    class SwitchStatementContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Switch(self):
            return self.getToken(NyarParser.Switch, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def switchBody(self):
            return self.getTypedRuleContext(NyarParser.SwitchBodyContext,0)

        def switchController(self):
            return self.getTypedRuleContext(NyarParser.SwitchControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)


    class IfNestedContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)

        def elseIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ElseIfContext)
            else:
                return self.getTypedRuleContext(NyarParser.ElseIfContext,i)

        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)

        def Then(self):
            return self.getToken(NyarParser.Then, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNested" ):
                listener.enterIfNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNested" ):
                listener.exitIfNested(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNested" ):
                return visitor.visitIfNested(self)
            else:
                return visitor.visitChildren(self)


    class IfSingleContext(BranchStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.BranchStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def If(self):
            return self.getToken(NyarParser.If, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)

        def else(self):
            return self.getTypedRuleContext(NyarParser.ElseContext,0)

        def Then(self):
            return self.getToken(NyarParser.Then, 0)
        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingle" ):
                listener.enterIfSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingle" ):
                listener.exitIfSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingle" ):
                return visitor.visitIfSingle(self)
            else:
                return visitor.visitChildren(self)



    def branchStatement(self):

        localctx = NyarParser.BranchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_branchStatement)
        self._la = 0 # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                localctx = NyarParser.IfSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(NyarParser.If)
                self.state = 733
                self.condition()
                self.state = 735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 734
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 737
                self.blockNonEnd()
                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.else()


                pass

            elif la_ == 2:
                localctx = NyarParser.IfNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.match(NyarParser.If)
                self.state = 742
                self.condition()
                self.state = 744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 743
                    _la = self._input.LA(1)
                    if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 746
                self.blockNonEnd()
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 747
                        self.elseIf() 
                    self.state = 752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 753
                    self.else()


                pass

            elif la_ == 3:
                localctx = NyarParser.SwitchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 756
                self.match(NyarParser.Switch)
                self.state = 757
                self.condition()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Break))) != 0):
                    self.state = 758
                    self.switchController()


                self.state = 761
                self.switchBody()
                pass

            elif la_ == 4:
                localctx = NyarParser.MatchStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 763
                self.match(NyarParser.Match)
                self.state = 764
                self.condition()
                self.state = 765
                self.matchBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_else

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse" ):
                listener.enterElse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse" ):
                listener.exitElse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse" ):
                return visitor.visitElse(self)
            else:
                return visitor.visitChildren(self)




    def else(self):

        localctx = NyarParser.ElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_else)
        try:
            self.state = 773
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(NyarParser.Else)
                self.state = 770
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(NyarParser.Else)
                self.state = 772
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(NyarParser.Else, 0)

        def If(self):
            return self.getToken(NyarParser.If, 0)

        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)


        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Then(self):
            return self.getToken(NyarParser.Then, 0)

        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_elseIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIf" ):
                listener.enterElseIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIf" ):
                listener.exitElseIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseIf" ):
                return visitor.visitElseIf(self)
            else:
                return visitor.visitChildren(self)




    def elseIf(self):

        localctx = NyarParser.ElseIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_elseIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(NyarParser.Else)
            self.state = 776
            self.match(NyarParser.If)
            self.state = 777
            self.condition()
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 778
                _la = self._input.LA(1)
                if not(_la==NyarParser.Colon or _la==NyarParser.Then):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 781
            self.blockNonEnd()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(NyarParser.Case, 0)

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def blockNonEnd(self):
            return self.getTypedRuleContext(NyarParser.BlockNonEndContext,0)


        def Rule(self):
            return self.getToken(NyarParser.Rule, 0)

        def Default(self):
            return self.getToken(NyarParser.Default, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_caseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBody" ):
                listener.enterCaseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBody" ):
                listener.exitCaseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseBody" ):
                return visitor.visitCaseBody(self)
            else:
                return visitor.visitChildren(self)




    def caseBody(self):

        localctx = NyarParser.CaseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_caseBody)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(NyarParser.Case)
                self.state = 784
                self.expression(0)
                self.state = 785
                self.match(NyarParser.Colon)
                self.state = 786
                self.blockNonEnd()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.expression(0)
                self.state = 789
                self.match(NyarParser.Rule)
                self.state = 790
                self.blockNonEnd()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.match(NyarParser.Default)
                self.state = 793
                self.match(NyarParser.Colon)
                self.state = 794
                self.blockNonEnd()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.match(NyarParser.Case)
                self.state = 796
                self.match(NyarParser.Times)
                self.state = 797
                self.match(NyarParser.Colon)
                self.state = 798
                self.blockNonEnd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 799
                self.match(NyarParser.Times)
                self.state = 800
                self.match(NyarParser.Rule)
                self.state = 801
                self.blockNonEnd()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.CaseBodyContext)
            else:
                return self.getTypedRuleContext(NyarParser.CaseBodyContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBody" ):
                listener.enterSwitchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBody" ):
                listener.exitSwitchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchBody" ):
                return visitor.visitSwitchBody(self)
            else:
                return visitor.visitChildren(self)




    def switchBody(self):

        localctx = NyarParser.SwitchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_switchBody)
        self._la = 0 # Token type
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.match(NyarParser.T__0)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 805
                    self.caseBody()
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 811
                self.match(NyarParser.T__1)
                pass
            elif token in [NyarParser.Colon]:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(NyarParser.Colon)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.T__0) | (1 << NyarParser.T__2) | (1 << NyarParser.T__4) | (1 << NyarParser.T__6) | (1 << NyarParser.Times) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Def) | (1 << NyarParser.Plus) | (1 << NyarParser.Minus) | (1 << NyarParser.Case) | (1 << NyarParser.Default) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (NyarParser.Suffix - 64)) | (1 << (NyarParser.Decimal - 64)) | (1 << (NyarParser.DecimalBad - 64)) | (1 << (NyarParser.Binary - 64)) | (1 << (NyarParser.Octal - 64)) | (1 << (NyarParser.Hexadecimal - 64)) | (1 << (NyarParser.Integer - 64)) | (1 << (NyarParser.StringEscapeBlock - 64)) | (1 << (NyarParser.StringEscapeSingle - 64)) | (1 << (NyarParser.StringLiteral - 64)) | (1 << (NyarParser.StringEmpty - 64)) | (1 << (NyarParser.Symbols - 64)) | (1 << (NyarParser.TrueName - 64)) | (1 << (NyarParser.Symbol - 64)) | (1 << (NyarParser.True - 64)) | (1 << (NyarParser.False - 64)) | (1 << (NyarParser.Null - 64)) | (1 << (NyarParser.Nothing - 64)) | (1 << (NyarParser.Sharp - 64)) | (1 << (NyarParser.Increase - 64)) | (1 << (NyarParser.BitNot - 64)))) != 0) or _la==NyarParser.LogicNot or _la==NyarParser.Reciprocal:
                    self.state = 813
                    self.caseBody()
                    self.state = 818
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 819
                self.match(NyarParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def Return(self):
            return self.getToken(NyarParser.Return, 0)

        def Break(self):
            return self.getToken(NyarParser.Break, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_switchController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchController" ):
                listener.enterSwitchController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchController" ):
                listener.exitSwitchController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchController" ):
                return visitor.visitSwitchController(self)
            else:
                return visitor.visitChildren(self)




    def switchController(self):

        localctx = NyarParser.SwitchControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_switchController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Break))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_matchBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchBody" ):
                listener.enterMatchBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchBody" ):
                listener.exitMatchBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchBody" ):
                return visitor.visitMatchBody(self)
            else:
                return visitor.visitChildren(self)




    def matchBody(self):

        localctx = NyarParser.MatchBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchBody)
        try:
            self.state = 826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = NyarParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_condition)
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.match(NyarParser.T__2)
                self.state = 830
                self.expression(0)
                self.state = 831
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(NyarParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def finalProduction(self):
            return self.getTypedRuleContext(NyarParser.FinalProductionContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(NyarParser.CatchProductionContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = NyarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tryStatement)
        try:
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.match(NyarParser.Try)
                self.state = 836
                self.blockStatement()
                self.state = 837
                self.finalProduction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(NyarParser.Try)
                self.state = 840
                self.blockStatement()

                self.state = 841
                self.catchProduction()
                self.state = 843
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 842
                    self.finalProduction()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(NyarParser.Catch, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchProduction" ):
                return visitor.visitCatchProduction(self)
            else:
                return visitor.visitChildren(self)




    def catchProduction(self):

        localctx = NyarParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_catchProduction)
        try:
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.match(NyarParser.Catch)
                self.state = 848
                self.symbol()
                self.state = 849
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 851
                self.match(NyarParser.Catch)
                self.state = 852
                self.match(NyarParser.T__2)
                self.state = 853
                self.symbol()
                self.state = 854
                self.match(NyarParser.T__3)
                self.state = 855
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(NyarParser.Final, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_finalProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalProduction" ):
                listener.enterFinalProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalProduction" ):
                listener.exitFinalProduction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinalProduction" ):
                return visitor.visitFinalProduction(self)
            else:
                return visitor.visitChildren(self)




    def finalProduction(self):

        localctx = NyarParser.FinalProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_finalProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(NyarParser.Final)
            self.state = 860
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_loopStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForInLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)

        def In(self):
            return self.getToken(NyarParser.In, 0)
        def expression(self):
            return self.getTypedRuleContext(NyarParser.ExpressionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInLoop" ):
                listener.enterForInLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInLoop" ):
                listener.exitForInLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForInLoop" ):
                return visitor.visitForInLoop(self)
            else:
                return visitor.visitChildren(self)


    class ForLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(NyarParser.For, 0)
        def expressionStatement(self):
            return self.getTypedRuleContext(NyarParser.ExpressionStatementContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)


    class DoLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(NyarParser.Do, 0)
        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoLoop" ):
                listener.enterDoLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoLoop" ):
                listener.exitDoLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoLoop" ):
                return visitor.visitDoLoop(self)
            else:
                return visitor.visitChildren(self)


    class WhileLoopContext(LoopStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.LoopStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(NyarParser.While, 0)
        def condition(self):
            return self.getTypedRuleContext(NyarParser.ConditionContext,0)

        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)

        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileLoop" ):
                return visitor.visitWhileLoop(self)
            else:
                return visitor.visitChildren(self)



    def loopStatement(self):

        localctx = NyarParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                localctx = NyarParser.ForLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 862
                self.match(NyarParser.For)
                self.state = 863
                self.match(NyarParser.T__2)
                self.state = 864
                self.expressionStatement()
                self.state = 865
                self.match(NyarParser.T__3)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 866
                    self.loopController()


                self.state = 869
                self.blockStatement()
                pass

            elif la_ == 2:
                localctx = NyarParser.ForInLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 871
                self.match(NyarParser.For)
                self.state = 872
                self.symbol()
                self.state = 873
                self.match(NyarParser.In)
                self.state = 874
                self.expression(0)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 875
                    self.loopController()


                self.state = 878
                self.blockStatement()
                pass

            elif la_ == 3:
                localctx = NyarParser.WhileLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(NyarParser.While)
                self.state = 881
                self.condition()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 882
                    self.loopController()


                self.state = 885
                self.blockStatement()
                pass

            elif la_ == 4:
                localctx = NyarParser.DoLoopContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.match(NyarParser.Do)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Async or _la==NyarParser.Lazy:
                    self.state = 888
                    self.loopController()


                self.state = 891
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Async(self):
            return self.getToken(NyarParser.Async, 0)

        def Lazy(self):
            return self.getToken(NyarParser.Lazy, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_loopController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopController" ):
                listener.enterLoopController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopController" ):
                listener.exitLoopController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopController" ):
                return visitor.visitLoopController(self)
            else:
                return visitor.visitChildren(self)




    def loopController(self):

        localctx = NyarParser.LoopControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_loopController)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            _la = self._input.LA(1)
            if not(_la==NyarParser.Async or _la==NyarParser.Lazy):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassExpressionContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassExpressionContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def End(self):
            return self.getToken(NyarParser.End, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = NyarParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.match(NyarParser.T__0)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 897
                    self.classExpression()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 903
                self.match(NyarParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(NyarParser.Colon)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << NyarParser.Separate) | (1 << NyarParser.Semicolon) | (1 << NyarParser.Pass) | (1 << NyarParser.Return) | (1 << NyarParser.Yield) | (1 << NyarParser.Await) | (1 << NyarParser.Break) | (1 << NyarParser.Throw) | (1 << NyarParser.Val) | (1 << NyarParser.Var) | (1 << NyarParser.Let) | (1 << NyarParser.Def) | (1 << NyarParser.Async) | (1 << NyarParser.Lazy))) != 0) or _la==NyarParser.TrueName or _la==NyarParser.Symbol:
                    self.state = 905
                    self.classExpression()
                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 911
                self.match(NyarParser.End)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(NyarParser.Colon)
                self.state = 913
                self.classExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def emptyStatement(self):
            return self.getTypedRuleContext(NyarParser.EmptyStatementContext,0)


        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classController(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ClassControllerContext)
            else:
                return self.getTypedRuleContext(NyarParser.ClassControllerContext,i)


        def typeSuffix(self):
            return self.getTypedRuleContext(NyarParser.TypeSuffixContext,0)


        def blockStatement(self):
            return self.getTypedRuleContext(NyarParser.BlockStatementContext,0)


        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.ParameterContext)
            else:
                return self.getTypedRuleContext(NyarParser.ParameterContext,i)


        def Colon(self):
            return self.getToken(NyarParser.Colon, 0)

        def Pass(self):
            return self.getToken(NyarParser.Pass, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExpression" ):
                return visitor.visitClassExpression(self)
            else:
                return visitor.visitChildren(self)




    def classExpression(self):

        localctx = NyarParser.ClassExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_classExpression)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.emptyStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 917
                        self.classController() 
                    self.state = 922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 923
                self.symbol()
                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.typeSuffix()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 927
                        self.classController() 
                    self.state = 932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 933
                self.symbol()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 934
                    self.typeSuffix()


                self.state = 937
                self.blockStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 939
                        self.classController() 
                    self.state = 944
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                self.state = 945
                self.symbol()
                self.state = 946
                self.match(NyarParser.T__2)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 947
                    self.parameter()
                    self.state = 952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 953
                self.match(NyarParser.T__3)
                self.state = 955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 954
                    self.typeSuffix()


                self.state = 959
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 957
                    self.match(NyarParser.Colon)
                    self.state = 958
                    self.match(NyarParser.Pass)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 961
                        self.classController() 
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 967
                self.symbol()
                self.state = 968
                self.match(NyarParser.T__2)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.Integer - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0):
                    self.state = 969
                    self.parameter()
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 975
                self.match(NyarParser.T__3)
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==NyarParser.Act or _la==NyarParser.Tilde:
                    self.state = 976
                    self.typeSuffix()


                self.state = 979
                self.blockStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TraitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Trait(self):
            return self.getToken(NyarParser.Trait, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_traitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitStatement" ):
                listener.enterTraitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitStatement" ):
                listener.exitTraitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTraitStatement" ):
                return visitor.visitTraitStatement(self)
            else:
                return visitor.visitChildren(self)




    def traitStatement(self):

        localctx = NyarParser.TraitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_traitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(NyarParser.Trait)
            self.state = 984
            self.symbol()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 985
                self.classExtend()


            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 988
                self.classTrait()


            self.state = 991
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(NyarParser.Class, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def classBody(self):
            return self.getTypedRuleContext(NyarParser.ClassBodyContext,0)


        def classExtend(self):
            return self.getTypedRuleContext(NyarParser.ClassExtendContext,0)


        def classTrait(self):
            return self.getTypedRuleContext(NyarParser.ClassTraitContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassStatement" ):
                return visitor.visitClassStatement(self)
            else:
                return visitor.visitChildren(self)




    def classStatement(self):

        localctx = NyarParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(NyarParser.Class)
            self.state = 994
            self.symbol()
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.T__2 or _la==NyarParser.Extend:
                self.state = 995
                self.classExtend()


            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==NyarParser.Act or _la==NyarParser.Tilde:
                self.state = 998
                self.classTrait()


            self.state = 1001
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExtendContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extend(self):
            return self.getToken(NyarParser.Extend, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classExtend

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExtend" ):
                listener.enterClassExtend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExtend" ):
                listener.exitClassExtend(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExtend" ):
                return visitor.visitClassExtend(self)
            else:
                return visitor.visitChildren(self)




    def classExtend(self):

        localctx = NyarParser.ClassExtendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_classExtend)
        self._la = 0 # Token type
        try:
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Extend]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                self.match(NyarParser.Extend)
                self.state = 1005 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1004
                    self.symbol()
                    self.state = 1007 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass
            elif token in [NyarParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self.match(NyarParser.T__2)
                self.state = 1010
                self.symbol()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 1011
                    self.match(NyarParser.Comma)
                    self.state = 1012
                    self.symbol()
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1018
                self.match(NyarParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTraitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Act(self):
            return self.getToken(NyarParser.Act, 0)

        def symbol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(NyarParser.SymbolContext)
            else:
                return self.getTypedRuleContext(NyarParser.SymbolContext,i)


        def Tilde(self):
            return self.getToken(NyarParser.Tilde, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(NyarParser.Comma)
            else:
                return self.getToken(NyarParser.Comma, i)

        def getRuleIndex(self):
            return NyarParser.RULE_classTrait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTrait" ):
                listener.enterClassTrait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTrait" ):
                listener.exitClassTrait(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassTrait" ):
                return visitor.visitClassTrait(self)
            else:
                return visitor.visitChildren(self)




    def classTrait(self):

        localctx = NyarParser.ClassTraitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_classTrait)
        self._la = 0 # Token type
        try:
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.match(NyarParser.Act)
                self.state = 1024 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1023
                    self.symbol()
                    self.state = 1026 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (NyarParser.Pass - 18)) | (1 << (NyarParser.Return - 18)) | (1 << (NyarParser.Yield - 18)) | (1 << (NyarParser.Await - 18)) | (1 << (NyarParser.Break - 18)) | (1 << (NyarParser.Throw - 18)) | (1 << (NyarParser.Async - 18)) | (1 << (NyarParser.Lazy - 18)) | (1 << (NyarParser.TrueName - 18)) | (1 << (NyarParser.Symbol - 18)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(NyarParser.Tilde)
                self.state = 1029
                self.symbol()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1030
                self.match(NyarParser.Tilde)
                self.state = 1031
                self.match(NyarParser.T__2)
                self.state = 1032
                self.symbol()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==NyarParser.Comma:
                    self.state = 1033
                    self.match(NyarParser.Comma)
                    self.state = 1034
                    self.symbol()
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1040
                self.match(NyarParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Val(self):
            return self.getToken(NyarParser.Val, 0)

        def Var(self):
            return self.getToken(NyarParser.Var, 0)

        def Let(self):
            return self.getToken(NyarParser.Let, 0)

        def Def(self):
            return self.getToken(NyarParser.Def, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_classController

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassController" ):
                listener.enterClassController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassController" ):
                listener.exitClassController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassController" ):
                return visitor.visitClassController(self)
            else:
                return visitor.visitChildren(self)




    def classController(self):

        localctx = NyarParser.ClassControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_classController)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy, NyarParser.TrueName, NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.symbol()
                pass
            elif token in [NyarParser.Val]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.match(NyarParser.Val)
                pass
            elif token in [NyarParser.Var]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.match(NyarParser.Var)
                pass
            elif token in [NyarParser.Let]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1047
                self.match(NyarParser.Let)
                pass
            elif token in [NyarParser.Def]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1048
                self.match(NyarParser.Def)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_complex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex" ):
                listener.enterComplex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex" ):
                listener.exitComplex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex" ):
                return visitor.visitComplex(self)
            else:
                return visitor.visitChildren(self)




    def complex(self):

        localctx = NyarParser.ComplexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_complex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1052
            self.symbol()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decimal(self):
            return self.getToken(NyarParser.Decimal, 0)

        def DecimalBad(self):
            return self.getToken(NyarParser.DecimalBad, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimal" ):
                listener.enterDecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimal" ):
                listener.exitDecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimal" ):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)




    def decimal(self):

        localctx = NyarParser.DecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_decimal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            _la = self._input.LA(1)
            if not(_la==NyarParser.Decimal or _la==NyarParser.DecimalBad):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = NyarParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(NyarParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return NyarParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringLiteral(self):
            return self.getToken(NyarParser.StringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeBlockContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeBlock(self):
            return self.getToken(NyarParser.StringEscapeBlock, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeBlock" ):
                listener.enterStringEscapeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeBlock" ):
                listener.exitStringEscapeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeBlock" ):
                return visitor.visitStringEscapeBlock(self)
            else:
                return visitor.visitChildren(self)


    class StringEmptyContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEmpty(self):
            return self.getToken(NyarParser.StringEmpty, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEmpty" ):
                listener.enterStringEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEmpty" ):
                listener.exitStringEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEmpty" ):
                return visitor.visitStringEmpty(self)
            else:
                return visitor.visitChildren(self)


    class StringEscapeSingleContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a NyarParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringEscapeSingle(self):
            return self.getToken(NyarParser.StringEscapeSingle, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringEscapeSingle" ):
                listener.enterStringEscapeSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringEscapeSingle" ):
                listener.exitStringEscapeSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringEscapeSingle" ):
                return visitor.visitStringEscapeSingle(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = NyarParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_string)
        try:
            self.state = 1062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.StringEscapeBlock]:
                localctx = NyarParser.StringEscapeBlockContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(NyarParser.StringEscapeBlock)
                pass
            elif token in [NyarParser.StringEscapeSingle]:
                localctx = NyarParser.StringEscapeSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(NyarParser.StringEscapeSingle)
                pass
            elif token in [NyarParser.StringLiteral]:
                localctx = NyarParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(NyarParser.StringLiteral)
                pass
            elif token in [NyarParser.StringEmpty]:
                localctx = NyarParser.StringEmptyContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.match(NyarParser.StringEmpty)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControllerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flowController(self):
            return self.getTypedRuleContext(NyarParser.FlowControllerContext,0)


        def switchController(self):
            return self.getTypedRuleContext(NyarParser.SwitchControllerContext,0)


        def loopController(self):
            return self.getTypedRuleContext(NyarParser.LoopControllerContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_controller

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterController" ):
                listener.enterController(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitController" ):
                listener.exitController(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitController" ):
                return visitor.visitController(self)
            else:
                return visitor.visitChildren(self)




    def controller(self):

        localctx = NyarParser.ControllerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_controller)
        try:
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.flowController()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.switchController()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.loopController()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def True(self):
            return self.getToken(NyarParser.True, 0)

        def False(self):
            return self.getToken(NyarParser.False, 0)

        def Null(self):
            return self.getToken(NyarParser.Null, 0)

        def Nothing(self):
            return self.getToken(NyarParser.Nothing, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecial" ):
                listener.enterSpecial(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecial" ):
                listener.exitSpecial(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecial" ):
                return visitor.visitSpecial(self)
            else:
                return visitor.visitChildren(self)




    def special(self):

        localctx = NyarParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            _la = self._input.LA(1)
            if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (NyarParser.True - 82)) | (1 << (NyarParser.False - 82)) | (1 << (NyarParser.Null - 82)) | (1 << (NyarParser.Nothing - 82)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def controller(self):
            return self.getTypedRuleContext(NyarParser.ControllerContext,0)


        def Symbol(self):
            return self.getToken(NyarParser.Symbol, 0)

        def TrueName(self):
            return self.getToken(NyarParser.TrueName, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_symbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbol" ):
                listener.enterSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbol" ):
                listener.exitSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbol" ):
                return visitor.visitSymbol(self)
            else:
                return visitor.visitChildren(self)




    def symbol(self):

        localctx = NyarParser.SymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_symbol)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Pass, NyarParser.Return, NyarParser.Yield, NyarParser.Await, NyarParser.Break, NyarParser.Throw, NyarParser.Async, NyarParser.Lazy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1071
                self.controller()
                pass
            elif token in [NyarParser.Symbol]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1072
                self.match(NyarParser.Symbol)
                pass
            elif token in [NyarParser.TrueName]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1073
                self.match(NyarParser.TrueName)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SoltContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Token
            self.id = None # SymbolContext

        def Sharp(self):
            return self.getToken(NyarParser.Sharp, 0)

        def Integer(self):
            return self.getToken(NyarParser.Integer, 0)

        def symbol(self):
            return self.getTypedRuleContext(NyarParser.SymbolContext,0)


        def getRuleIndex(self):
            return NyarParser.RULE_solt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSolt" ):
                listener.enterSolt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSolt" ):
                listener.exitSolt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSolt" ):
                return visitor.visitSolt(self)
            else:
                return visitor.visitChildren(self)




    def solt(self):

        localctx = NyarParser.SoltContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_solt)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.match(NyarParser.Sharp)
                self.state = 1078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1077
                    localctx.n = self.match(NyarParser.Integer)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(NyarParser.Sharp)
                self.state = 1081
                localctx.id = self.symbol()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_add_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_ops" ):
                listener.enterAdd_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_ops" ):
                listener.exitAdd_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdd_ops" ):
                return visitor.visitAdd_ops(self)
            else:
                return visitor.visitChildren(self)




    def add_ops(self):

        localctx = NyarParser.Add_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_add_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plus(self):
            return self.getToken(NyarParser.Plus, 0)

        def Minus(self):
            return self.getToken(NyarParser.Minus, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def Reciprocal(self):
            return self.getToken(NyarParser.Reciprocal, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pre_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_ops" ):
                listener.enterPre_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_ops" ):
                listener.exitPre_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPre_ops" ):
                return visitor.visitPre_ops(self)
            else:
                return visitor.visitChildren(self)




    def pre_ops(self):

        localctx = NyarParser.Pre_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pre_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            _la = self._input.LA(1)
            if not(_la==NyarParser.Plus or _la==NyarParser.Minus or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (NyarParser.Increase - 103)) | (1 << (NyarParser.BitNot - 103)) | (1 << (NyarParser.LogicNot - 103)) | (1 << (NyarParser.Reciprocal - 103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pst_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def BitNot(self):
            return self.getToken(NyarParser.BitNot, 0)

        def DoubleBang(self):
            return self.getToken(NyarParser.DoubleBang, 0)

        def Decrease(self):
            return self.getToken(NyarParser.Decrease, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pst_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPst_ops" ):
                listener.enterPst_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPst_ops" ):
                listener.exitPst_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPst_ops" ):
                return visitor.visitPst_ops(self)
            else:
                return visitor.visitChildren(self)




    def pst_ops(self):

        localctx = NyarParser.Pst_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pst_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            _la = self._input.LA(1)
            if not(((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (NyarParser.Increase - 103)) | (1 << (NyarParser.Decrease - 103)) | (1 << (NyarParser.DoubleBang - 103)) | (1 << (NyarParser.BitNot - 103)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bit_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Exponent(self):
            return self.getToken(NyarParser.Exponent, 0)

        def Base(self):
            return self.getToken(NyarParser.Base, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_bit_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBit_ops" ):
                listener.enterBit_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBit_ops" ):
                listener.exitBit_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBit_ops" ):
                return visitor.visitBit_ops(self)
            else:
                return visitor.visitChildren(self)




    def bit_ops(self):

        localctx = NyarParser.Bit_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_bit_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (NyarParser.Exponent - 72)) | (1 << (NyarParser.Base - 72)) | (1 << (NyarParser.LeftShift - 72)) | (1 << (NyarParser.RightShift - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lgk_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicNot(self):
            return self.getToken(NyarParser.LogicNot, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def LogicXor(self):
            return self.getToken(NyarParser.LogicXor, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_lgk_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLgk_ops" ):
                listener.enterLgk_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLgk_ops" ):
                listener.exitLgk_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLgk_ops" ):
                return visitor.visitLgk_ops(self)
            else:
                return visitor.visitChildren(self)




    def lgk_ops(self):

        localctx = NyarParser.Lgk_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_lgk_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            _la = self._input.LA(1)
            if not(((((_la - 105)) & ~0x3f) == 0 and ((1 << (_la - 105)) & ((1 << (NyarParser.LogicXor - 105)) | (1 << (NyarParser.LogicOr - 105)) | (1 << (NyarParser.LogicAnd - 105)) | (1 << (NyarParser.LogicNot - 105)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cpr_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equal(self):
            return self.getToken(NyarParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(NyarParser.NotEqual, 0)

        def Equivalent(self):
            return self.getToken(NyarParser.Equivalent, 0)

        def NotEquivalent(self):
            return self.getToken(NyarParser.NotEquivalent, 0)

        def Grater(self):
            return self.getToken(NyarParser.Grater, 0)

        def GraterEqual(self):
            return self.getToken(NyarParser.GraterEqual, 0)

        def Less(self):
            return self.getToken(NyarParser.Less, 0)

        def LessEqual(self):
            return self.getToken(NyarParser.LessEqual, 0)

        def LogicAnd(self):
            return self.getToken(NyarParser.LogicAnd, 0)

        def LogicOr(self):
            return self.getToken(NyarParser.LogicOr, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_cpr_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCpr_ops" ):
                listener.enterCpr_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCpr_ops" ):
                listener.exitCpr_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCpr_ops" ):
                return visitor.visitCpr_ops(self)
            else:
                return visitor.visitChildren(self)




    def cpr_ops(self):

        localctx = NyarParser.Cpr_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_cpr_ops)
        self._la = 0 # Token type
        try:
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [NyarParser.Equivalent, NyarParser.NotEquivalent, NyarParser.Equal, NyarParser.NotEqual]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                _la = self._input.LA(1)
                if not(((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & ((1 << (NyarParser.Equivalent - 118)) | (1 << (NyarParser.NotEquivalent - 118)) | (1 << (NyarParser.Equal - 118)) | (1 << (NyarParser.NotEqual - 118)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LessEqual, NyarParser.Less, NyarParser.GraterEqual, NyarParser.Grater]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                _la = self._input.LA(1)
                if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (NyarParser.LessEqual - 97)) | (1 << (NyarParser.Less - 97)) | (1 << (NyarParser.GraterEqual - 97)) | (1 << (NyarParser.Grater - 97)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [NyarParser.LogicOr, NyarParser.LogicAnd]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1096
                _la = self._input.LA(1)
                if not(_la==NyarParser.LogicOr or _la==NyarParser.LogicAnd):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pow_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Power(self):
            return self.getToken(NyarParser.Power, 0)

        def Surd(self):
            return self.getToken(NyarParser.Surd, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_pow_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPow_ops" ):
                listener.enterPow_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPow_ops" ):
                listener.exitPow_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPow_ops" ):
                return visitor.visitPow_ops(self)
            else:
                return visitor.visitChildren(self)




    def pow_ops(self):

        localctx = NyarParser.Pow_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pow_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            _la = self._input.LA(1)
            if not(_la==NyarParser.Power or _la==NyarParser.Surd):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mul_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Divide(self):
            return self.getToken(NyarParser.Divide, 0)

        def Mod(self):
            return self.getToken(NyarParser.Mod, 0)

        def Remainder(self):
            return self.getToken(NyarParser.Remainder, 0)

        def Times(self):
            return self.getToken(NyarParser.Times, 0)

        def Multiply(self):
            return self.getToken(NyarParser.Multiply, 0)

        def Kronecker(self):
            return self.getToken(NyarParser.Kronecker, 0)

        def TensorProduct(self):
            return self.getToken(NyarParser.TensorProduct, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_mul_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMul_ops" ):
                listener.enterMul_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMul_ops" ):
                listener.exitMul_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMul_ops" ):
                return visitor.visitMul_ops(self)
            else:
                return visitor.visitChildren(self)




    def mul_ops(self):

        localctx = NyarParser.Mul_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_mul_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            _la = self._input.LA(1)
            if not(_la==NyarParser.Times or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (NyarParser.Multiply - 108)) | (1 << (NyarParser.Kronecker - 108)) | (1 << (NyarParser.TensorProduct - 108)) | (1 << (NyarParser.Remainder - 108)) | (1 << (NyarParser.Divide - 108)) | (1 << (NyarParser.Mod - 108)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_opsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Concat(self):
            return self.getToken(NyarParser.Concat, 0)

        def LeftShift(self):
            return self.getToken(NyarParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(NyarParser.RightShift, 0)

        def Increase(self):
            return self.getToken(NyarParser.Increase, 0)

        def Map(self):
            return self.getToken(NyarParser.Map, 0)

        def getRuleIndex(self):
            return NyarParser.RULE_list_ops

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_ops" ):
                listener.enterList_ops(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_ops" ):
                listener.exitList_ops(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_ops" ):
                return visitor.visitList_ops(self)
            else:
                return visitor.visitChildren(self)




    def list_ops(self):

        localctx = NyarParser.List_opsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_list_ops)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (NyarParser.LeftShift - 96)) | (1 << (NyarParser.RightShift - 96)) | (1 << (NyarParser.Increase - 96)) | (1 << (NyarParser.Map - 96)) | (1 << (NyarParser.Concat - 96)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[12] = self.expression_sempred
        self._predicates[20] = self.typeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def typeExpression_sempred(self, localctx:TypeExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         




